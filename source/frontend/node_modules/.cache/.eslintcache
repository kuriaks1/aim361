[{"/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/src/index.js":"1","/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/src/reportWebVitals.js":"2","/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/src/routing.js":"3","/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/src/config.js":"4","/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/src/Wrapper.js":"5","/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/src/App.js":"6"},{"size":1298,"mtime":1728771496571,"results":"7","hashOfConfig":"8"},{"size":466,"mtime":1728771496571,"results":"9","hashOfConfig":"8"},{"size":578,"mtime":1728771496571,"results":"10","hashOfConfig":"8"},{"size":318,"mtime":1728772623697,"results":"11","hashOfConfig":"8"},{"size":4383,"mtime":1728771496571,"results":"12","hashOfConfig":"8"},{"size":20686,"mtime":1728785443217,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18vfdin",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/src/index.js",[],[],"/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/src/reportWebVitals.js",[],[],"/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/src/routing.js",[],[],"/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/src/config.js",[],[],"/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/src/Wrapper.js",[],[],"/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/src/App.js",["33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48"],[],"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT.\n\nimport './App.css';\nimport '@aws-amplify/ui-react/styles.css';\nimport React, { useState, useEffect } from 'react';\nimport { Button, withAuthenticator } from '@aws-amplify/ui-react';\nimport { Amplify, Auth } from 'aws-amplify';\n\nimport { API_GATEWAY_URL } from './config';\n\nconst fileToB64 = file => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsBinaryString(file);\n    reader.onload = () => resolve(btoa(reader.result));\n    reader.onerror = reject;\n});\n\n\nfunction App({ signOut, user }) {\n    const [modelSelected, setModelSelected] = useState('Anthropic: Claude');\n    const [inputText, setInputText] = useState(\"\");\n    const [responseText, setResponseText] = useState(\"\");\n    const [imageResponse, setImageResponse] = useState(null);\n    const [imageResponseImg, setImageResponseImg] = useState(\"\");\n    const [isBuffering, setIsBuffering] = useState(false)\n    const [isBufferingLanguage, setIsBufferingLanguage] = useState(false)\n    const [languageResponse, setLanguageResponse] = useState(\"\");\n    const [translationQueue, setTranslationQueue] = useState([]);\n    const [languageSelected, setLanguageSelected] = useState(\"English\");\n    const [demoSelected, setDemoSelected] = useState(\"Image\");\n    const [userInputPrompt, setUserInputPrompt] = useState('');\n    const [imageBlob, setImageBlob] = useState('');\n    const [userInputEnhance, setUserInputEnhance] = useState('');\n    const [enhanceResponse, setEnhanceResponse] = useState('');\n    const [authData, setAuthData] = useState({})\n\n    async function getSession() {\n        try {\n          const getAuth = await Auth.currentSession();\n          console.log(getAuth);\n          console.log(getAuth.idToken.jwtToken)\n            setAuthData(getAuth.idToken.jwtToken)\n        } catch (error) {\n          console.log(error);\n        }\n      }\n      \n      \n\n    useEffect(() => {\n        getSession();\n        \n    }, [])\n\n    const handleImageFormSubmit = (event) => {\n        event.preventDefault();\n        setIsBuffering(true)\n        fileToB64(event.target.files[0])\n            .then((b64) => fetch(API_GATEWAY_URL +\"/bedrock\", { \n                // /call-rekognition-api\n            method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${authData}`\n                },\n                body: JSON.stringify({'image': b64, 'endpoint': '/api/call-rekognition-api'}),\n        })\n            )\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(JSON.parse(data.body).labels)\n                // console.log(data.labels)\n                setImageResponse(URL.createObjectURL(event.target.files[0]));\n                const output = JSON.parse(data.body).labels.join(\" \");\n                setInputText(`Build me a product Description for ${output}`);\n                let payload = {\n                    modelId: 'anthropic.claude-instant-v1',\n                    contentType: 'application/json',\n                    accept: '*/*',\n                    endpoint: '/api/conversation/predict-claude',\n                    body: JSON.stringify({\n                        prompt: `Build me a product Description using 120 words or less. Here is additional information about the product photograph ${output}`,\n                        max_tokens_to_sample: 300,\n                        temperature: 0.5,\n                        top_k: 250,\n                        top_p: 1,\n                        stop_sequences: ['\\n\\nHuman:']\n                    }),\n                };\n                fetch(API_GATEWAY_URL + '/bedrock', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        \"Authorization\": `Bearer ${authData}`\n                    },\n                    body: JSON.stringify(payload)\n                })\n                    .then((response) => response.json())\n                    .then((data) => {\n                        \n                        setResponseText(JSON.parse(data.body))\n                        handleTranslations(JSON.parse(data.body))\n                    }\n                    )\n                    .catch((error) => console.error(\"Error:\", error))\n                    .finally(\n                        setTimeout(function () {\n                            setIsBuffering(false)\n                        }, 2000)\n                    )\n            })\n            .catch((error) => console.error(\"Error:\", error))\n\n    };\n\n    const base64ToBlob = (base64Data, contentType = \"image/jpeg\") => {\n        const byteCharacters = atob(base64Data);\n        const byteArrays = [];\n\n        for (let offset = 0; offset < byteCharacters.length; offset += 512) {\n            const slice = byteCharacters.slice(offset, offset + 512);\n\n            const byteNumbers = new Array(slice.length);\n            for (let i = 0; i < slice.length; i++) {\n                byteNumbers[i] = slice.charCodeAt(i);\n            }\n\n            const byteArray = new Uint8Array(byteNumbers);\n            byteArrays.push(byteArray);\n        }\n\n        return new Blob(byteArrays, { type: contentType });\n    };\n\n    const handleImageFormSubmitPrompt = (blob) => {\n        setIsBuffering(true)\n        setLanguageResponse(\"\")\n        fetch(API_GATEWAY_URL + '/bedrock', {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${authData}`\n            },\n            body: JSON.stringify({'image': blob, 'endpoint': \"/api/call-rekognition-api\"}),\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                const output = JSON.parse(data.body).labels.join(\" \");\n                setInputText(`Build me a product Description for ${output}`);\n                let payload = {\n                    modelId: 'anthropic.claude-instant-v1',\n                    contentType: 'application/json',\n                    endpoint: '/api/conversation/predict-claude',\n                    accept: '*/*',\n                    body: JSON.stringify({\n                        prompt: `Build me a product Description using 120 words or less. Here is additional information about the product photograph ${output}`,\n                        max_tokens_to_sample: 300,\n                        temperature: 0.5,\n                        top_k: 250,\n                        top_p: 1,\n                        stop_sequences: ['\\n\\nHuman:']\n                    }),\n                };\n                fetch(API_GATEWAY_URL + '/bedrock', {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": `Bearer ${authData}`\n                    },\n                    body: JSON.stringify(payload),\n                })\n                    .then((response) => response.json())\n                    .then((data) => {\n                        setResponseText(JSON.parse(data.body))\n                        handleTranslations(JSON.parse(data.body))\n                    })\n                    .catch((error) => console.error(\"Error:\", error))\n                    .finally(\n                        setIsBuffering(false)\n                    )\n            })\n            .catch((error) => console.error(\"Error:\", error))\n\n    };\n\n    const handleImageChange = (event) => {\n        setLanguageResponse(\"\")\n        setLanguageSelected(\"English\")\n        const imageFile = event.target.files[0];\n        if (imageFile) {\n            handleImageFormSubmit(event);\n        }\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        setIsBuffering(true);\n        setLanguageResponse(\"\")\n        setImageResponseImg(\"\")\n        const payload = {\n            \"modelId\": \"stability.stable-diffusion-xl-v1\",\n            \"contentType\": \"application/json\",\n            \"accept\": \"application/json\",\n            'endpoint': \"/api/call-stablediffusion\",\n            \"body\": JSON.stringify({\n                \"text_prompts\": [\n                    { \"text\": userInputPrompt }\n                ],\n                \"cfg_scale\": 10,\n                \"seed\": 0,\n                \"steps\": 50\n            })\n        };\n\n        fetch(API_GATEWAY_URL+'/bedrock', {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${authData}`\n            },\n            body: JSON.stringify(payload)\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (JSON.parse(data.body).result === \"success\" && JSON.parse(data.body).artifacts.length > 0) {\n                    const base64Data = JSON.parse(data.body).artifacts[0].base64;\n                    const imageUrl = \"data:image/jpeg;base64,\" + base64Data;\n                    setImageResponseImg(<img src={imageUrl} alt=\"Generated Image\" />);\n\n                    setImageBlob(base64Data);\n                    handleImageFormSubmitPrompt(base64Data);\n                } else {\n                    setImageResponseImg(\"Image API failed to generate the image.\");\n                }\n            })\n            // .catch(() => {\n            //   setImageResponseImg(\"Image API request failed.\");\n            // })\n            .finally(() => {\n                setIsBuffering(false)\n            });\n    };\n\n    const sendMessageEnhance = () => {\n        setIsBuffering(true);\n        setEnhanceResponse('')\n\n        let payload = {\n            modelId: 'anthropic.claude-instant-v1',\n            contentType: 'application/json',\n            endpoint: '/api/conversation/predict-claude',\n            accept: '*/*',\n            body: JSON.stringify({\n                prompt: `I will be listing a product on my eCommerce Marketplace. Make the following product description better: ${userInputEnhance}`,\n                max_tokens_to_sample: 300,\n                temperature: 0.5,\n                top_k: 250,\n                top_p: 1,\n                stop_sequences: ['\\n\\nHuman:']\n            }),\n        };\n\n        // setUserInput('');\n        fetch(API_GATEWAY_URL +'/bedrock', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Authorization\": `Bearer ${authData}`\n            },\n            body: JSON.stringify(payload)\n        })\n            .then(response => response.json())\n            .then(response => {\n                setEnhanceResponse(JSON.parse(response.body))\n            })\n            .catch(error => {\n                console.error('Error:', error);\n            }).finally(() => {\n                setIsBuffering(false)\n            });\n    };\n\n    const handleTranslations = (description) => {\n        setIsBufferingLanguage(true);\n\n        let languages = ['Spanish', 'French', 'German'];\n\n        let payload = {\n            prompt: '',\n            maxTokens: 200,\n            temperature: 0.5,\n            topP: 0.5,\n            stopSequences: [],\n            countPenalty: { scale: 0 },\n            presencePenalty: { scale: 0 },\n            frequencyPenalty: { scale: 0 }\n        };\n\n        let response_container = [\n            {\n                'Language': 'English',\n                'Description': description\n            }\n        ];\n        setLanguageResponse(response_container)\n        let newQueue = [];\n\n        for (let i = 0; i < languages.length; i++) {\n            payload.prompt = `Translate this to ${languages[i]}: ${description}`;\n            \n            callai21(languages[i], payload)\n        }\n\n        // setTranslationQueue((prevQueue) => [...prevQueue, ...newQueue]);\n        processTranslationQueue();\n    };\n\n    const processTranslationQueue = () => {\n        if (translationQueue.length > 0) {\n            const nextRequest = translationQueue[0];\n\n            setTranslationQueue((prevQueue) => prevQueue.slice(1));\n\n            nextRequest\n                .then((response) => {\n                    console.log(response);\n                })\n                .catch((error) => {\n                    console.error('Error:', error);\n                })\n                .finally(() => {\n                    processTranslationQueue();\n                });\n        } else {\n            setIsBufferingLanguage(false);\n        }\n    };\n\n    const callai21 = async (language, payload) => {\n        // setIsBufferingLanguage(true);\n        console.log('payload in callai21 start:');\n        console.log(payload);\n        payload['endpoint'] = '/api/conversation/predict-ai21'\n        console.log('payload in callai21 end');\n        console.log('');\n    \n        try {\n            const response = await fetch(API_GATEWAY_URL+'/bedrock', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    \"Authorization\": `Bearer ${authData}`\n                },\n                body: JSON.stringify(payload)\n            });\n    \n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n    \n            const responseData = await response.json();\n            const botResponse = JSON.parse(responseData.body).output_text;\n            console.log(language);\n            console.log(botResponse);\n    \n            setLanguageResponse(prevLanguageResponse => [\n                ...prevLanguageResponse,\n                {\n                    'Language': language,\n                    'Description': botResponse\n                }\n            ]);\n        } catch (error) {\n            console.error('Error:', error);\n        } finally {\n            setIsBufferingLanguage(false);\n            setIsBuffering(false)\n        }\n    };\n\n\n    const getSelectedDescription = () => {\n        for (let i = 0; i < languageResponse.length; i++) {\n            if (languageResponse[i].Language == languageSelected) {\n                return languageResponse[i].Description\n            }\n        }\n    }\n\n    const handleDemoSelection = (demo) => {\n        setResponseText('')\n        setDemoSelected(demo)\n        setLanguageResponse('')\n        setImageResponseImg('')\n        setLanguageSelected('English')\n        setEnhanceResponse('')\n        setUserInputPrompt('')\n        setUserInputEnhance('')\n    }\n\n    return (\n        \n            <div id=\"ContentSection\">\n                <div className=\"Contents\">\n                    <h1>Building Product Descriptions with Amazon Bedrock</h1>\n                    <div className=\"Demos\">\n                        <div className=\"DemoOptions\">\n                            <span className={demoSelected == 'Image' ? \"active\" : \"inactive\"}\n                                onClick={() => handleDemoSelection('Image')}>\n                                Create Product Description from Image\n                            </span>\n                            <span className={demoSelected == 'Prompt' ? \"active\" : \"inactive\"}\n                                onClick={() => handleDemoSelection('Prompt')}>\n                                Create Image and Description from Text\n                            </span>\n                            <span className={demoSelected == 'Enhance' ? \"active\" : \"inactive\"}\n                                onClick={() => handleDemoSelection('Enhance')}>\n                                Enhance a Product Description\n                            </span>\n                        </div>\n                    </div>\n                    {demoSelected === 'Image' &&\n                        <form onSubmit={handleImageFormSubmit} encType=\"multipart/form-data\">\n                            <label htmlFor=\"imageUpload\">\n                                <input\n                                    type=\"file\"\n                                    id=\"imageUpload\"\n                                    name=\"imageUpload\"\n                                    accept=\"image/*\"\n                                    required\n                                    onChange={handleImageChange}\n                                />\n                            </label>\n                        </form>\n                    }\n                    {demoSelected === 'Prompt' &&\n                        <div className=\"user-input-product\">\n                            <textarea\n                                value={userInputPrompt}\n                                onChange={(e) => setUserInputPrompt(e.target.value)}\n                                placeholder=\"Provide description of product and hit send to generate an image and product description of that image...\"\n                            />\n                            <button type=\"button\" onClick={handleSubmit} disabled={isBuffering}>Send</button>\n                        </div>\n                    }\n                    {demoSelected === 'Enhance' &&\n                        <div className=\"user-input-product\">\n                            <textarea\n                                value={userInputEnhance}\n                                onChange={(e) => setUserInputEnhance(e.target.value)}\n                                placeholder=\"Provide product description and hit send to enhance the product description with Claude...\"\n                            />\n                            <button type=\"button\" onClick={sendMessageEnhance} disabled={isBuffering}>Send</button>\n                        </div>\n                    }\n\n                    {responseText !== '' && demoSelected !== 'Prompt' &&\n                        <div className=\"ImageLabel\">\n                            <div id=\"imageResponse\">\n                                {imageResponse && (\n                                    <img src={imageResponse} alt=\"Uploaded Image\" style={{ maxWidth: \"500px\", maxHeight: \"500px\", display: \"block\", margin: \"0 auto\" }} />\n                                )}\n                            </div>\n                        </div>\n                    }\n                    {imageResponseImg !== '' && demoSelected !== 'Image' &&\n                        <div className=\"ImageLabel\">\n                            <div id=\"imageResponse\">{imageResponseImg}</div>\n                        </div>\n                    }\n\n                    {isBuffering &&\n                        <div className=\"dots\">\n                            <div className=\"dot\"></div>\n                            <div className=\"dot\"></div>\n                            <div className=\"dot\"></div>\n                        </div>\n                    }\n                    {isBufferingLanguage &&\n                        <div className=\"dots\">\n                            <div className=\"dot\"></div>\n                            <div className=\"dot\"></div>\n                            <div className=\"dot\"></div>\n                        </div>\n                    }\n\n                    <div className=\"Translations\">\n                    <div className=\"TranslationOptions\">\n                    {languageResponse !== \"\" &&\n                        languageResponse.map((response) => (\n                            \n                                    <span\n                                        className={response.Language == languageSelected ? \"active\" : \"inactive\"}\n                                        key={response.Language}\n                                        onClick={() => setLanguageSelected(response.Language)}\n                                    >\n                                        {response.Language}\n                                    </span>\n                                    ))}\n                                </div>\n                                \n                                <span className=\"ProductDesc\" style={{ display: languageResponse !== \"\" ? 'initial':'none'}} >Product Description:</span>\n                                \n                                <div className=\"ProductDescription\">\n                                \n                                    {languageResponse !== \"\" &&\n                                        getSelectedDescription()\n                                    }\n                                    {enhanceResponse !== '' &&\n                                        enhanceResponse\n                                    }\n                                </div>\n                                \n                        \n                            </div>\n                </div>\n            </div>\n    );\n}\n\nexport default App;\n",{"ruleId":"49","severity":1,"message":"50","line":7,"column":10,"nodeType":"51","messageId":"52","endLine":7,"endColumn":16},{"ruleId":"49","severity":1,"message":"53","line":7,"column":18,"nodeType":"51","messageId":"52","endLine":7,"endColumn":35},{"ruleId":"49","severity":1,"message":"54","line":8,"column":10,"nodeType":"51","messageId":"52","endLine":8,"endColumn":17},{"ruleId":"49","severity":1,"message":"55","line":21,"column":12,"nodeType":"51","messageId":"52","endLine":21,"endColumn":25},{"ruleId":"49","severity":1,"message":"56","line":21,"column":27,"nodeType":"51","messageId":"52","endLine":21,"endColumn":43},{"ruleId":"49","severity":1,"message":"57","line":22,"column":12,"nodeType":"51","messageId":"52","endLine":22,"endColumn":21},{"ruleId":"49","severity":1,"message":"58","line":33,"column":12,"nodeType":"51","messageId":"52","endLine":33,"endColumn":21},{"ruleId":"49","severity":1,"message":"59","line":117,"column":11,"nodeType":"51","messageId":"52","endLine":117,"endColumn":23},{"ruleId":"60","severity":1,"message":"61","line":229,"column":41,"nodeType":"62","endLine":229,"endColumn":85},{"ruleId":"49","severity":1,"message":"63","line":307,"column":13,"nodeType":"51","messageId":"52","endLine":307,"endColumn":21},{"ruleId":"64","severity":1,"message":"65","line":385,"column":46,"nodeType":"66","messageId":"67","endLine":385,"endColumn":48},{"ruleId":"64","severity":1,"message":"65","line":409,"column":59,"nodeType":"66","messageId":"67","endLine":409,"endColumn":61},{"ruleId":"64","severity":1,"message":"65","line":413,"column":59,"nodeType":"66","messageId":"67","endLine":413,"endColumn":61},{"ruleId":"64","severity":1,"message":"65","line":417,"column":59,"nodeType":"66","messageId":"67","endLine":417,"endColumn":61},{"ruleId":"60","severity":1,"message":"61","line":462,"column":37,"nodeType":"62","endLine":462,"endColumn":171},{"ruleId":"64","severity":1,"message":"65","line":494,"column":70,"nodeType":"66","messageId":"67","endLine":494,"endColumn":72},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'withAuthenticator' is defined but never used.","'Amplify' is defined but never used.","'modelSelected' is assigned a value but never used.","'setModelSelected' is assigned a value but never used.","'inputText' is assigned a value but never used.","'imageBlob' is assigned a value but never used.","'base64ToBlob' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'newQueue' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]