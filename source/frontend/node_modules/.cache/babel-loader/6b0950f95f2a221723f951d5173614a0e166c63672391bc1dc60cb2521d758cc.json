{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { DescribeStreamCommand } from \"../commands/DescribeStreamCommand\";\nimport { WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\nvar checkState = function (client, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var result_1, returnComparator, exception_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 3]);\n          return [4 /*yield*/, client.send(new DescribeStreamCommand(input))];\n        case 1:\n          result_1 = _a.sent();\n          try {\n            returnComparator = function () {\n              return result_1.StreamDescription.StreamStatus;\n            };\n            if (returnComparator() === \"ACTIVE\") {\n              return [2 /*return*/, {\n                state: WaiterState.SUCCESS\n              }];\n            }\n          } catch (e) {}\n          return [3 /*break*/, 3];\n        case 2:\n          exception_1 = _a.sent();\n          return [3 /*break*/, 3];\n        case 3:\n          return [2 /*return*/, {\n            state: WaiterState.RETRY\n          }];\n      }\n    });\n  });\n};\n/**\n *\n *  @param params : Waiter configuration options.\n *  @param input : the input to DescribeStreamCommand for polling.\n */\nexport var waitForStreamExists = function (params, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var serviceDefaults;\n    return __generator(this, function (_a) {\n      serviceDefaults = {\n        minDelay: 10,\n        maxDelay: 120\n      };\n      return [2 /*return*/, createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];\n    });\n  });\n};","map":{"version":3,"mappings":";AACA,SAASA,qBAAqB,QAAoC,mCAAmC;AACrG,SAA4CC,WAAW,EAAEC,YAAY,QAAQ,sBAAsB;AAEnG,IAAMC,UAAU,GAAG,UAAOC,MAAqB,EAAEC,KAAiC;EAAA;;;;;;UAE5D,qBAAMD,MAAM,CAACE,IAAI,CAAC,IAAIN,qBAAqB,CAACK,KAAK,CAAC,CAAC;;UAAjEE,WAAcC,SAAmD;UACrE,IAAI;YACEC,gBAAgB,GAAG;cACrB,OAAOF,QAAM,CAACG,iBAAiB,CAACC,YAAY;YAC9C,CAAC;YACD,IAAIF,gBAAgB,EAAE,KAAK,QAAQ,EAAE;cACnC,sBAAO;gBAAEG,KAAK,EAAEX,WAAW,CAACY;cAAO,CAAE;;WAExC,CAAC,OAAOC,CAAC,EAAE;;;;;;UAEd,sBAAO;YAAEF,KAAK,EAAEX,WAAW,CAACc;UAAK,CAAE;;;;CACpC;AACD;;;;;AAKA,OAAO,IAAMC,mBAAmB,GAAG,UACjCC,MAA0C,EAC1CZ,KAAiC;EAAA;;;MAE3Ba,eAAe,GAAG;QAAEC,QAAQ,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAG,CAAE;MACvD,sBAAOlB,YAAY,uBAAMgB,eAAe,GAAKD,MAAM,GAAIZ,KAAK,EAAEF,UAAU,CAAC;;;CAC1E","names":["DescribeStreamCommand","WaiterState","createWaiter","checkState","client","input","send","result_1","_a","returnComparator","StreamDescription","StreamStatus","state","SUCCESS","e","RETRY","waitForStreamExists","params","serviceDefaults","minDelay","maxDelay"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-sdk/client-kinesis/waiters/waitForStreamExists.ts"],"sourcesContent":["import { KinesisClient } from \"../KinesisClient\";\nimport { DescribeStreamCommand, DescribeStreamCommandInput } from \"../commands/DescribeStreamCommand\";\nimport { WaiterConfiguration, WaiterResult, WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\n\nconst checkState = async (client: KinesisClient, input: DescribeStreamCommandInput): Promise<WaiterResult> => {\n  try {\n    let result: any = await client.send(new DescribeStreamCommand(input));\n    try {\n      let returnComparator = () => {\n        return result.StreamDescription.StreamStatus;\n      };\n      if (returnComparator() === \"ACTIVE\") {\n        return { state: WaiterState.SUCCESS };\n      }\n    } catch (e) {}\n  } catch (exception) {}\n  return { state: WaiterState.RETRY };\n};\n/**\n *\n *  @param params : Waiter configuration options.\n *  @param input : the input to DescribeStreamCommand for polling.\n */\nexport const waitForStreamExists = async (\n  params: WaiterConfiguration<KinesisClient>,\n  input: DescribeStreamCommandInput\n): Promise<WaiterResult> => {\n  const serviceDefaults = { minDelay: 10, maxDelay: 120 };\n  return createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}