{"ast":null,"code":"import { __awaiter, __generator, __read, __values } from \"tslib\";\nimport { OpType, QueryOne } from '../../types';\nimport { DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR, indexNameFromKeys, monotonicUlidFactory } from '../../util';\nimport { createInMemoryStore } from './InMemoryStore';\nvar DB_NAME = '@AmplifyDatastore';\nvar COLLECTION = 'Collection';\nvar DATA = 'Data';\nvar monotonicFactoriesMap = new Map();\nvar AsyncStorageDatabase = /** @class */function () {\n  function AsyncStorageDatabase() {\n    /**\n     * Maps storeNames to a map of ulid->id\n     */\n    this._collectionInMemoryIndex = new Map();\n    this.storage = createInMemoryStore();\n  }\n  /**\n   * Collection index is map of stores (i.e. sync, metadata, mutation event, and data)\n   * @param storeName {string} - Name of the store\n   * @returns Map of ulid->id\n   */\n  AsyncStorageDatabase.prototype.getCollectionIndex = function (storeName) {\n    if (!this._collectionInMemoryIndex.has(storeName)) {\n      this._collectionInMemoryIndex.set(storeName, new Map());\n    }\n    return this._collectionInMemoryIndex.get(storeName);\n  };\n  /**\n   * Return ULID for store if it exists, otherwise create a new one\n   * @param storeName {string} - Name of the store\n   * @returns ulid\n   */\n  AsyncStorageDatabase.prototype.getMonotonicFactory = function (storeName) {\n    if (!monotonicFactoriesMap.has(storeName)) {\n      monotonicFactoriesMap.set(storeName, monotonicUlidFactory());\n    }\n    return monotonicFactoriesMap.get(storeName);\n  };\n  AsyncStorageDatabase.prototype.init = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var allKeys, keysForCollectionEntries, allKeys_1, allKeys_1_1, key, _a, dbName, storeName, recordType, ulidOrId, id, ulid, id_1, newUlid, oldKey, newKey, item, e_1_1;\n      var e_1, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            this._collectionInMemoryIndex.clear();\n            return [4 /*yield*/, this.storage.getAllKeys()];\n          case 1:\n            allKeys = _c.sent();\n            keysForCollectionEntries = [];\n            _c.label = 2;\n          case 2:\n            _c.trys.push([2, 12, 13, 14]);\n            allKeys_1 = __values(allKeys), allKeys_1_1 = allKeys_1.next();\n            _c.label = 3;\n          case 3:\n            if (!!allKeys_1_1.done) return [3 /*break*/, 11];\n            key = allKeys_1_1.value;\n            _a = __read(key.split('::'), 5), dbName = _a[0], storeName = _a[1], recordType = _a[2], ulidOrId = _a[3], id = _a[4];\n            if (!(dbName === DB_NAME)) return [3 /*break*/, 10];\n            if (!(recordType === DATA)) return [3 /*break*/, 9];\n            ulid = void 0;\n            if (!(id === undefined)) return [3 /*break*/, 7];\n            id_1 = ulidOrId;\n            newUlid = this.getMonotonicFactory(storeName)();\n            oldKey = this.getLegacyKeyForItem(storeName, id_1);\n            newKey = this.getKeyForItem(storeName, id_1, newUlid);\n            return [4 /*yield*/, this.storage.getItem(oldKey)];\n          case 4:\n            item = _c.sent();\n            return [4 /*yield*/, this.storage.setItem(newKey, item)];\n          case 5:\n            _c.sent();\n            return [4 /*yield*/, this.storage.removeItem(oldKey)];\n          case 6:\n            _c.sent();\n            ulid = newUlid;\n            return [3 /*break*/, 8];\n          case 7:\n            ulid = ulidOrId;\n            _c.label = 8;\n          case 8:\n            this.getCollectionIndex(storeName).set(id, ulid);\n            return [3 /*break*/, 10];\n          case 9:\n            if (recordType === COLLECTION) {\n              keysForCollectionEntries.push(key);\n            }\n            _c.label = 10;\n          case 10:\n            allKeys_1_1 = allKeys_1.next();\n            return [3 /*break*/, 3];\n          case 11:\n            return [3 /*break*/, 14];\n          case 12:\n            e_1_1 = _c.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3 /*break*/, 14];\n          case 13:\n            try {\n              if (allKeys_1_1 && !allKeys_1_1.done && (_b = allKeys_1.return)) _b.call(allKeys_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n            return [7 /*endfinally*/];\n          case 14:\n            if (!(keysForCollectionEntries.length > 0)) return [3 /*break*/, 16];\n            return [4 /*yield*/, this.storage.multiRemove(keysForCollectionEntries)];\n          case 15:\n            _c.sent();\n            _c.label = 16;\n          case 16:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.save = function (item, storeName, keys, keyValuesPath) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var idxName, ulid, itemKey;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            idxName = indexNameFromKeys(keys);\n            ulid = ((_a = this.getCollectionIndex(storeName)) === null || _a === void 0 ? void 0 : _a.get(idxName)) || this.getMonotonicFactory(storeName)();\n            itemKey = this.getKeyForItem(storeName, keyValuesPath, ulid);\n            // Set key in collection index\n            (_b = this.getCollectionIndex(storeName)) === null || _b === void 0 ? void 0 : _b.set(keyValuesPath, ulid);\n            // Save item in db\n            return [4 /*yield*/, this.storage.setItem(itemKey, JSON.stringify(item))];\n          case 1:\n            // Save item in db\n            _c.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.batchSave = function (storeName, items, keys) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, collection, keysToDelete, keysToSave, allItemsKeys, itemsMap, _loop_1, this_1, items_1, items_1_1, item, existingRecordsMap, existingRecordsKeys, allItemsKeys_1, allItemsKeys_1_1, key;\n      var e_2, _a, e_3, _b;\n      var _this = this;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (items.length === 0) {\n              return [2 /*return*/, []];\n            }\n            result = [];\n            collection = this.getCollectionIndex(storeName);\n            keysToDelete = new Set();\n            keysToSave = new Set();\n            allItemsKeys = [];\n            itemsMap = {};\n            _loop_1 = function (item) {\n              // Extract keys from concatenated key path, map to item values\n              var keyValues = keys.map(function (field) {\n                return item[field];\n              });\n              var _deleted = item._deleted;\n              // If id is in the store, retrieve, otherwise generate new ULID\n              var ulid = collection.get(keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR)) || this_1.getMonotonicFactory(storeName)();\n              // Generate the \"longer key\" for the item\n              var key = this_1.getKeyForItem(storeName, keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR), ulid);\n              allItemsKeys.push(key);\n              itemsMap[key] = {\n                ulid: ulid,\n                model: item\n              };\n              if (_deleted) {\n                keysToDelete.add(key);\n              } else {\n                keysToSave.add(key);\n              }\n            };\n            this_1 = this;\n            try {\n              /* Populate allItemKeys, keysToDelete, and keysToSave */\n              for (items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {\n                item = items_1_1.value;\n                _loop_1(item);\n              }\n            } catch (e_2_1) {\n              e_2 = {\n                error: e_2_1\n              };\n            } finally {\n              try {\n                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n            }\n            return [4 /*yield*/, this.storage.multiGet(allItemsKeys)];\n          case 1:\n            existingRecordsMap = _c.sent();\n            existingRecordsKeys = existingRecordsMap.filter(function (_a) {\n              var _b = __read(_a, 2),\n                v = _b[1];\n              return !!v;\n            }).reduce(function (set, _a) {\n              var _b = __read(_a, 1),\n                k = _b[0];\n              return set.add(k);\n            }, new Set());\n            // Delete\n            return [4 /*yield*/, new Promise(function (resolve, reject) {\n              if (keysToDelete.size === 0) {\n                resolve();\n                return;\n              }\n              var keysToDeleteArray = Array.from(keysToDelete);\n              keysToDeleteArray.forEach(function (key) {\n                // key: full db key\n                // keys: PK and/or SK keys\n                var primaryKeyValues = keys.map(function (field) {\n                  return itemsMap[key].model[field];\n                }).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                collection.delete(primaryKeyValues);\n              });\n              _this.storage.multiRemove(keysToDeleteArray, function (errors) {\n                if (errors && errors.length > 0) {\n                  reject(errors);\n                } else {\n                  resolve();\n                }\n              });\n            })];\n          case 2:\n            // Delete\n            _c.sent();\n            // Save\n            return [4 /*yield*/, new Promise(function (resolve, reject) {\n              if (keysToSave.size === 0) {\n                resolve();\n                return;\n              }\n              var entriesToSet = Array.from(keysToSave).map(function (key) {\n                return [key, JSON.stringify(itemsMap[key].model)];\n              });\n              keysToSave.forEach(function (key) {\n                var _a = itemsMap[key],\n                  model = _a.model,\n                  ulid = _a.ulid;\n                // Retrieve values from model, use as key for collection index\n                var keyValues = keys.map(function (field) {\n                  return model[field];\n                }).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                collection.set(keyValues, ulid);\n              });\n              _this.storage.multiSet(entriesToSet, function (errors) {\n                if (errors && errors.length > 0) {\n                  reject(errors);\n                } else {\n                  resolve();\n                }\n              });\n            })];\n          case 3:\n            // Save\n            _c.sent();\n            try {\n              for (allItemsKeys_1 = __values(allItemsKeys), allItemsKeys_1_1 = allItemsKeys_1.next(); !allItemsKeys_1_1.done; allItemsKeys_1_1 = allItemsKeys_1.next()) {\n                key = allItemsKeys_1_1.value;\n                if (keysToDelete.has(key) && existingRecordsKeys.has(key)) {\n                  result.push([itemsMap[key].model, OpType.DELETE]);\n                } else if (keysToSave.has(key)) {\n                  result.push([itemsMap[key].model, existingRecordsKeys.has(key) ? OpType.UPDATE : OpType.INSERT]);\n                }\n              }\n            } catch (e_3_1) {\n              e_3 = {\n                error: e_3_1\n              };\n            } finally {\n              try {\n                if (allItemsKeys_1_1 && !allItemsKeys_1_1.done && (_b = allItemsKeys_1.return)) _b.call(allItemsKeys_1);\n              } finally {\n                if (e_3) throw e_3.error;\n              }\n            }\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  AsyncStorageDatabase.prototype.get = function (keyValuePath, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ulid, itemKey, recordAsString, record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ulid = this.getCollectionIndex(storeName).get(keyValuePath);\n            itemKey = this.getKeyForItem(storeName, keyValuePath, ulid);\n            return [4 /*yield*/, this.storage.getItem(itemKey)];\n          case 1:\n            recordAsString = _a.sent();\n            record = recordAsString && JSON.parse(recordAsString);\n            return [2 /*return*/, record];\n        }\n      });\n    });\n  };\n  AsyncStorageDatabase.prototype.getOne = function (firstOrLast, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var collection, _a, itemId, ulid, itemKey, itemString, _b, result;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            collection = this.getCollectionIndex(storeName);\n            _a = __read(firstOrLast === QueryOne.FIRST ? function () {\n              var e_4, _a, _b;\n              var id, ulid;\n              try {\n                for (var collection_1 = __values(collection), collection_1_1 = collection_1.next(); !collection_1_1.done; collection_1_1 = collection_1.next()) {\n                  _b = __read(collection_1_1.value, 2), id = _b[0], ulid = _b[1];\n                  break;\n                } // Get first element of the set\n              } catch (e_4_1) {\n                e_4 = {\n                  error: e_4_1\n                };\n              } finally {\n                try {\n                  if (collection_1_1 && !collection_1_1.done && (_a = collection_1.return)) _a.call(collection_1);\n                } finally {\n                  if (e_4) throw e_4.error;\n                }\n              }\n              return [id, ulid];\n            }() : function () {\n              var e_5, _a, _b;\n              var id, ulid;\n              try {\n                for (var collection_2 = __values(collection), collection_2_1 = collection_2.next(); !collection_2_1.done; collection_2_1 = collection_2.next()) {\n                  _b = __read(collection_2_1.value, 2), id = _b[0], ulid = _b[1];\n                  ;\n                } // Get last element of the set\n              } catch (e_5_1) {\n                e_5 = {\n                  error: e_5_1\n                };\n              } finally {\n                try {\n                  if (collection_2_1 && !collection_2_1.done && (_a = collection_2.return)) _a.call(collection_2);\n                } finally {\n                  if (e_5) throw e_5.error;\n                }\n              }\n              return [id, ulid];\n            }(), 2), itemId = _a[0], ulid = _a[1];\n            itemKey = this.getKeyForItem(storeName, itemId, ulid);\n            _b = itemKey;\n            if (!_b) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.storage.getItem(itemKey)];\n          case 1:\n            _b = _c.sent();\n            _c.label = 2;\n          case 2:\n            itemString = _b;\n            result = itemString ? JSON.parse(itemString) || undefined : undefined;\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  /**\n   * This function gets all the records stored in async storage for a particular storeName\n   * It then loads all the records for that filtered set of keys using multiGet()\n   */\n  AsyncStorageDatabase.prototype.getAll = function (storeName, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var collection, _a, _b, page, _c, limit, start, end, keysForStore, count, collection_3, collection_3_1, _d, id, ulid, storeRecordStrings, records;\n      var e_6, _e;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            collection = this.getCollectionIndex(storeName);\n            _a = pagination || {}, _b = _a.page, page = _b === void 0 ? 0 : _b, _c = _a.limit, limit = _c === void 0 ? 0 : _c;\n            start = Math.max(0, page * limit) || 0;\n            end = limit > 0 ? start + limit : undefined;\n            keysForStore = [];\n            count = 0;\n            try {\n              for (collection_3 = __values(collection), collection_3_1 = collection_3.next(); !collection_3_1.done; collection_3_1 = collection_3.next()) {\n                _d = __read(collection_3_1.value, 2), id = _d[0], ulid = _d[1];\n                count++;\n                if (count <= start) {\n                  continue;\n                }\n                keysForStore.push(this.getKeyForItem(storeName, id, ulid));\n                if (count === end) {\n                  break;\n                }\n              }\n            } catch (e_6_1) {\n              e_6 = {\n                error: e_6_1\n              };\n            } finally {\n              try {\n                if (collection_3_1 && !collection_3_1.done && (_e = collection_3.return)) _e.call(collection_3);\n              } finally {\n                if (e_6) throw e_6.error;\n              }\n            }\n            return [4 /*yield*/, this.storage.multiGet(keysForStore)];\n          case 1:\n            storeRecordStrings = _f.sent();\n            records = storeRecordStrings.filter(function (_a) {\n              var _b = __read(_a, 2),\n                value = _b[1];\n              return value;\n            }).map(function (_a) {\n              var _b = __read(_a, 2),\n                value = _b[1];\n              return JSON.parse(value);\n            });\n            return [2 /*return*/, records];\n        }\n      });\n    });\n  };\n  AsyncStorageDatabase.prototype.delete = function (key, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ulid, itemKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ulid = this.getCollectionIndex(storeName).get(key);\n            itemKey = this.getKeyForItem(storeName, key, ulid);\n            this.getCollectionIndex(storeName).delete(key);\n            return [4 /*yield*/, this.storage.removeItem(itemKey)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Clear the AsyncStorage of all DataStore entries\n   */\n  AsyncStorageDatabase.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var allKeys, allDataStoreKeys;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.storage.getAllKeys()];\n          case 1:\n            allKeys = _a.sent();\n            allDataStoreKeys = allKeys.filter(function (key) {\n              return key.startsWith(DB_NAME);\n            });\n            return [4 /*yield*/, this.storage.multiRemove(allDataStoreKeys)];\n          case 2:\n            _a.sent();\n            this._collectionInMemoryIndex.clear();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.getKeyForItem = function (storeName, id, ulid) {\n    return this.getKeyPrefixForStoreItems(storeName) + \"::\" + ulid + \"::\" + id;\n  };\n  AsyncStorageDatabase.prototype.getLegacyKeyForItem = function (storeName, id) {\n    return this.getKeyPrefixForStoreItems(storeName) + \"::\" + id;\n  };\n  AsyncStorageDatabase.prototype.getKeyPrefixForStoreItems = function (storeName) {\n    return DB_NAME + \"::\" + storeName + \"::\" + DATA;\n  };\n  return AsyncStorageDatabase;\n}();\nexport default AsyncStorageDatabase;","map":{"version":3,"mappings":"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","names":["OpType","QueryOne","DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR","indexNameFromKeys","monotonicUlidFactory","createInMemoryStore","DB_NAME","COLLECTION","DATA","monotonicFactoriesMap","Map","AsyncStorageDatabase","storeName","_collectionInMemoryIndex","has","set","get","clear","storage","getAllKeys","allKeys","_c","keysForCollectionEntries","allKeys_1","key","_a","split","dbName","recordType","ulidOrId","id","ulid","undefined","id_1","newUlid","getMonotonicFactory","oldKey","getLegacyKeyForItem","newKey","getKeyForItem","getItem","item","setItem","removeItem","getCollectionIndex","push","length","multiRemove","keys","keyValuesPath","idxName","itemKey","JSON","stringify","items","result","collection","keysToDelete","Set","keysToSave","allItemsKeys","itemsMap","keyValues","map","field","join","this_1","model","_deleted","add","items_1","multiGet","existingRecordsMap","existingRecordsKeys","filter","_b","v","reduce","k","Promise","resolve","reject","size","keysToDeleteArray","Array","from","forEach","primaryKeyValues","delete","_this","errors","entriesToSet","multiSet","allItemsKeys_1","DELETE","UPDATE","INSERT","keyValuePath","recordAsString","record","parse","firstOrLast","FIRST","itemId","itemString","pagination","page","limit","start","Math","max","end","keysForStore","count","collection_3","_d","storeRecordStrings","_f","records","value","allDataStoreKeys","startsWith","getKeyPrefixForStoreItems"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-amplify/datastore/src/storage/adapter/AsyncStorageDatabase.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ULID } from 'ulid';\nimport {\n\tModelInstanceMetadata,\n\tOpType,\n\tPaginationInput,\n\tPersistentModel,\n\tQueryOne,\n} from '../../types';\nimport {\n\tDEFAULT_PRIMARY_KEY_VALUE_SEPARATOR,\n\tindexNameFromKeys,\n\tmonotonicUlidFactory,\n} from '../../util';\nimport { createInMemoryStore } from './InMemoryStore';\n\nconst DB_NAME = '@AmplifyDatastore';\nconst COLLECTION = 'Collection';\nconst DATA = 'Data';\n\nconst monotonicFactoriesMap = new Map<string, ULID>();\n\nclass AsyncStorageDatabase {\n\t/**\n\t * Maps storeNames to a map of ulid->id\n\t */\n\tprivate _collectionInMemoryIndex = new Map<string, Map<string, string>>();\n\n\tprivate storage = createInMemoryStore();\n\n\t/**\n\t * Collection index is map of stores (i.e. sync, metadata, mutation event, and data)\n\t * @param storeName {string} - Name of the store\n\t * @returns Map of ulid->id\n\t */\n\tprivate getCollectionIndex(storeName: string) {\n\t\tif (!this._collectionInMemoryIndex.has(storeName)) {\n\t\t\tthis._collectionInMemoryIndex.set(storeName, new Map());\n\t\t}\n\n\t\treturn this._collectionInMemoryIndex.get(storeName);\n\t}\n\n\t/**\n\t * Return ULID for store if it exists, otherwise create a new one\n\t * @param storeName {string} - Name of the store\n\t * @returns ulid\n\t */\n\tprivate getMonotonicFactory(storeName: string): ULID {\n\t\tif (!monotonicFactoriesMap.has(storeName)) {\n\t\t\tmonotonicFactoriesMap.set(storeName, monotonicUlidFactory());\n\t\t}\n\n\t\treturn monotonicFactoriesMap.get(storeName)!;\n\t}\n\n\tasync init(): Promise<void> {\n\t\tthis._collectionInMemoryIndex.clear();\n\n\t\tconst allKeys: string[] = await this.storage.getAllKeys();\n\n\t\tconst keysForCollectionEntries: string[] = [];\n\n\t\tfor (const key of allKeys) {\n\t\t\tconst [dbName, storeName, recordType, ulidOrId, id] = key.split('::');\n\n\t\t\tif (dbName === DB_NAME) {\n\t\t\t\tif (recordType === DATA) {\n\t\t\t\t\tlet ulid: string;\n\n\t\t\t\t\tif (id === undefined) {\n\t\t\t\t\t\t// It is an old entry (without ulid). Need to migrate to new key format\n\n\t\t\t\t\t\tconst id = ulidOrId;\n\n\t\t\t\t\t\tconst newUlid = this.getMonotonicFactory(storeName)();\n\n\t\t\t\t\t\tconst oldKey = this.getLegacyKeyForItem(storeName, id);\n\t\t\t\t\t\tconst newKey = this.getKeyForItem(storeName, id, newUlid);\n\n\t\t\t\t\t\tconst item = await this.storage.getItem(oldKey);\n\n\t\t\t\t\t\tawait this.storage.setItem(newKey, item!);\n\t\t\t\t\t\tawait this.storage.removeItem(oldKey);\n\n\t\t\t\t\t\tulid = newUlid;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tulid = ulidOrId;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.getCollectionIndex(storeName)!.set(id, ulid);\n\t\t\t\t} else if (recordType === COLLECTION) {\n\t\t\t\t\tkeysForCollectionEntries.push(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (keysForCollectionEntries.length > 0) {\n\t\t\tawait this.storage.multiRemove(keysForCollectionEntries);\n\t\t}\n\t}\n\n\tasync save<T extends PersistentModel>(\n\t\titem: T,\n\t\tstoreName: string,\n\t\tkeys: string[],\n\t\tkeyValuesPath: string\n\t) {\n\t\tconst idxName = indexNameFromKeys(keys);\n\n\t\tconst ulid =\n\t\t\tthis.getCollectionIndex(storeName)?.get(idxName) ||\n\t\t\tthis.getMonotonicFactory(storeName)();\n\n\t\t// Retrieve db key for item\n\t\tconst itemKey = this.getKeyForItem(storeName, keyValuesPath, ulid);\n\n\t\t// Set key in collection index\n\t\tthis.getCollectionIndex(storeName)?.set(keyValuesPath, ulid);\n\n\t\t// Save item in db\n\t\tawait this.storage.setItem(itemKey, JSON.stringify(item));\n\t}\n\n\tasync batchSave<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\titems: ModelInstanceMetadata[],\n\t\tkeys: string[]\n\t): Promise<[T, OpType][]> {\n\t\tif (items.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst result: [T, OpType][] = [];\n\n\t\tconst collection = this.getCollectionIndex(storeName)!;\n\n\t\tconst keysToDelete = new Set<string>();\n\t\tconst keysToSave = new Set<string>();\n\t\tconst allItemsKeys: string[] = [];\n\t\tconst itemsMap: Record<string, { ulid: string; model: T }> = {};\n\n\t\t/* Populate allItemKeys, keysToDelete, and keysToSave */\n\t\tfor (const item of items) {\n\t\t\t// Extract keys from concatenated key path, map to item values\n\t\t\tconst keyValues = keys.map(field => item[field]);\n\n\t\t\tconst { _deleted } = item;\n\n\t\t\t// If id is in the store, retrieve, otherwise generate new ULID\n\t\t\tconst ulid =\n\t\t\t\tcollection.get(keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR)) ||\n\t\t\t\tthis.getMonotonicFactory(storeName)();\n\n\t\t\t// Generate the \"longer key\" for the item\n\t\t\tconst key = this.getKeyForItem(\n\t\t\t\tstoreName,\n\t\t\t\tkeyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR),\n\t\t\t\tulid\n\t\t\t);\n\n\t\t\tallItemsKeys.push(key);\n\t\t\titemsMap[key] = { ulid, model: <T>(<unknown>item) };\n\n\t\t\tif (_deleted) {\n\t\t\t\tkeysToDelete.add(key);\n\t\t\t} else {\n\t\t\t\tkeysToSave.add(key);\n\t\t\t}\n\t\t}\n\n\t\tconst existingRecordsMap: [string, string][] = await this.storage.multiGet(\n\t\t\tallItemsKeys\n\t\t);\n\t\tconst existingRecordsKeys = existingRecordsMap\n\t\t\t.filter(([, v]) => !!v)\n\t\t\t.reduce((set, [k]) => set.add(k), new Set<string>());\n\n\t\t// Delete\n\t\tawait new Promise<void>((resolve, reject) => {\n\t\t\tif (keysToDelete.size === 0) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst keysToDeleteArray = Array.from(keysToDelete);\n\n\t\t\tkeysToDeleteArray.forEach(key => {\n\t\t\t\t// key: full db key\n\t\t\t\t// keys: PK and/or SK keys\n\t\t\t\tconst primaryKeyValues: string = keys\n\t\t\t\t\t.map(field => itemsMap[key].model[field])\n\t\t\t\t\t.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n\n\t\t\t\tcollection.delete(primaryKeyValues);\n\t\t\t});\n\n\t\t\tthis.storage.multiRemove(keysToDeleteArray, (errors?: Error[]) => {\n\t\t\t\tif (errors && errors.length > 0) {\n\t\t\t\t\treject(errors);\n\t\t\t\t} else {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// Save\n\t\tawait new Promise<void>((resolve, reject) => {\n\t\t\tif (keysToSave.size === 0) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst entriesToSet = Array.from(keysToSave).map(key => [\n\t\t\t\tkey,\n\t\t\t\tJSON.stringify(itemsMap[key].model),\n\t\t\t]);\n\n\t\t\tkeysToSave.forEach(key => {\n\t\t\t\tconst { model, ulid } = itemsMap[key];\n\n\t\t\t\t// Retrieve values from model, use as key for collection index\n\t\t\t\tconst keyValues: string = keys\n\t\t\t\t\t.map(field => model[field])\n\t\t\t\t\t.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n\n\t\t\t\tcollection.set(keyValues, ulid);\n\t\t\t});\n\n\t\t\tthis.storage.multiSet(entriesToSet, (errors?: Error[]) => {\n\t\t\t\tif (errors && errors.length > 0) {\n\t\t\t\t\treject(errors);\n\t\t\t\t} else {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tfor (const key of allItemsKeys) {\n\t\t\tif (keysToDelete.has(key) && existingRecordsKeys.has(key)) {\n\t\t\t\tresult.push([itemsMap[key].model, OpType.DELETE]);\n\t\t\t} else if (keysToSave.has(key)) {\n\t\t\t\tresult.push([\n\t\t\t\t\titemsMap[key].model,\n\t\t\t\t\texistingRecordsKeys.has(key) ? OpType.UPDATE : OpType.INSERT,\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync get<T extends PersistentModel>(\n\t\tkeyValuePath: string,\n\t\tstoreName: string\n\t): Promise<T> {\n\t\tconst ulid = this.getCollectionIndex(storeName)!.get(keyValuePath)!;\n\t\tconst itemKey = this.getKeyForItem(storeName, keyValuePath, ulid);\n\t\tconst recordAsString = await this.storage.getItem(itemKey);\n\t\tconst record = recordAsString && JSON.parse(recordAsString);\n\t\treturn record;\n\t}\n\n\tasync getOne(firstOrLast: QueryOne, storeName: string) {\n\t\tconst collection = this.getCollectionIndex(storeName)!;\n\n\t\tconst [itemId, ulid] =\n\t\t\tfirstOrLast === QueryOne.FIRST\n\t\t\t\t? (() => {\n\t\t\t\t\t\tlet id: string, ulid: string;\n\t\t\t\t\t\tfor ([id, ulid] of collection) break; // Get first element of the set\n\t\t\t\t\t\treturn [id!, ulid!];\n\t\t\t\t  })()\n\t\t\t\t: (() => {\n\t\t\t\t\t\tlet id: string, ulid: string;\n\t\t\t\t\t\tfor ([id, ulid] of collection); // Get last element of the set\n\t\t\t\t\t\treturn [id!, ulid!];\n\t\t\t\t  })();\n\t\tconst itemKey = this.getKeyForItem(storeName, itemId, ulid);\n\n\t\tconst itemString = itemKey && (await this.storage.getItem(itemKey));\n\n\t\tconst result = itemString ? JSON.parse(itemString) || undefined : undefined;\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * This function gets all the records stored in async storage for a particular storeName\n\t * It then loads all the records for that filtered set of keys using multiGet()\n\t */\n\tasync getAll<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tconst collection = this.getCollectionIndex(storeName)!;\n\n\t\tconst { page = 0, limit = 0 } = pagination || {};\n\t\tconst start = Math.max(0, page * limit) || 0;\n\t\tconst end = limit > 0 ? start + limit : undefined;\n\n\t\tconst keysForStore: string[] = [];\n\t\tlet count = 0;\n\t\tfor (const [id, ulid] of collection) {\n\t\t\tcount++;\n\n\t\t\tif (count <= start) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tkeysForStore.push(this.getKeyForItem(storeName, id, ulid));\n\n\t\t\tif (count === end) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tconst storeRecordStrings = await this.storage.multiGet(keysForStore);\n\t\tconst records = storeRecordStrings\n\t\t\t.filter(([, value]) => value)\n\t\t\t.map(([, value]) => JSON.parse(value));\n\n\t\treturn records;\n\t}\n\n\tasync delete(key: string, storeName: string) {\n\t\tconst ulid = this.getCollectionIndex(storeName)!.get(key)!;\n\t\tconst itemKey = this.getKeyForItem(storeName, key, ulid);\n\t\tthis.getCollectionIndex(storeName)!.delete(key);\n\t\tawait this.storage.removeItem(itemKey);\n\t}\n\n\t/**\n\t * Clear the AsyncStorage of all DataStore entries\n\t */\n\tasync clear() {\n\t\tconst allKeys = await this.storage.getAllKeys();\n\t\tconst allDataStoreKeys = allKeys.filter(key => key.startsWith(DB_NAME));\n\t\tawait this.storage.multiRemove(allDataStoreKeys);\n\t\tthis._collectionInMemoryIndex.clear();\n\t}\n\n\tprivate getKeyForItem(storeName: string, id: string, ulid: string): string {\n\t\treturn `${this.getKeyPrefixForStoreItems(storeName)}::${ulid}::${id}`;\n\t}\n\n\tprivate getLegacyKeyForItem(storeName: string, id: string): string {\n\t\treturn `${this.getKeyPrefixForStoreItems(storeName)}::${id}`;\n\t}\n\n\tprivate getKeyPrefixForStoreItems(storeName: string): string {\n\t\treturn `${DB_NAME}::${storeName}::${DATA}`;\n\t}\n}\n\nexport default AsyncStorageDatabase;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}