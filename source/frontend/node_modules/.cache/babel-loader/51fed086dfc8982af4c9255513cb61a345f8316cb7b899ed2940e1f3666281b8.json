{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __read } from \"tslib\";\nimport { Amplify, ConsoleLogger, Hub } from '@aws-amplify/core';\nimport isEmpty from 'lodash/isEmpty';\nimport { AMPLIFY_SYMBOL } from '../../../common';\nvar DELIVERY_TYPE = 'IN_APP_MESSAGE';\nvar eventNameMemo = {};\nvar eventAttributesMemo = {};\nvar eventMetricsMemo = {};\nexport var logger = new ConsoleLogger('InAppMessaging.AWSPinpointProvider');\nexport var dispatchInAppMessagingEvent = function (event, data, message) {\n  Hub.dispatch('inAppMessaging', {\n    event: event,\n    data: data,\n    message: message\n  }, 'InAppMessaging', AMPLIFY_SYMBOL);\n};\nexport var recordAnalyticsEvent = function (event, message) {\n  if (Amplify.Analytics && typeof Amplify.Analytics.record === 'function') {\n    var id = message.id,\n      metadata = message.metadata;\n    Amplify.Analytics.record({\n      name: event,\n      attributes: {\n        campaign_id: id,\n        delivery_type: DELIVERY_TYPE,\n        treatment_id: metadata === null || metadata === void 0 ? void 0 : metadata.treatmentId\n      }\n    });\n  } else {\n    logger.debug('Analytics module is not registered into Amplify');\n  }\n};\nexport var getStartOfDay = function () {\n  var now = new Date();\n  now.setHours(0, 0, 0, 0);\n  return now.toISOString();\n};\nexport var matchesEventType = function (_a, _b) {\n  var CampaignId = _a.CampaignId,\n    Schedule = _a.Schedule;\n  var eventType = _b.name;\n  var _c;\n  var EventType = ((_c = Schedule === null || Schedule === void 0 ? void 0 : Schedule.EventFilter) === null || _c === void 0 ? void 0 : _c.Dimensions).EventType;\n  var memoKey = CampaignId + \":\" + eventType;\n  if (!eventNameMemo.hasOwnProperty(memoKey)) {\n    eventNameMemo[memoKey] = !!(EventType === null || EventType === void 0 ? void 0 : EventType.Values.includes(eventType));\n  }\n  return eventNameMemo[memoKey];\n};\nexport var matchesAttributes = function (_a, _b) {\n  var CampaignId = _a.CampaignId,\n    Schedule = _a.Schedule;\n  var attributes = _b.attributes;\n  var _c;\n  var Attributes = ((_c = Schedule === null || Schedule === void 0 ? void 0 : Schedule.EventFilter) === null || _c === void 0 ? void 0 : _c.Dimensions).Attributes;\n  if (isEmpty(Attributes)) {\n    // if message does not have attributes defined it does not matter what attributes are on the event\n    return true;\n  }\n  if (isEmpty(attributes)) {\n    // if message does have attributes but the event does not then it always fails the check\n    return false;\n  }\n  var memoKey = CampaignId + \":\" + JSON.stringify(attributes);\n  if (!eventAttributesMemo.hasOwnProperty(memoKey)) {\n    eventAttributesMemo[memoKey] = Object.entries(Attributes).every(function (_a) {\n      var _b = __read(_a, 2),\n        key = _b[0],\n        Values = _b[1].Values;\n      return Values.includes(attributes[key]);\n    });\n  }\n  return eventAttributesMemo[memoKey];\n};\nexport var matchesMetrics = function (_a, _b) {\n  var CampaignId = _a.CampaignId,\n    Schedule = _a.Schedule;\n  var metrics = _b.metrics;\n  var _c;\n  var Metrics = ((_c = Schedule === null || Schedule === void 0 ? void 0 : Schedule.EventFilter) === null || _c === void 0 ? void 0 : _c.Dimensions).Metrics;\n  if (isEmpty(Metrics)) {\n    // if message does not have metrics defined it does not matter what metrics are on the event\n    return true;\n  }\n  if (isEmpty(metrics)) {\n    // if message does have metrics but the event does not then it always fails the check\n    return false;\n  }\n  var memoKey = CampaignId + \":\" + JSON.stringify(metrics);\n  if (!eventMetricsMemo.hasOwnProperty(memoKey)) {\n    eventMetricsMemo[memoKey] = Object.entries(Metrics).every(function (_a) {\n      var _b = __read(_a, 2),\n        key = _b[0],\n        _c = _b[1],\n        ComparisonOperator = _c.ComparisonOperator,\n        Value = _c.Value;\n      var compare = getComparator(ComparisonOperator);\n      // if there is some unknown comparison operator, treat as a comparison failure\n      return compare ? compare(Value, metrics[key]) : false;\n    });\n  }\n  return eventMetricsMemo[memoKey];\n};\nexport var getComparator = function (operator) {\n  switch (operator) {\n    case 'EQUAL':\n      return function (metricsVal, eventVal) {\n        return metricsVal === eventVal;\n      };\n    case 'GREATER_THAN':\n      return function (metricsVal, eventVal) {\n        return metricsVal < eventVal;\n      };\n    case 'GREATER_THAN_OR_EQUAL':\n      return function (metricsVal, eventVal) {\n        return metricsVal <= eventVal;\n      };\n    case 'LESS_THAN':\n      return function (metricsVal, eventVal) {\n        return metricsVal > eventVal;\n      };\n    case 'LESS_THAN_OR_EQUAL':\n      return function (metricsVal, eventVal) {\n        return metricsVal >= eventVal;\n      };\n    default:\n      return null;\n  }\n};\nexport var isBeforeEndDate = function (_a) {\n  var Schedule = _a.Schedule;\n  if (!(Schedule === null || Schedule === void 0 ? void 0 : Schedule.EndDate)) {\n    return true;\n  }\n  return new Date() < new Date(Schedule.EndDate);\n};\nexport var isQuietTime = function (message) {\n  var Schedule = message.Schedule;\n  if (!(Schedule === null || Schedule === void 0 ? void 0 : Schedule.QuietTime)) {\n    return false;\n  }\n  var pattern = /^[0-2]\\d:[0-5]\\d$/; // basic sanity check, not a fully featured HH:MM validation\n  var _a = Schedule.QuietTime,\n    Start = _a.Start,\n    End = _a.End;\n  if (!Start || !End || Start === End || !pattern.test(Start) || !pattern.test(End)) {\n    return false;\n  }\n  var now = new Date();\n  var start = new Date(now);\n  var end = new Date(now);\n  var _b = __read(Start.split(':'), 2),\n    startHours = _b[0],\n    startMinutes = _b[1];\n  var _c = __read(End.split(':'), 2),\n    endHours = _c[0],\n    endMinutes = _c[1];\n  start.setHours(Number.parseInt(startHours, 10), Number.parseInt(startMinutes, 10), 0, 0);\n  end.setHours(Number.parseInt(endHours, 10), Number.parseInt(endMinutes, 10), 0, 0);\n  // if quiet time includes midnight, bump the end time to the next day\n  if (start > end) {\n    end.setDate(end.getDate() + 1);\n  }\n  var isQuietTime = now >= start && now <= end;\n  if (isQuietTime) {\n    logger.debug('message filtered due to quiet time', message);\n  }\n  return isQuietTime;\n};\nexport var clearMemo = function () {\n  eventNameMemo = {};\n  eventAttributesMemo = {};\n  eventMetricsMemo = {};\n};\n// in the pinpoint console when a message is created with a Modal or Full Screen layout,\n// it is assigned a layout value of MOBILE_FEED or OVERLAYS respectively in the message payload.\n// In the future, Pinpoint will be updating the layout values in the aforementioned scenario\n// to MODAL and FULL_SCREEN.\n//\n// This utility acts as a safeguard to ensure that:\n// - 1. the usage of MOBILE_FEED and OVERLAYS as values for message layouts are not leaked\n//      outside the Pinpoint provider\n// - 2. Amplify correctly handles the legacy layout values from Pinpoint after they are updated\nexport var interpretLayout = function (layout) {\n  if (layout === 'MOBILE_FEED') {\n    return 'MODAL';\n  }\n  if (layout === 'OVERLAYS') {\n    return 'FULL_SCREEN';\n  }\n  // cast as PinpointInAppMessage['InAppMessage']['Layout'] allows `string` as a value\n  return layout;\n};\nexport var extractContent = function (_a) {\n  var message = _a.InAppMessage;\n  var _b, _c;\n  return (_c = (_b = message === null || message === void 0 ? void 0 : message.Content) === null || _b === void 0 ? void 0 : _b.map(function (content) {\n    var BackgroundColor = content.BackgroundColor,\n      BodyConfig = content.BodyConfig,\n      HeaderConfig = content.HeaderConfig,\n      ImageUrl = content.ImageUrl,\n      PrimaryBtn = content.PrimaryBtn,\n      SecondaryBtn = content.SecondaryBtn;\n    var defaultPrimaryButton = PrimaryBtn === null || PrimaryBtn === void 0 ? void 0 : PrimaryBtn.DefaultConfig;\n    var defaultSecondaryButton = SecondaryBtn === null || SecondaryBtn === void 0 ? void 0 : SecondaryBtn.DefaultConfig;\n    var extractedContent = {};\n    if (BackgroundColor) {\n      extractedContent.container = {\n        style: {\n          backgroundColor: BackgroundColor\n        }\n      };\n    }\n    if (HeaderConfig) {\n      extractedContent.header = {\n        content: HeaderConfig.Header,\n        style: {\n          color: HeaderConfig.TextColor,\n          textAlign: HeaderConfig.Alignment.toLowerCase()\n        }\n      };\n    }\n    if (BodyConfig) {\n      extractedContent.body = {\n        content: BodyConfig.Body,\n        style: {\n          color: BodyConfig.TextColor,\n          textAlign: BodyConfig.Alignment.toLowerCase()\n        }\n      };\n    }\n    if (ImageUrl) {\n      extractedContent.image = {\n        src: ImageUrl\n      };\n    }\n    if (defaultPrimaryButton) {\n      extractedContent.primaryButton = {\n        title: defaultPrimaryButton.Text,\n        action: defaultPrimaryButton.ButtonAction,\n        url: defaultPrimaryButton.Link,\n        style: {\n          backgroundColor: defaultPrimaryButton.BackgroundColor,\n          borderRadius: defaultPrimaryButton.BorderRadius,\n          color: defaultPrimaryButton.TextColor\n        }\n      };\n    }\n    if (defaultSecondaryButton) {\n      extractedContent.secondaryButton = {\n        title: defaultSecondaryButton.Text,\n        action: defaultSecondaryButton.ButtonAction,\n        url: defaultSecondaryButton.Link,\n        style: {\n          backgroundColor: defaultSecondaryButton.BackgroundColor,\n          borderRadius: defaultSecondaryButton.BorderRadius,\n          color: defaultSecondaryButton.TextColor\n        }\n      };\n    }\n    return extractedContent;\n  })) !== null && _c !== void 0 ? _c : [];\n};\nexport var extractMetadata = function (_a) {\n  var InAppMessage = _a.InAppMessage,\n    Priority = _a.Priority,\n    Schedule = _a.Schedule,\n    TreatmentId = _a.TreatmentId;\n  return {\n    customData: InAppMessage === null || InAppMessage === void 0 ? void 0 : InAppMessage.CustomConfig,\n    endDate: Schedule === null || Schedule === void 0 ? void 0 : Schedule.EndDate,\n    priority: Priority,\n    treatmentId: TreatmentId\n  };\n};","map":{"version":3,"mappings":"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","names":["Amplify","ConsoleLogger","Hub","isEmpty","AMPLIFY_SYMBOL","DELIVERY_TYPE","eventNameMemo","eventAttributesMemo","eventMetricsMemo","logger","dispatchInAppMessagingEvent","event","data","message","dispatch","recordAnalyticsEvent","Analytics","record","metadata","name","attributes","campaign_id","id","delivery_type","treatment_id","treatmentId","debug","getStartOfDay","now","Date","setHours","toISOString","matchesEventType","_a","_b","CampaignId","Schedule","eventType","memoKey","hasOwnProperty","EventType","Values","includes","matchesAttributes","Attributes","JSON","stringify","Object","entries","every","key","matchesMetrics","metrics","Metrics","_c","ComparisonOperator","Value","compare","getComparator","operator","metricsVal","eventVal","isBeforeEndDate","EndDate","isQuietTime","QuietTime","pattern","Start","End","test","start","end","startHours","startMinutes","endHours","endMinutes","Number","parseInt","setDate","getDate","clearMemo","interpretLayout","layout","extractContent","Content","map","BodyConfig","HeaderConfig","ImageUrl","PrimaryBtn","SecondaryBtn","defaultPrimaryButton","DefaultConfig","defaultSecondaryButton","extractedContent","BackgroundColor","container","style","backgroundColor","header","content","Header","color","TextColor","textAlign","Alignment","toLowerCase","body","Body","image","src","primaryButton","title","Text","action","ButtonAction","url","Link","borderRadius","BorderRadius","secondaryButton","extractMetadata","InAppMessage","Priority","TreatmentId","customData","CustomConfig","endDate","priority"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-amplify/notifications/src/InAppMessaging/Providers/AWSPinpointProvider/utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Amplify, ConsoleLogger, Hub } from '@aws-amplify/core';\nimport type { InAppMessageCampaign as PinpointInAppMessage } from '@aws-amplify/core/internals/aws-clients/pinpoint';\nimport isEmpty from 'lodash/isEmpty';\nimport { AMPLIFY_SYMBOL } from '../../../common';\nimport {\n\tInAppMessage,\n\tInAppMessageAction,\n\tInAppMessageContent,\n\tInAppMessageLayout,\n\tInAppMessageTextAlign,\n\tInAppMessagingEvent,\n} from '../../types';\n\nimport { AWSPinpointMessageEvent, MetricsComparator } from './types';\n\nconst DELIVERY_TYPE = 'IN_APP_MESSAGE';\n\nlet eventNameMemo = {};\nlet eventAttributesMemo = {};\nlet eventMetricsMemo = {};\n\nexport const logger = new ConsoleLogger('InAppMessaging.AWSPinpointProvider');\n\nexport const dispatchInAppMessagingEvent = (\n\tevent: string,\n\tdata: any,\n\tmessage?: string\n) => {\n\tHub.dispatch(\n\t\t'inAppMessaging',\n\t\t{ event, data, message },\n\t\t'InAppMessaging',\n\t\tAMPLIFY_SYMBOL\n\t);\n};\n\nexport const recordAnalyticsEvent = (\n\tevent: AWSPinpointMessageEvent,\n\tmessage: InAppMessage\n) => {\n\tif (Amplify.Analytics && typeof Amplify.Analytics.record === 'function') {\n\t\tconst { id, metadata } = message;\n\t\tAmplify.Analytics.record({\n\t\t\tname: event,\n\t\t\tattributes: {\n\t\t\t\tcampaign_id: id,\n\t\t\t\tdelivery_type: DELIVERY_TYPE,\n\t\t\t\ttreatment_id: metadata?.treatmentId,\n\t\t\t},\n\t\t});\n\t} else {\n\t\tlogger.debug('Analytics module is not registered into Amplify');\n\t}\n};\n\nexport const getStartOfDay = (): string => {\n\tconst now = new Date();\n\tnow.setHours(0, 0, 0, 0);\n\treturn now.toISOString();\n};\n\nexport const matchesEventType = (\n\t{ CampaignId, Schedule }: PinpointInAppMessage,\n\t{ name: eventType }: InAppMessagingEvent\n) => {\n\tconst { EventType } = Schedule?.EventFilter?.Dimensions;\n\tconst memoKey = `${CampaignId}:${eventType}`;\n\tif (!eventNameMemo.hasOwnProperty(memoKey)) {\n\t\teventNameMemo[memoKey] = !!EventType?.Values.includes(eventType);\n\t}\n\treturn eventNameMemo[memoKey];\n};\n\nexport const matchesAttributes = (\n\t{ CampaignId, Schedule }: PinpointInAppMessage,\n\t{ attributes }: InAppMessagingEvent\n): boolean => {\n\tconst { Attributes } = Schedule?.EventFilter?.Dimensions;\n\tif (isEmpty(Attributes)) {\n\t\t// if message does not have attributes defined it does not matter what attributes are on the event\n\t\treturn true;\n\t}\n\tif (isEmpty(attributes)) {\n\t\t// if message does have attributes but the event does not then it always fails the check\n\t\treturn false;\n\t}\n\tconst memoKey = `${CampaignId}:${JSON.stringify(attributes)}`;\n\tif (!eventAttributesMemo.hasOwnProperty(memoKey)) {\n\t\teventAttributesMemo[memoKey] = Object.entries(Attributes).every(\n\t\t\t([key, { Values }]) => Values.includes(attributes[key])\n\t\t);\n\t}\n\treturn eventAttributesMemo[memoKey];\n};\n\nexport const matchesMetrics = (\n\t{ CampaignId, Schedule }: PinpointInAppMessage,\n\t{ metrics }: InAppMessagingEvent\n): boolean => {\n\tconst { Metrics } = Schedule?.EventFilter?.Dimensions;\n\tif (isEmpty(Metrics)) {\n\t\t// if message does not have metrics defined it does not matter what metrics are on the event\n\t\treturn true;\n\t}\n\tif (isEmpty(metrics)) {\n\t\t// if message does have metrics but the event does not then it always fails the check\n\t\treturn false;\n\t}\n\tconst memoKey = `${CampaignId}:${JSON.stringify(metrics)}`;\n\tif (!eventMetricsMemo.hasOwnProperty(memoKey)) {\n\t\teventMetricsMemo[memoKey] = Object.entries(Metrics).every(\n\t\t\t([key, { ComparisonOperator, Value }]) => {\n\t\t\t\tconst compare = getComparator(ComparisonOperator);\n\t\t\t\t// if there is some unknown comparison operator, treat as a comparison failure\n\t\t\t\treturn compare ? compare(Value, metrics[key]) : false;\n\t\t\t}\n\t\t);\n\t}\n\treturn eventMetricsMemo[memoKey];\n};\n\nexport const getComparator = (operator: string): MetricsComparator => {\n\tswitch (operator) {\n\t\tcase 'EQUAL':\n\t\t\treturn (metricsVal, eventVal) => metricsVal === eventVal;\n\t\tcase 'GREATER_THAN':\n\t\t\treturn (metricsVal, eventVal) => metricsVal < eventVal;\n\t\tcase 'GREATER_THAN_OR_EQUAL':\n\t\t\treturn (metricsVal, eventVal) => metricsVal <= eventVal;\n\t\tcase 'LESS_THAN':\n\t\t\treturn (metricsVal, eventVal) => metricsVal > eventVal;\n\t\tcase 'LESS_THAN_OR_EQUAL':\n\t\t\treturn (metricsVal, eventVal) => metricsVal >= eventVal;\n\t\tdefault:\n\t\t\treturn null;\n\t}\n};\n\nexport const isBeforeEndDate = ({\n\tSchedule,\n}: PinpointInAppMessage): boolean => {\n\tif (!Schedule?.EndDate) {\n\t\treturn true;\n\t}\n\treturn new Date() < new Date(Schedule.EndDate);\n};\n\nexport const isQuietTime = (message: PinpointInAppMessage): boolean => {\n\tconst { Schedule } = message;\n\tif (!Schedule?.QuietTime) {\n\t\treturn false;\n\t}\n\n\tconst pattern = /^[0-2]\\d:[0-5]\\d$/; // basic sanity check, not a fully featured HH:MM validation\n\tconst { Start, End } = Schedule.QuietTime;\n\tif (\n\t\t!Start ||\n\t\t!End ||\n\t\tStart === End ||\n\t\t!pattern.test(Start) ||\n\t\t!pattern.test(End)\n\t) {\n\t\treturn false;\n\t}\n\n\tconst now = new Date();\n\tconst start = new Date(now);\n\tconst end = new Date(now);\n\tconst [startHours, startMinutes] = Start.split(':');\n\tconst [endHours, endMinutes] = End.split(':');\n\n\tstart.setHours(\n\t\tNumber.parseInt(startHours, 10),\n\t\tNumber.parseInt(startMinutes, 10),\n\t\t0,\n\t\t0\n\t);\n\tend.setHours(\n\t\tNumber.parseInt(endHours, 10),\n\t\tNumber.parseInt(endMinutes, 10),\n\t\t0,\n\t\t0\n\t);\n\n\t// if quiet time includes midnight, bump the end time to the next day\n\tif (start > end) {\n\t\tend.setDate(end.getDate() + 1);\n\t}\n\n\tconst isQuietTime = now >= start && now <= end;\n\tif (isQuietTime) {\n\t\tlogger.debug('message filtered due to quiet time', message);\n\t}\n\treturn isQuietTime;\n};\n\nexport const clearMemo = () => {\n\teventNameMemo = {};\n\teventAttributesMemo = {};\n\teventMetricsMemo = {};\n};\n\n// in the pinpoint console when a message is created with a Modal or Full Screen layout,\n// it is assigned a layout value of MOBILE_FEED or OVERLAYS respectively in the message payload.\n// In the future, Pinpoint will be updating the layout values in the aforementioned scenario\n// to MODAL and FULL_SCREEN.\n//\n// This utility acts as a safeguard to ensure that:\n// - 1. the usage of MOBILE_FEED and OVERLAYS as values for message layouts are not leaked\n//      outside the Pinpoint provider\n// - 2. Amplify correctly handles the legacy layout values from Pinpoint after they are updated\nexport const interpretLayout = (\n\tlayout: PinpointInAppMessage['InAppMessage']['Layout']\n): InAppMessageLayout => {\n\tif (layout === 'MOBILE_FEED') {\n\t\treturn 'MODAL';\n\t}\n\n\tif (layout === 'OVERLAYS') {\n\t\treturn 'FULL_SCREEN';\n\t}\n\n\t// cast as PinpointInAppMessage['InAppMessage']['Layout'] allows `string` as a value\n\treturn layout as InAppMessageLayout;\n};\n\nexport const extractContent = ({\n\tInAppMessage: message,\n}: PinpointInAppMessage): InAppMessageContent[] => {\n\treturn (\n\t\tmessage?.Content?.map(content => {\n\t\t\tconst {\n\t\t\t\tBackgroundColor,\n\t\t\t\tBodyConfig,\n\t\t\t\tHeaderConfig,\n\t\t\t\tImageUrl,\n\t\t\t\tPrimaryBtn,\n\t\t\t\tSecondaryBtn,\n\t\t\t} = content;\n\t\t\tconst defaultPrimaryButton = PrimaryBtn?.DefaultConfig;\n\t\t\tconst defaultSecondaryButton = SecondaryBtn?.DefaultConfig;\n\t\t\tconst extractedContent: InAppMessageContent = {};\n\t\t\tif (BackgroundColor) {\n\t\t\t\textractedContent.container = {\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tbackgroundColor: BackgroundColor,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (HeaderConfig) {\n\t\t\t\textractedContent.header = {\n\t\t\t\t\tcontent: HeaderConfig.Header,\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tcolor: HeaderConfig.TextColor,\n\t\t\t\t\t\ttextAlign:\n\t\t\t\t\t\t\tHeaderConfig.Alignment.toLowerCase() as InAppMessageTextAlign,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (BodyConfig) {\n\t\t\t\textractedContent.body = {\n\t\t\t\t\tcontent: BodyConfig.Body,\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tcolor: BodyConfig.TextColor,\n\t\t\t\t\t\ttextAlign:\n\t\t\t\t\t\t\tBodyConfig.Alignment.toLowerCase() as InAppMessageTextAlign,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (ImageUrl) {\n\t\t\t\textractedContent.image = {\n\t\t\t\t\tsrc: ImageUrl,\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (defaultPrimaryButton) {\n\t\t\t\textractedContent.primaryButton = {\n\t\t\t\t\ttitle: defaultPrimaryButton.Text,\n\t\t\t\t\taction: defaultPrimaryButton.ButtonAction as InAppMessageAction,\n\t\t\t\t\turl: defaultPrimaryButton.Link,\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tbackgroundColor: defaultPrimaryButton.BackgroundColor,\n\t\t\t\t\t\tborderRadius: defaultPrimaryButton.BorderRadius,\n\t\t\t\t\t\tcolor: defaultPrimaryButton.TextColor,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (defaultSecondaryButton) {\n\t\t\t\textractedContent.secondaryButton = {\n\t\t\t\t\ttitle: defaultSecondaryButton.Text,\n\t\t\t\t\taction: defaultSecondaryButton.ButtonAction as InAppMessageAction,\n\t\t\t\t\turl: defaultSecondaryButton.Link,\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tbackgroundColor: defaultSecondaryButton.BackgroundColor,\n\t\t\t\t\t\tborderRadius: defaultSecondaryButton.BorderRadius,\n\t\t\t\t\t\tcolor: defaultSecondaryButton.TextColor,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn extractedContent;\n\t\t}) ?? []\n\t);\n};\n\nexport const extractMetadata = ({\n\tInAppMessage,\n\tPriority,\n\tSchedule,\n\tTreatmentId,\n}: PinpointInAppMessage): InAppMessage['metadata'] => ({\n\tcustomData: InAppMessage?.CustomConfig,\n\tendDate: Schedule?.EndDate,\n\tpriority: Priority,\n\ttreatmentId: TreatmentId,\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}