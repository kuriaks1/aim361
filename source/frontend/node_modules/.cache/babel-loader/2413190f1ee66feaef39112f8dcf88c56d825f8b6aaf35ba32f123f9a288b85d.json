{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { ALGORITHM_IDENTIFIER, ALGORITHM_QUERY_PARAM, AMZ_DATE_HEADER, AMZ_DATE_QUERY_PARAM, AUTH_HEADER, CREDENTIAL_QUERY_PARAM, EVENT_ALGORITHM_IDENTIFIER, EXPIRES_QUERY_PARAM, MAX_PRESIGNED_TTL, SHA256_HEADER, SIGNATURE_QUERY_PARAM, SIGNED_HEADERS_QUERY_PARAM, TOKEN_HEADER, TOKEN_QUERY_PARAM } from \"./constants\";\nimport { createScope, getSigningKey } from \"./credentialDerivation\";\nimport { getCanonicalHeaders } from \"./getCanonicalHeaders\";\nimport { getCanonicalQuery } from \"./getCanonicalQuery\";\nimport { getPayloadHash } from \"./getPayloadHash\";\nimport { hasHeader } from \"./hasHeader\";\nimport { moveHeadersToQuery } from \"./moveHeadersToQuery\";\nimport { prepareRequest } from \"./prepareRequest\";\nimport { iso8601 } from \"./utilDate\";\nvar SignatureV4 = /** @class */function () {\n  function SignatureV4(_a) {\n    var applyChecksum = _a.applyChecksum,\n      credentials = _a.credentials,\n      region = _a.region,\n      service = _a.service,\n      sha256 = _a.sha256,\n      _b = _a.uriEscapePath,\n      uriEscapePath = _b === void 0 ? true : _b;\n    this.service = service;\n    this.sha256 = sha256;\n    this.uriEscapePath = uriEscapePath;\n    // default to true if applyChecksum isn't set\n    this.applyChecksum = typeof applyChecksum === \"boolean\" ? applyChecksum : true;\n    this.regionProvider = normalizeRegionProvider(region);\n    this.credentialProvider = normalizeCredentialsProvider(credentials);\n  }\n  SignatureV4.prototype.presign = function (originalRequest, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, signingDate, _b, expiresIn, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService, credentials, region, _c, _d, longDate, shortDate, scope, request, canonicalHeaders, _e, _f, _g, _h, _j, _k;\n      return __generator(this, function (_l) {\n        switch (_l.label) {\n          case 0:\n            _a = options.signingDate, signingDate = _a === void 0 ? new Date() : _a, _b = options.expiresIn, expiresIn = _b === void 0 ? 3600 : _b, unsignableHeaders = options.unsignableHeaders, unhoistableHeaders = options.unhoistableHeaders, signableHeaders = options.signableHeaders, signingRegion = options.signingRegion, signingService = options.signingService;\n            return [4 /*yield*/, this.credentialProvider()];\n          case 1:\n            credentials = _l.sent();\n            if (!(signingRegion !== null && signingRegion !== void 0)) return [3 /*break*/, 2];\n            _c = signingRegion;\n            return [3 /*break*/, 4];\n          case 2:\n            return [4 /*yield*/, this.regionProvider()];\n          case 3:\n            _c = _l.sent();\n            _l.label = 4;\n          case 4:\n            region = _c;\n            _d = formatDate(signingDate), longDate = _d.longDate, shortDate = _d.shortDate;\n            if (expiresIn > MAX_PRESIGNED_TTL) {\n              return [2 /*return*/, Promise.reject(\"Signature version 4 presigned URLs\" + \" must have an expiration date less than one week in\" + \" the future\")];\n            }\n            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);\n            request = moveHeadersToQuery(prepareRequest(originalRequest), {\n              unhoistableHeaders: unhoistableHeaders\n            });\n            if (credentials.sessionToken) {\n              request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;\n            }\n            request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;\n            request.query[CREDENTIAL_QUERY_PARAM] = credentials.accessKeyId + \"/\" + scope;\n            request.query[AMZ_DATE_QUERY_PARAM] = longDate;\n            request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);\n            canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n            request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);\n            _e = request.query;\n            _f = SIGNATURE_QUERY_PARAM;\n            _g = this.getSignature;\n            _h = [longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService)];\n            _j = this.createCanonicalRequest;\n            _k = [request, canonicalHeaders];\n            return [4 /*yield*/, getPayloadHash(originalRequest, this.sha256)];\n          case 5:\n            return [4 /*yield*/, _g.apply(this, _h.concat([_j.apply(this, _k.concat([_l.sent()]))]))];\n          case 6:\n            _e[_f] = _l.sent();\n            return [2 /*return*/, request];\n        }\n      });\n    });\n  };\n  SignatureV4.prototype.sign = function (toSign, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (typeof toSign === \"string\") {\n          return [2 /*return*/, this.signString(toSign, options)];\n        } else if (toSign.headers && toSign.payload) {\n          return [2 /*return*/, this.signEvent(toSign, options)];\n        } else {\n          return [2 /*return*/, this.signRequest(toSign, options)];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  SignatureV4.prototype.signEvent = function (_a, _b) {\n    var headers = _a.headers,\n      payload = _a.payload;\n    var _c = _b.signingDate,\n      signingDate = _c === void 0 ? new Date() : _c,\n      priorSignature = _b.priorSignature,\n      signingRegion = _b.signingRegion,\n      signingService = _b.signingService;\n    return __awaiter(this, void 0, void 0, function () {\n      var region, _d, _e, shortDate, longDate, scope, hashedPayload, hash, hashedHeaders, _f, stringToSign;\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            if (!(signingRegion !== null && signingRegion !== void 0)) return [3 /*break*/, 1];\n            _d = signingRegion;\n            return [3 /*break*/, 3];\n          case 1:\n            return [4 /*yield*/, this.regionProvider()];\n          case 2:\n            _d = _g.sent();\n            _g.label = 3;\n          case 3:\n            region = _d;\n            _e = formatDate(signingDate), shortDate = _e.shortDate, longDate = _e.longDate;\n            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);\n            return [4 /*yield*/, getPayloadHash({\n              headers: {},\n              body: payload\n            }, this.sha256)];\n          case 4:\n            hashedPayload = _g.sent();\n            hash = new this.sha256();\n            hash.update(headers);\n            _f = toHex;\n            return [4 /*yield*/, hash.digest()];\n          case 5:\n            hashedHeaders = _f.apply(void 0, [_g.sent()]);\n            stringToSign = [EVENT_ALGORITHM_IDENTIFIER, longDate, scope, priorSignature, hashedHeaders, hashedPayload].join(\"\\n\");\n            return [2 /*return*/, this.signString(stringToSign, {\n              signingDate: signingDate,\n              signingRegion: region,\n              signingService: signingService\n            })];\n        }\n      });\n    });\n  };\n  SignatureV4.prototype.signString = function (stringToSign, _a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.signingDate,\n      signingDate = _c === void 0 ? new Date() : _c,\n      signingRegion = _b.signingRegion,\n      signingService = _b.signingService;\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, region, _d, shortDate, hash, _e, _f, _g;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            return [4 /*yield*/, this.credentialProvider()];\n          case 1:\n            credentials = _h.sent();\n            if (!(signingRegion !== null && signingRegion !== void 0)) return [3 /*break*/, 2];\n            _d = signingRegion;\n            return [3 /*break*/, 4];\n          case 2:\n            return [4 /*yield*/, this.regionProvider()];\n          case 3:\n            _d = _h.sent();\n            _h.label = 4;\n          case 4:\n            region = _d;\n            shortDate = formatDate(signingDate).shortDate;\n            _f = (_e = this.sha256).bind;\n            return [4 /*yield*/, this.getSigningKey(credentials, region, shortDate, signingService)];\n          case 5:\n            hash = new (_f.apply(_e, [void 0, _h.sent()]))();\n            hash.update(stringToSign);\n            _g = toHex;\n            return [4 /*yield*/, hash.digest()];\n          case 6:\n            return [2 /*return*/, _g.apply(void 0, [_h.sent()])];\n        }\n      });\n    });\n  };\n  SignatureV4.prototype.signRequest = function (requestToSign, _a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.signingDate,\n      signingDate = _c === void 0 ? new Date() : _c,\n      signableHeaders = _b.signableHeaders,\n      unsignableHeaders = _b.unsignableHeaders,\n      signingRegion = _b.signingRegion,\n      signingService = _b.signingService;\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, region, _d, request, _e, longDate, shortDate, scope, payloadHash, canonicalHeaders, signature;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            return [4 /*yield*/, this.credentialProvider()];\n          case 1:\n            credentials = _f.sent();\n            if (!(signingRegion !== null && signingRegion !== void 0)) return [3 /*break*/, 2];\n            _d = signingRegion;\n            return [3 /*break*/, 4];\n          case 2:\n            return [4 /*yield*/, this.regionProvider()];\n          case 3:\n            _d = _f.sent();\n            _f.label = 4;\n          case 4:\n            region = _d;\n            request = prepareRequest(requestToSign);\n            _e = formatDate(signingDate), longDate = _e.longDate, shortDate = _e.shortDate;\n            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);\n            request.headers[AMZ_DATE_HEADER] = longDate;\n            if (credentials.sessionToken) {\n              request.headers[TOKEN_HEADER] = credentials.sessionToken;\n            }\n            return [4 /*yield*/, getPayloadHash(request, this.sha256)];\n          case 5:\n            payloadHash = _f.sent();\n            if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {\n              request.headers[SHA256_HEADER] = payloadHash;\n            }\n            canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n            return [4 /*yield*/, this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash))];\n          case 6:\n            signature = _f.sent();\n            request.headers[AUTH_HEADER] = ALGORITHM_IDENTIFIER + \" \" + (\"Credential=\" + credentials.accessKeyId + \"/\" + scope + \", \") + (\"SignedHeaders=\" + getCanonicalHeaderList(canonicalHeaders) + \", \") + (\"Signature=\" + signature);\n            return [2 /*return*/, request];\n        }\n      });\n    });\n  };\n  SignatureV4.prototype.createCanonicalRequest = function (request, canonicalHeaders, payloadHash) {\n    var sortedHeaders = Object.keys(canonicalHeaders).sort();\n    return request.method + \"\\n\" + this.getCanonicalPath(request) + \"\\n\" + getCanonicalQuery(request) + \"\\n\" + sortedHeaders.map(function (name) {\n      return name + \":\" + canonicalHeaders[name];\n    }).join(\"\\n\") + \"\\n\\n\" + sortedHeaders.join(\";\") + \"\\n\" + payloadHash;\n  };\n  SignatureV4.prototype.createStringToSign = function (longDate, credentialScope, canonicalRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var hash, hashedRequest;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            hash = new this.sha256();\n            hash.update(canonicalRequest);\n            return [4 /*yield*/, hash.digest()];\n          case 1:\n            hashedRequest = _a.sent();\n            return [2 /*return*/, ALGORITHM_IDENTIFIER + \"\\n\" + longDate + \"\\n\" + credentialScope + \"\\n\" + toHex(hashedRequest)];\n        }\n      });\n    });\n  };\n  SignatureV4.prototype.getCanonicalPath = function (_a) {\n    var path = _a.path;\n    if (this.uriEscapePath) {\n      var doubleEncoded = encodeURIComponent(path.replace(/^\\//, \"\"));\n      return \"/\" + doubleEncoded.replace(/%2F/g, \"/\");\n    }\n    return path;\n  };\n  SignatureV4.prototype.getSignature = function (longDate, credentialScope, keyPromise, canonicalRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stringToSign, hash, _a, _b, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4 /*yield*/, this.createStringToSign(longDate, credentialScope, canonicalRequest)];\n          case 1:\n            stringToSign = _d.sent();\n            _b = (_a = this.sha256).bind;\n            return [4 /*yield*/, keyPromise];\n          case 2:\n            hash = new (_b.apply(_a, [void 0, _d.sent()]))();\n            hash.update(stringToSign);\n            _c = toHex;\n            return [4 /*yield*/, hash.digest()];\n          case 3:\n            return [2 /*return*/, _c.apply(void 0, [_d.sent()])];\n        }\n      });\n    });\n  };\n  SignatureV4.prototype.getSigningKey = function (credentials, region, shortDate, service) {\n    return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);\n  };\n  return SignatureV4;\n}();\nexport { SignatureV4 };\nvar formatDate = function (now) {\n  var longDate = iso8601(now).replace(/[\\-:]/g, \"\");\n  return {\n    longDate: longDate,\n    shortDate: longDate.substr(0, 8)\n  };\n};\nvar getCanonicalHeaderList = function (headers) {\n  return Object.keys(headers).sort().join(\";\");\n};\nvar normalizeRegionProvider = function (region) {\n  if (typeof region === \"string\") {\n    var promisified_1 = Promise.resolve(region);\n    return function () {\n      return promisified_1;\n    };\n  } else {\n    return region;\n  }\n};\nvar normalizeCredentialsProvider = function (credentials) {\n  if (typeof credentials === \"object\") {\n    var promisified_2 = Promise.resolve(credentials);\n    return function () {\n      return promisified_2;\n    };\n  } else {\n    return credentials;\n  }\n};","map":{"version":3,"mappings":"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","names":["toHex","ALGORITHM_IDENTIFIER","ALGORITHM_QUERY_PARAM","AMZ_DATE_HEADER","AMZ_DATE_QUERY_PARAM","AUTH_HEADER","CREDENTIAL_QUERY_PARAM","EVENT_ALGORITHM_IDENTIFIER","EXPIRES_QUERY_PARAM","MAX_PRESIGNED_TTL","SHA256_HEADER","SIGNATURE_QUERY_PARAM","SIGNED_HEADERS_QUERY_PARAM","TOKEN_HEADER","TOKEN_QUERY_PARAM","createScope","getSigningKey","getCanonicalHeaders","getCanonicalQuery","getPayloadHash","hasHeader","moveHeadersToQuery","prepareRequest","iso8601","_a","applyChecksum","credentials","region","service","sha256","_b","uriEscapePath","regionProvider","normalizeRegionProvider","credentialProvider","normalizeCredentialsProvider","SignatureV4","originalRequest","options","signingDate","Date","expiresIn","unsignableHeaders","unhoistableHeaders","signableHeaders","signingRegion","signingService","_l","_c","_d","formatDate","longDate","shortDate","Promise","reject","scope","request","sessionToken","query","accessKeyId","toString","canonicalHeaders","getCanonicalHeaderList","_e","_f","_g","getSignature","_j","createCanonicalRequest","toSign","signString","headers","payload","signEvent","signRequest","priorSignature","body","hashedPayload","hash","update","digest","hashedHeaders","stringToSign","join","_h","requestToSign","payloadHash","signature","sortedHeaders","Object","keys","sort","method","getCanonicalPath","map","name","credentialScope","canonicalRequest","hashedRequest","path","doubleEncoded","encodeURIComponent","replace","keyPromise","createStringToSign","now","substr","promisified_1","resolve","promisified_2"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-sdk/signature-v4/src/SignatureV4.ts"],"sourcesContent":["import {\n  Credentials,\n  DateInput,\n  EventSigner,\n  EventSigningArguments,\n  FormattedEvent,\n  HashConstructor,\n  HeaderBag,\n  HttpRequest,\n  Provider,\n  RequestPresigner,\n  RequestPresigningArguments,\n  RequestSigner,\n  RequestSigningArguments,\n  SigningArguments,\n  StringSigner,\n} from \"@aws-sdk/types\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\n\nimport {\n  ALGORITHM_IDENTIFIER,\n  ALGORITHM_QUERY_PARAM,\n  AMZ_DATE_HEADER,\n  AMZ_DATE_QUERY_PARAM,\n  AUTH_HEADER,\n  CREDENTIAL_QUERY_PARAM,\n  EVENT_ALGORITHM_IDENTIFIER,\n  EXPIRES_QUERY_PARAM,\n  MAX_PRESIGNED_TTL,\n  SHA256_HEADER,\n  SIGNATURE_QUERY_PARAM,\n  SIGNED_HEADERS_QUERY_PARAM,\n  TOKEN_HEADER,\n  TOKEN_QUERY_PARAM,\n} from \"./constants\";\nimport { createScope, getSigningKey } from \"./credentialDerivation\";\nimport { getCanonicalHeaders } from \"./getCanonicalHeaders\";\nimport { getCanonicalQuery } from \"./getCanonicalQuery\";\nimport { getPayloadHash } from \"./getPayloadHash\";\nimport { hasHeader } from \"./hasHeader\";\nimport { moveHeadersToQuery } from \"./moveHeadersToQuery\";\nimport { prepareRequest } from \"./prepareRequest\";\nimport { iso8601 } from \"./utilDate\";\n\nexport interface SignatureV4Init {\n  /**\n   * The service signing name.\n   */\n  service: string;\n\n  /**\n   * The region name or a function that returns a promise that will be\n   * resolved with the region name.\n   */\n  region: string | Provider<string>;\n\n  /**\n   * The credentials with which the request should be signed or a function\n   * that returns a promise that will be resolved with credentials.\n   */\n  credentials: Credentials | Provider<Credentials>;\n\n  /**\n   * A constructor function for a hash object that will calculate SHA-256 HMAC\n   * checksums.\n   */\n  sha256?: HashConstructor;\n\n  /**\n   * Whether to uri-escape the request URI path as part of computing the\n   * canonical request string. This is required for every AWS service, except\n   * Amazon S3, as of late 2017.\n   *\n   * @default [true]\n   */\n  uriEscapePath?: boolean;\n\n  /**\n   * Whether to calculate a checksum of the request body and include it as\n   * either a request header (when signing) or as a query string parameter\n   * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n   * every other AWS service as of late 2017.\n   *\n   * @default [true]\n   */\n  applyChecksum?: boolean;\n}\n\nexport interface SignatureV4CryptoInit {\n  sha256: HashConstructor;\n}\n\nexport class SignatureV4 implements RequestPresigner, RequestSigner, StringSigner, EventSigner {\n  private readonly service: string;\n  private readonly regionProvider: Provider<string>;\n  private readonly credentialProvider: Provider<Credentials>;\n  private readonly sha256: HashConstructor;\n  private readonly uriEscapePath: boolean;\n  private readonly applyChecksum: boolean;\n\n  constructor({\n    applyChecksum,\n    credentials,\n    region,\n    service,\n    sha256,\n    uriEscapePath = true,\n  }: SignatureV4Init & SignatureV4CryptoInit) {\n    this.service = service;\n    this.sha256 = sha256;\n    this.uriEscapePath = uriEscapePath;\n    // default to true if applyChecksum isn't set\n    this.applyChecksum = typeof applyChecksum === \"boolean\" ? applyChecksum : true;\n    this.regionProvider = normalizeRegionProvider(region);\n    this.credentialProvider = normalizeCredentialsProvider(credentials);\n  }\n\n  public async presign(originalRequest: HttpRequest, options: RequestPresigningArguments = {}): Promise<HttpRequest> {\n    const {\n      signingDate = new Date(),\n      expiresIn = 3600,\n      unsignableHeaders,\n      unhoistableHeaders,\n      signableHeaders,\n      signingRegion,\n      signingService,\n    } = options;\n    const credentials = await this.credentialProvider();\n    const region = signingRegion ?? (await this.regionProvider());\n\n    const { longDate, shortDate } = formatDate(signingDate);\n    if (expiresIn > MAX_PRESIGNED_TTL) {\n      return Promise.reject(\n        \"Signature version 4 presigned URLs\" + \" must have an expiration date less than one week in\" + \" the future\"\n      );\n    }\n\n    const scope = createScope(shortDate, region, signingService ?? this.service);\n    const request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders });\n\n    if (credentials.sessionToken) {\n      request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;\n    }\n    request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;\n    request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;\n    request.query[AMZ_DATE_QUERY_PARAM] = longDate;\n    request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);\n\n    const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n    request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);\n\n    request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(\n      longDate,\n      scope,\n      this.getSigningKey(credentials, region, shortDate, signingService),\n      this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256))\n    );\n\n    return request;\n  }\n\n  public async sign(stringToSign: string, options?: SigningArguments): Promise<string>;\n  public async sign(event: FormattedEvent, options: EventSigningArguments): Promise<string>;\n  public async sign(requestToSign: HttpRequest, options?: RequestSigningArguments): Promise<HttpRequest>;\n  public async sign(toSign: any, options: any): Promise<any> {\n    if (typeof toSign === \"string\") {\n      return this.signString(toSign, options);\n    } else if (toSign.headers && toSign.payload) {\n      return this.signEvent(toSign, options);\n    } else {\n      return this.signRequest(toSign, options);\n    }\n  }\n\n  private async signEvent(\n    { headers, payload }: FormattedEvent,\n    { signingDate = new Date(), priorSignature, signingRegion, signingService }: EventSigningArguments\n  ): Promise<string> {\n    const region = signingRegion ?? (await this.regionProvider());\n    const { shortDate, longDate } = formatDate(signingDate);\n    const scope = createScope(shortDate, region, signingService ?? this.service);\n    const hashedPayload = await getPayloadHash({ headers: {}, body: payload } as any, this.sha256);\n    const hash = new this.sha256();\n    hash.update(headers);\n    const hashedHeaders = toHex(await hash.digest());\n    const stringToSign = [\n      EVENT_ALGORITHM_IDENTIFIER,\n      longDate,\n      scope,\n      priorSignature,\n      hashedHeaders,\n      hashedPayload,\n    ].join(\"\\n\");\n    return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });\n  }\n\n  private async signString(\n    stringToSign: string,\n    { signingDate = new Date(), signingRegion, signingService }: SigningArguments = {}\n  ): Promise<string> {\n    const credentials = await this.credentialProvider();\n    const region = signingRegion ?? (await this.regionProvider());\n    const { shortDate } = formatDate(signingDate);\n\n    const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));\n    hash.update(stringToSign);\n    return toHex(await hash.digest());\n  }\n\n  private async signRequest(\n    requestToSign: HttpRequest,\n    {\n      signingDate = new Date(),\n      signableHeaders,\n      unsignableHeaders,\n      signingRegion,\n      signingService,\n    }: RequestSigningArguments = {}\n  ): Promise<HttpRequest> {\n    const credentials = await this.credentialProvider();\n    const region = signingRegion ?? (await this.regionProvider());\n    const request = prepareRequest(requestToSign);\n    const { longDate, shortDate } = formatDate(signingDate);\n    const scope = createScope(shortDate, region, signingService ?? this.service);\n\n    request.headers[AMZ_DATE_HEADER] = longDate;\n    if (credentials.sessionToken) {\n      request.headers[TOKEN_HEADER] = credentials.sessionToken;\n    }\n\n    const payloadHash = await getPayloadHash(request, this.sha256);\n    if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {\n      request.headers[SHA256_HEADER] = payloadHash;\n    }\n\n    const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n    const signature = await this.getSignature(\n      longDate,\n      scope,\n      this.getSigningKey(credentials, region, shortDate, signingService),\n      this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n    );\n\n    request.headers[AUTH_HEADER] =\n      `${ALGORITHM_IDENTIFIER} ` +\n      `Credential=${credentials.accessKeyId}/${scope}, ` +\n      `SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, ` +\n      `Signature=${signature}`;\n\n    return request;\n  }\n\n  private createCanonicalRequest(request: HttpRequest, canonicalHeaders: HeaderBag, payloadHash: string): string {\n    const sortedHeaders = Object.keys(canonicalHeaders).sort();\n    return `${request.method}\n${this.getCanonicalPath(request)}\n${getCanonicalQuery(request)}\n${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join(\"\\n\")}\n\n${sortedHeaders.join(\";\")}\n${payloadHash}`;\n  }\n\n  private async createStringToSign(\n    longDate: string,\n    credentialScope: string,\n    canonicalRequest: string\n  ): Promise<string> {\n    const hash = new this.sha256();\n    hash.update(canonicalRequest);\n    const hashedRequest = await hash.digest();\n\n    return `${ALGORITHM_IDENTIFIER}\n${longDate}\n${credentialScope}\n${toHex(hashedRequest)}`;\n  }\n\n  private getCanonicalPath({ path }: HttpRequest): string {\n    if (this.uriEscapePath) {\n      const doubleEncoded = encodeURIComponent(path.replace(/^\\//, \"\"));\n      return `/${doubleEncoded.replace(/%2F/g, \"/\")}`;\n    }\n\n    return path;\n  }\n\n  private async getSignature(\n    longDate: string,\n    credentialScope: string,\n    keyPromise: Promise<Uint8Array>,\n    canonicalRequest: string\n  ): Promise<string> {\n    const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);\n\n    const hash = new this.sha256(await keyPromise);\n    hash.update(stringToSign);\n    return toHex(await hash.digest());\n  }\n\n  private getSigningKey(\n    credentials: Credentials,\n    region: string,\n    shortDate: string,\n    service?: string\n  ): Promise<Uint8Array> {\n    return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);\n  }\n}\n\nconst formatDate = (now: DateInput): { longDate: string; shortDate: string } => {\n  const longDate = iso8601(now).replace(/[\\-:]/g, \"\");\n  return {\n    longDate,\n    shortDate: longDate.substr(0, 8),\n  };\n};\n\nconst getCanonicalHeaderList = (headers: object): string => Object.keys(headers).sort().join(\";\");\n\nconst normalizeRegionProvider = (region: string | Provider<string>): Provider<string> => {\n  if (typeof region === \"string\") {\n    const promisified = Promise.resolve(region);\n    return () => promisified;\n  } else {\n    return region;\n  }\n};\n\nconst normalizeCredentialsProvider = (credentials: Credentials | Provider<Credentials>): Provider<Credentials> => {\n  if (typeof credentials === \"object\") {\n    const promisified = Promise.resolve(credentials);\n    return () => promisified;\n  } else {\n    return credentials;\n  }\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}