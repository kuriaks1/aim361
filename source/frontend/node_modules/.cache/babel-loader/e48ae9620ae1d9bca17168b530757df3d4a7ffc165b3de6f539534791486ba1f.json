{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IncreaseStreamRetentionPeriodInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand, serializeAws_json1_1IncreaseStreamRetentionPeriodCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Increases the Kinesis data stream's retention period, which is the length of time\n *             data records are accessible after they are added to the stream. The maximum value of a\n *             stream's retention period is 168 hours (7 days).</p>\n *         <p>If you choose a longer stream retention period, this operation increases the time\n *             period during which records that have not yet expired are accessible. However, it does\n *             not make previous, expired data (older than the stream's previous retention period)\n *             accessible after the operation has been called. For example, if a stream's retention\n *             period is set to 24 hours and is increased to 168 hours, any data that is older than 24\n *             hours remains inaccessible to consumer applications.</p>\n */\nvar IncreaseStreamRetentionPeriodCommand = /** @class */function (_super) {\n  __extends(IncreaseStreamRetentionPeriodCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function IncreaseStreamRetentionPeriodCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  IncreaseStreamRetentionPeriodCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"IncreaseStreamRetentionPeriodCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: IncreaseStreamRetentionPeriodInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  IncreaseStreamRetentionPeriodCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1IncreaseStreamRetentionPeriodCommand(input, context);\n  };\n  IncreaseStreamRetentionPeriodCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand(output, context);\n  };\n  return IncreaseStreamRetentionPeriodCommand;\n}($Command);\nexport { IncreaseStreamRetentionPeriodCommand };","map":{"version":3,"mappings":";AACA,SAASA,kCAAkC,QAAQ,oBAAoB;AACvE,SACEC,0DAA0D,EAC1DC,wDAAwD,QACnD,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;AAWA;EAA0DC;EAKxD;EACA;EAEA,8CAAqBC,KAAgD;IAArE;IACE;IACAC,iBAAO;IAFYC,WAAK,GAALF,KAAK;;IAGxB;EACF;EAEA;;;EAGAG,gEAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA0C,EAC1CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACZ,cAAc,CAACS,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,UAAM,GAAKF,aAAa,OAAlB;IACd,IAAMQ,UAAU,GAAG,eAAe;IAClC,IAAMC,WAAW,GAAG,sCAAsC;IAC1D,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM;MACNH,UAAU;MACVC,WAAW;MACXG,uBAAuB,EAAExB,kCAAkC,CAACyB,kBAAkB;MAC9EC,wBAAwB,EAAE,UAACC,MAAW;QAAK,aAAM;MAAN;KAC5C;IACO,kBAAc,GAAKf,aAAa,eAAlB;IACtB,OAAOM,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,qBAAc,CAACC,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxES,uBAAuB,CACxB;EACH,CAAC;EAEOZ,wDAAS,GAAjB,UAAkBH,KAAgD,EAAEwB,OAAuB;IACzF,OAAO7B,wDAAwD,CAACK,KAAK,EAAEwB,OAAO,CAAC;EACjF,CAAC;EAEOrB,0DAAW,GAAnB,UACEiB,MAAsB,EACtBI,OAAuB;IAEvB,OAAO9B,0DAA0D,CAAC0B,MAAM,EAAEI,OAAO,CAAC;EACpF,CAAC;EAIH,2CAAC;AAAD,CAAC,CAzDyD1B,QAAQ","names":["IncreaseStreamRetentionPeriodInput","deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand","serializeAws_json1_1IncreaseStreamRetentionPeriodCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","IncreaseStreamRetentionPeriodCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","output","resolve","request","handle","context"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-sdk/client-kinesis/commands/IncreaseStreamRetentionPeriodCommand.ts"],"sourcesContent":["import { KinesisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../KinesisClient\";\nimport { IncreaseStreamRetentionPeriodInput } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand,\n  serializeAws_json1_1IncreaseStreamRetentionPeriodCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type IncreaseStreamRetentionPeriodCommandInput = IncreaseStreamRetentionPeriodInput;\nexport type IncreaseStreamRetentionPeriodCommandOutput = __MetadataBearer;\n\n/**\n * <p>Increases the Kinesis data stream's retention period, which is the length of time\n *             data records are accessible after they are added to the stream. The maximum value of a\n *             stream's retention period is 168 hours (7 days).</p>\n *         <p>If you choose a longer stream retention period, this operation increases the time\n *             period during which records that have not yet expired are accessible. However, it does\n *             not make previous, expired data (older than the stream's previous retention period)\n *             accessible after the operation has been called. For example, if a stream's retention\n *             period is set to 24 hours and is increased to 168 hours, any data that is older than 24\n *             hours remains inaccessible to consumer applications.</p>\n */\nexport class IncreaseStreamRetentionPeriodCommand extends $Command<\n  IncreaseStreamRetentionPeriodCommandInput,\n  IncreaseStreamRetentionPeriodCommandOutput,\n  KinesisClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: IncreaseStreamRetentionPeriodCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: KinesisClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<IncreaseStreamRetentionPeriodCommandInput, IncreaseStreamRetentionPeriodCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"KinesisClient\";\n    const commandName = \"IncreaseStreamRetentionPeriodCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: IncreaseStreamRetentionPeriodInput.filterSensitiveLog,\n      outputFilterSensitiveLog: (output: any) => output,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: IncreaseStreamRetentionPeriodCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1IncreaseStreamRetentionPeriodCommand(input, context);\n  }\n\n  private deserialize(\n    output: __HttpResponse,\n    context: __SerdeContext\n  ): Promise<IncreaseStreamRetentionPeriodCommandOutput> {\n    return deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}