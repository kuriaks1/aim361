{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { API } from '@aws-amplify/api';\nimport { InternalAPI } from '@aws-amplify/api/internals';\nimport { Auth } from '@aws-amplify/auth';\nimport { AmplifyClass, Credentials, UniversalStorage } from '@aws-amplify/core';\nimport { DataStore } from '@aws-amplify/datastore';\n// ! We have to use this exact reference, since it gets mutated with Amplify.Auth\nimport { Amplify } from './index';\nvar requiredModules = [\n// API cannot function without Auth\nAuth,\n// Auth cannot function without Credentials\nCredentials];\n// These modules have been tested with SSR\nvar defaultModules = [API, Auth, DataStore];\nexport function withSSRContext(context) {\n  if (context === void 0) {\n    context = {};\n  }\n  var _a = context.modules,\n    modules = _a === void 0 ? defaultModules : _a,\n    req = context.req;\n  if (modules.includes(DataStore)) {\n    modules.push(InternalAPI);\n  }\n  var previousConfig = Amplify.configure();\n  var amplify = new AmplifyClass();\n  var storage = new UniversalStorage({\n    req: req\n  });\n  requiredModules.forEach(function (m) {\n    if (!modules.includes(m)) {\n      // @ts-ignore This expression is not constructable.\n      // Type 'Function' has no construct signatures.ts(2351)\n      amplify.register(new m.constructor());\n    }\n  });\n  // Associate new module instances with this amplify\n  modules.forEach(function (m) {\n    amplify.register(new m.constructor());\n  });\n  // Configure new Amplify instances with previous configuration\n  amplify.configure(__assign(__assign({}, previousConfig), {\n    storage: storage\n  }));\n  return amplify;\n}","map":{"version":3,"mappings":";AAAA;AACA;AACA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,WAAW,QAAQ,4BAA4B;AACxD,SAASC,IAAI,QAAQ,mBAAmB;AACxC,SAASC,YAAY,EAAEC,WAAW,EAAEC,gBAAgB,QAAQ,mBAAmB;AAC/E,SAASC,SAAS,QAAQ,wBAAwB;AAElD;AACA,SAASC,OAAO,QAAQ,SAAS;AAEjC,IAAMC,eAAe,GAAG;AACvB;AACAN,IAAI;AACJ;AACAE,WAAW,CACX;AAED;AACA,IAAMK,cAAc,GAAG,CAACT,GAAG,EAAEE,IAAI,EAAEI,SAAS,CAAC;AAO7C,OAAM,SAAUI,cAAcA,CAACC,OAAqB;EAArB;IAAAA,YAAqB;EAAA;EAC3C,wBAAwB;IAAxBC,6CAAwB;IAAEC,iBAAG;EACrC,IAAID,OAAO,CAACE,QAAQ,CAACR,SAAS,CAAC,EAAE;IAChCM,OAAO,CAACG,IAAI,CAACd,WAAW,CAAC;;EAE1B,IAAMe,cAAc,GAAGT,OAAO,CAACU,SAAS,EAAE;EAC1C,IAAMC,OAAO,GAAG,IAAIf,YAAY,EAAE;EAClC,IAAMgB,OAAO,GAAG,IAAId,gBAAgB,CAAC;IAAEQ,GAAG;EAAA,CAAE,CAAC;EAE7CL,eAAe,CAACY,OAAO,CAAC,WAAC;IACxB,IAAI,CAACR,OAAO,CAACE,QAAQ,CAACO,CAAC,CAAC,EAAE;MACzB;MACA;MACAH,OAAO,CAACI,QAAQ,CAAC,IAAID,CAAC,CAACE,WAAW,EAAE,CAAC;;EAEvC,CAAC,CAAC;EAEF;EACAX,OAAO,CAACQ,OAAO,CAAC,WAAC;IAChBF,OAAO,CAACI,QAAQ,CAAC,IAAID,CAAC,CAACE,WAAW,EAAE,CAAC;EACtC,CAAC,CAAC;EAEF;EACAL,OAAO,CAACD,SAAS,uBAAMD,cAAc;IAAEG,OAAO;EAAA,GAAG;EAEjD,OAAOD,OAAO;AACf","names":["API","InternalAPI","Auth","AmplifyClass","Credentials","UniversalStorage","DataStore","Amplify","requiredModules","defaultModules","withSSRContext","context","modules","req","includes","push","previousConfig","configure","amplify","storage","forEach","m","register","constructor"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/aws-amplify/src/withSSRContext.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { API } from '@aws-amplify/api';\nimport { InternalAPI } from '@aws-amplify/api/internals';\nimport { Auth } from '@aws-amplify/auth';\nimport { AmplifyClass, Credentials, UniversalStorage } from '@aws-amplify/core';\nimport { DataStore } from '@aws-amplify/datastore';\n\n// ! We have to use this exact reference, since it gets mutated with Amplify.Auth\nimport { Amplify } from './index';\n\nconst requiredModules = [\n\t// API cannot function without Auth\n\tAuth,\n\t// Auth cannot function without Credentials\n\tCredentials,\n];\n\n// These modules have been tested with SSR\nconst defaultModules = [API, Auth, DataStore];\n\ntype Context = {\n\treq?: any;\n\tmodules?: any[];\n};\n\nexport function withSSRContext(context: Context = {}) {\n\tconst { modules = defaultModules, req } = context;\n\tif (modules.includes(DataStore)) {\n\t\tmodules.push(InternalAPI);\n\t}\n\tconst previousConfig = Amplify.configure();\n\tconst amplify = new AmplifyClass();\n\tconst storage = new UniversalStorage({ req });\n\n\trequiredModules.forEach(m => {\n\t\tif (!modules.includes(m)) {\n\t\t\t// @ts-ignore This expression is not constructable.\n\t\t\t// Type 'Function' has no construct signatures.ts(2351)\n\t\t\tamplify.register(new m.constructor());\n\t\t}\n\t});\n\n\t// Associate new module instances with this amplify\n\tmodules.forEach(m => {\n\t\tamplify.register(new m.constructor());\n\t});\n\n\t// Configure new Amplify instances with previous configuration\n\tamplify.configure({ ...previousConfig, storage });\n\n\treturn amplify;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}