{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { runPolling } from \"./poller\";\nimport { validateWaiterOptions } from \"./utils\";\nimport { waiterServiceDefaults, WaiterState } from \"./waiter\";\nvar abortTimeout = function (abortSignal) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      return [2 /*return*/, new Promise(function (resolve) {\n        abortSignal.onabort = function () {\n          return resolve({\n            state: WaiterState.ABORTED\n          });\n        };\n      })];\n    });\n  });\n};\n/**\n * Create a waiter promise that only resolves when:\n * 1. Abort controller is signaled\n * 2. Max wait time is reached\n * 3. `acceptorChecks` succeeds, or fails\n * Otherwise, it invokes `acceptorChecks` with exponential-backoff delay.\n *\n * @internal\n */\nexport var createWaiter = function (options, input, acceptorChecks) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var params, exitConditions;\n    return __generator(this, function (_a) {\n      params = __assign(__assign({}, waiterServiceDefaults), options);\n      validateWaiterOptions(params);\n      exitConditions = [runPolling(params, input, acceptorChecks)];\n      if (options.abortController) {\n        exitConditions.push(abortTimeout(options.abortController.signal));\n      }\n      return [2 /*return*/, Promise.race(exitConditions)];\n    });\n  });\n};","map":{"version":3,"mappings":";AAEA,SAASA,UAAU,QAAQ,UAAU;AACrC,SAASC,qBAAqB,QAAQ,SAAS;AAC/C,SAAsCC,qBAAqB,EAAEC,WAAW,QAAQ,UAAU;AAE1F,IAAMC,YAAY,GAAG,UAAOC,WAAwB;EAAA;;MAClD,sBAAO,IAAIC,OAAO,CAAC,UAACC,OAAO;QACzBF,WAAW,CAACG,OAAO,GAAG;UAAM,cAAO,CAAC;YAAEC,KAAK,EAAEN,WAAW,CAACO;UAAO,CAAE,CAAC;QAAvC,CAAuC;MACrE,CAAC,CAAC;;;CACH;AAED;;;;;;;;;AASA,OAAO,IAAMC,YAAY,GAAG,UAC1BC,OAA8B,EAC9BC,KAAY,EACZC,cAAuE;EAAA;;;MAEjEC,MAAM,yBACPb,qBAAqB,GACrBU,OAAO,CACX;MACDX,qBAAqB,CAACc,MAAM,CAAC;MAEvBC,cAAc,GAAG,CAAChB,UAAU,CAAgBe,MAAM,EAAEF,KAAK,EAAEC,cAAc,CAAC,CAAC;MACjF,IAAIF,OAAO,CAACK,eAAe,EAAE;QAC3BD,cAAc,CAACE,IAAI,CAACd,YAAY,CAACQ,OAAO,CAACK,eAAe,CAACE,MAAM,CAAC,CAAC;;MAEnE,sBAAOb,OAAO,CAACc,IAAI,CAACJ,cAAc,CAAC;;;CACpC","names":["runPolling","validateWaiterOptions","waiterServiceDefaults","WaiterState","abortTimeout","abortSignal","Promise","resolve","onabort","state","ABORTED","createWaiter","options","input","acceptorChecks","params","exitConditions","abortController","push","signal","race"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-sdk/util-waiter/src/createWaiter.ts"],"sourcesContent":["import { AbortSignal } from \"@aws-sdk/types\";\n\nimport { runPolling } from \"./poller\";\nimport { validateWaiterOptions } from \"./utils\";\nimport { WaiterOptions, WaiterResult, waiterServiceDefaults, WaiterState } from \"./waiter\";\n\nconst abortTimeout = async (abortSignal: AbortSignal): Promise<WaiterResult> => {\n  return new Promise((resolve) => {\n    abortSignal.onabort = () => resolve({ state: WaiterState.ABORTED });\n  });\n};\n\n/**\n * Create a waiter promise that only resolves when:\n * 1. Abort controller is signaled\n * 2. Max wait time is reached\n * 3. `acceptorChecks` succeeds, or fails\n * Otherwise, it invokes `acceptorChecks` with exponential-backoff delay.\n *\n * @internal\n */\nexport const createWaiter = async <Client, Input>(\n  options: WaiterOptions<Client>,\n  input: Input,\n  acceptorChecks: (client: Client, input: Input) => Promise<WaiterResult>\n): Promise<WaiterResult> => {\n  const params = {\n    ...waiterServiceDefaults,\n    ...options,\n  };\n  validateWaiterOptions(params);\n\n  const exitConditions = [runPolling<Client, Input>(params, input, acceptorChecks)];\n  if (options.abortController) {\n    exitConditions.push(abortTimeout(options.abortController.signal));\n  }\n  return Promise.race(exitConditions);\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}