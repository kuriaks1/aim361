{"ast":null,"code":"var _jsxFileName = \"/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT.\n\nimport './App.css';\nimport '@aws-amplify/ui-react/styles.css';\nimport React, { useState, useEffect } from 'react';\nimport { Button, withAuthenticator } from '@aws-amplify/ui-react';\nimport { Amplify, Auth } from 'aws-amplify';\nimport { API_GATEWAY_URL } from './config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fileToB64 = file => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.readAsBinaryString(file);\n  reader.onload = () => resolve(btoa(reader.result));\n  reader.onerror = reject;\n});\nfunction App(_ref) {\n  _s();\n  let {\n    signOut,\n    user\n  } = _ref;\n  const [modelSelected, setModelSelected] = useState('Anthropic: Claude');\n  const [inputText, setInputText] = useState(\"\");\n  const [responseText, setResponseText] = useState(\"\");\n  const [imageResponse, setImageResponse] = useState(null);\n  const [imageResponseImg, setImageResponseImg] = useState(\"\");\n  const [isBuffering, setIsBuffering] = useState(false);\n  const [isBufferingLanguage, setIsBufferingLanguage] = useState(false);\n  const [languageResponse, setLanguageResponse] = useState(\"\");\n  const [translationQueue, setTranslationQueue] = useState([]);\n  const [languageSelected, setLanguageSelected] = useState(\"English\");\n  const [demoSelected, setDemoSelected] = useState(\"Image\");\n  const [userInputPrompt, setUserInputPrompt] = useState('');\n  const [imageBlob, setImageBlob] = useState('');\n  const [userInputEnhance, setUserInputEnhance] = useState('');\n  const [enhanceResponse, setEnhanceResponse] = useState('');\n  const [authData, setAuthData] = useState({});\n  async function getSession() {\n    try {\n      const getAuth = await Auth.currentSession();\n      console.log(getAuth);\n      console.log(getAuth.idToken.jwtToken);\n      setAuthData(getAuth.idToken.jwtToken);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  useEffect(() => {\n    getSession();\n  }, []);\n  const handleImageFormSubmit = event => {\n    event.preventDefault();\n    setIsBuffering(true);\n    fileToB64(event.target.files[0]).then(b64 => fetch(API_GATEWAY_URL + \"/bedrock\", {\n      // /call-rekognition-api\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${authData}`\n      },\n      body: JSON.stringify({\n        'image': b64,\n        'endpoint': '/api/call-rekognition-api'\n      })\n    })).then(response => response.json()).then(data => {\n      console.log(JSON.parse(data.body).labels);\n      // console.log(data.labels)\n      setImageResponse(URL.createObjectURL(event.target.files[0]));\n      const output = JSON.parse(data.body).labels.join(\" \");\n      setInputText(`Build me a product Description for ${output}`);\n      let payload = {\n        modelId: 'anthropic.claude-instant-v1',\n        contentType: 'application/json',\n        accept: '*/*',\n        endpoint: '/api/conversation/predict-claude',\n        body: JSON.stringify({\n          prompt: `Build me a product Description using 120 words or less. Here is additional information about the product photograph ${output}`,\n          max_tokens_to_sample: 300,\n          temperature: 0.5,\n          top_k: 250,\n          top_p: 1,\n          stop_sequences: ['\\n\\nHuman:']\n        })\n      };\n      fetch(API_GATEWAY_URL + '/bedrock', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          \"Authorization\": `Bearer ${authData}`\n        },\n        body: JSON.stringify(payload)\n      }).then(response => response.json()).then(data => {\n        setResponseText(JSON.parse(data.body));\n        handleTranslations(JSON.parse(data.body));\n      }).catch(error => console.error(\"Error:\", error)).finally(setTimeout(function () {\n        setIsBuffering(false);\n      }, 2000));\n    }).catch(error => console.error(\"Error:\", error));\n  };\n  const base64ToBlob = function (base64Data) {\n    let contentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"image/jpeg\";\n    const byteCharacters = atob(base64Data);\n    const byteArrays = [];\n    for (let offset = 0; offset < byteCharacters.length; offset += 512) {\n      const slice = byteCharacters.slice(offset, offset + 512);\n      const byteNumbers = new Array(slice.length);\n      for (let i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n      const byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n    return new Blob(byteArrays, {\n      type: contentType\n    });\n  };\n  const handleImageFormSubmitPrompt = blob => {\n    setIsBuffering(true);\n    setLanguageResponse(\"\");\n    fetch(API_GATEWAY_URL + '/bedrock', {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${authData}`\n      },\n      body: JSON.stringify({\n        'image': blob,\n        'endpoint': \"/api/call-rekognition-api\"\n      })\n    }).then(response => response.json()).then(data => {\n      const output = JSON.parse(data.body).labels.join(\" \");\n      setInputText(`Build me a product Description for ${output}`);\n      let payload = {\n        modelId: 'anthropic.claude-instant-v1',\n        contentType: 'application/json',\n        endpoint: '/api/conversation/predict-claude',\n        accept: '*/*',\n        body: JSON.stringify({\n          prompt: `Build me a product Description using 120 words or less. Here is additional information about the product photograph ${output}`,\n          max_tokens_to_sample: 300,\n          temperature: 0.5,\n          top_k: 250,\n          top_p: 1,\n          stop_sequences: ['\\n\\nHuman:']\n        })\n      };\n      fetch(API_GATEWAY_URL + '/bedrock', {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${authData}`\n        },\n        body: JSON.stringify(payload)\n      }).then(response => response.json()).then(data => {\n        setResponseText(JSON.parse(data.body));\n        handleTranslations(JSON.parse(data.body));\n      }).catch(error => console.error(\"Error:\", error)).finally(setIsBuffering(false));\n    }).catch(error => console.error(\"Error:\", error));\n  };\n  const handleImageChange = event => {\n    setLanguageResponse(\"\");\n    setLanguageSelected(\"English\");\n    const imageFile = event.target.files[0];\n    if (imageFile) {\n      handleImageFormSubmit(event);\n    }\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    setIsBuffering(true);\n    setLanguageResponse(\"\");\n    setImageResponseImg(\"\");\n    const payload = {\n      \"modelId\": \"stability.stable-diffusion-xl\",\n      \"contentType\": \"application/json\",\n      \"accept\": \"application/json\",\n      'endpoint': \"/api/call-stablediffusion\",\n      \"body\": JSON.stringify({\n        \"text_prompts\": [{\n          \"text\": userInputPrompt\n        }],\n        \"cfg_scale\": 10,\n        \"seed\": 0,\n        \"steps\": 50\n      })\n    };\n    fetch(API_GATEWAY_URL + '/bedrock', {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${authData}`\n      },\n      body: JSON.stringify(payload)\n    }).then(response => response.json()).then(data => {\n      if (JSON.parse(data.body).result === \"success\" && JSON.parse(data.body).artifacts.length > 0) {\n        const base64Data = JSON.parse(data.body).artifacts[0].base64;\n        const imageUrl = \"data:image/jpeg;base64,\" + base64Data;\n        setImageResponseImg( /*#__PURE__*/_jsxDEV(\"img\", {\n          src: imageUrl,\n          alt: \"Generated Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 41\n        }, this));\n        setImageBlob(base64Data);\n        handleImageFormSubmitPrompt(base64Data);\n      } else {\n        setImageResponseImg(\"Image API failed to generate the image.\");\n      }\n    })\n    // .catch(() => {\n    //   setImageResponseImg(\"Image API request failed.\");\n    // })\n    .finally(() => {\n      setIsBuffering(false);\n    });\n  };\n  const sendMessageEnhance = () => {\n    setIsBuffering(true);\n    setEnhanceResponse('');\n    let payload = {\n      modelId: 'anthropic.claude-instant-v1',\n      contentType: 'application/json',\n      endpoint: '/api/conversation/predict-claude',\n      accept: '*/*',\n      body: JSON.stringify({\n        prompt: `I will be listing a product on my eCommerce Marketplace. Make the following product description better: ${userInputEnhance}`,\n        max_tokens_to_sample: 300,\n        temperature: 0.5,\n        top_k: 250,\n        top_p: 1,\n        stop_sequences: ['\\n\\nHuman:']\n      })\n    };\n\n    // setUserInput('');\n    fetch(API_GATEWAY_URL + '/bedrock', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": `Bearer ${authData}`\n      },\n      body: JSON.stringify(payload)\n    }).then(response => response.json()).then(response => {\n      setEnhanceResponse(JSON.parse(response.body));\n    }).catch(error => {\n      console.error('Error:', error);\n    }).finally(() => {\n      setIsBuffering(false);\n    });\n  };\n  const handleTranslations = description => {\n    setIsBufferingLanguage(true);\n    let languages = ['Spanish', 'French', 'German'];\n    let payload = {\n      prompt: '',\n      maxTokens: 200,\n      temperature: 0.5,\n      topP: 0.5,\n      stopSequences: [],\n      countPenalty: {\n        scale: 0\n      },\n      presencePenalty: {\n        scale: 0\n      },\n      frequencyPenalty: {\n        scale: 0\n      }\n    };\n    let response_container = [{\n      'Language': 'English',\n      'Description': description\n    }];\n    setLanguageResponse(response_container);\n    let newQueue = [];\n    for (let i = 0; i < languages.length; i++) {\n      payload.prompt = `Translate this to ${languages[i]}: ${description}`;\n      callai21(languages[i], payload);\n    }\n\n    // setTranslationQueue((prevQueue) => [...prevQueue, ...newQueue]);\n    processTranslationQueue();\n  };\n  const processTranslationQueue = () => {\n    if (translationQueue.length > 0) {\n      const nextRequest = translationQueue[0];\n      setTranslationQueue(prevQueue => prevQueue.slice(1));\n      nextRequest.then(response => {\n        console.log(response);\n      }).catch(error => {\n        console.error('Error:', error);\n      }).finally(() => {\n        processTranslationQueue();\n      });\n    } else {\n      setIsBufferingLanguage(false);\n    }\n  };\n  const callai21 = async (language, payload) => {\n    // setIsBufferingLanguage(true);\n    console.log('payload in callai21 start:');\n    console.log(payload);\n    payload['endpoint'] = '/api/conversation/predict-ai21';\n    console.log('payload in callai21 end');\n    console.log('');\n    try {\n      const response = await fetch(API_GATEWAY_URL + '/bedrock', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          \"Authorization\": `Bearer ${authData}`\n        },\n        body: JSON.stringify(payload)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const responseData = await response.json();\n      const botResponse = JSON.parse(responseData.body).output_text;\n      console.log(language);\n      console.log(botResponse);\n      setLanguageResponse(prevLanguageResponse => [...prevLanguageResponse, {\n        'Language': language,\n        'Description': botResponse\n      }]);\n    } catch (error) {\n      console.error('Error:', error);\n    } finally {\n      setIsBufferingLanguage(false);\n      setIsBuffering(false);\n    }\n  };\n  const getSelectedDescription = () => {\n    for (let i = 0; i < languageResponse.length; i++) {\n      if (languageResponse[i].Language == languageSelected) {\n        return languageResponse[i].Description;\n      }\n    }\n  };\n  const handleDemoSelection = demo => {\n    setResponseText('');\n    setDemoSelected(demo);\n    setLanguageResponse('');\n    setImageResponseImg('');\n    setLanguageSelected('English');\n    setEnhanceResponse('');\n    setUserInputPrompt('');\n    setUserInputEnhance('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"ContentSection\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Contents\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Building Product Descriptions with Amazon Bedrock\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Demos\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"DemoOptions\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: demoSelected == 'Image' ? \"active\" : \"inactive\",\n            onClick: () => handleDemoSelection('Image'),\n            children: \"Create Product Description from Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: demoSelected == 'Prompt' ? \"active\" : \"inactive\",\n            onClick: () => handleDemoSelection('Prompt'),\n            children: \"Create Image and Description from Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: demoSelected == 'Enhance' ? \"active\" : \"inactive\",\n            onClick: () => handleDemoSelection('Enhance'),\n            children: \"Enhance a Product Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 21\n      }, this), demoSelected === 'Image' && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleImageFormSubmit,\n        encType: \"multipart/form-data\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"imageUpload\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"imageUpload\",\n            name: \"imageUpload\",\n            accept: \"image/*\",\n            required: true,\n            onChange: handleImageChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 25\n      }, this), demoSelected === 'Prompt' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-input-product\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: userInputPrompt,\n          onChange: e => setUserInputPrompt(e.target.value),\n          placeholder: \"Provide description of product and hit send to generate an image and product description of that image...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleSubmit,\n          disabled: isBuffering,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 25\n      }, this), demoSelected === 'Enhance' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-input-product\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: userInputEnhance,\n          onChange: e => setUserInputEnhance(e.target.value),\n          placeholder: \"Provide product description and hit send to enhance the product description with Claude...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: sendMessageEnhance,\n          disabled: isBuffering,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 25\n      }, this), responseText !== '' && demoSelected !== 'Prompt' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ImageLabel\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"imageResponse\",\n          children: imageResponse && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: imageResponse,\n            alt: \"Uploaded Image\",\n            style: {\n              maxWidth: \"500px\",\n              maxHeight: \"500px\",\n              display: \"block\",\n              margin: \"0 auto\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 25\n      }, this), imageResponseImg !== '' && demoSelected !== 'Image' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ImageLabel\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"imageResponse\",\n          children: imageResponseImg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 25\n      }, this), isBuffering && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dots\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 25\n      }, this), isBufferingLanguage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dots\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Translations\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"TranslationOptions\",\n          children: languageResponse !== \"\" && languageResponse.map(response => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: response.Language == languageSelected ? \"active\" : \"inactive\",\n            onClick: () => setLanguageSelected(response.Language),\n            children: response.Language\n          }, response.Language, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ProductDesc\",\n          style: {\n            display: languageResponse !== \"\" ? 'initial' : 'none'\n          },\n          children: \"Product Description:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ProductDescription\",\n          children: [languageResponse !== \"\" && getSelectedDescription(), enhanceResponse !== '' && enhanceResponse]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 404,\n    columnNumber: 13\n  }, this);\n}\n_s(App, \"EI8ffOrwLBCW8j97kRquuEjqdP0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Button","withAuthenticator","Amplify","Auth","API_GATEWAY_URL","jsxDEV","_jsxDEV","fileToB64","file","Promise","resolve","reject","reader","FileReader","readAsBinaryString","onload","btoa","result","onerror","App","_ref","_s","signOut","user","modelSelected","setModelSelected","inputText","setInputText","responseText","setResponseText","imageResponse","setImageResponse","imageResponseImg","setImageResponseImg","isBuffering","setIsBuffering","isBufferingLanguage","setIsBufferingLanguage","languageResponse","setLanguageResponse","translationQueue","setTranslationQueue","languageSelected","setLanguageSelected","demoSelected","setDemoSelected","userInputPrompt","setUserInputPrompt","imageBlob","setImageBlob","userInputEnhance","setUserInputEnhance","enhanceResponse","setEnhanceResponse","authData","setAuthData","getSession","getAuth","currentSession","console","log","idToken","jwtToken","error","handleImageFormSubmit","event","preventDefault","target","files","then","b64","fetch","method","headers","body","JSON","stringify","response","json","data","parse","labels","URL","createObjectURL","output","join","payload","modelId","contentType","accept","endpoint","prompt","max_tokens_to_sample","temperature","top_k","top_p","stop_sequences","handleTranslations","catch","finally","setTimeout","base64ToBlob","base64Data","arguments","length","undefined","byteCharacters","atob","byteArrays","offset","slice","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","push","Blob","type","handleImageFormSubmitPrompt","blob","handleImageChange","imageFile","handleSubmit","artifacts","base64","imageUrl","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","sendMessageEnhance","description","languages","maxTokens","topP","stopSequences","countPenalty","scale","presencePenalty","frequencyPenalty","response_container","newQueue","callai21","processTranslationQueue","nextRequest","prevQueue","language","ok","Error","status","responseData","botResponse","output_text","prevLanguageResponse","getSelectedDescription","Language","Description","handleDemoSelection","demo","id","children","className","onClick","onSubmit","encType","htmlFor","name","required","onChange","value","e","placeholder","disabled","style","maxWidth","maxHeight","display","margin","map","_c","$RefreshReg$"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/src/App.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT.\n\nimport './App.css';\nimport '@aws-amplify/ui-react/styles.css';\nimport React, { useState, useEffect } from 'react';\nimport { Button, withAuthenticator } from '@aws-amplify/ui-react';\nimport { Amplify, Auth } from 'aws-amplify';\n\nimport { API_GATEWAY_URL } from './config';\n\nconst fileToB64 = file => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsBinaryString(file);\n    reader.onload = () => resolve(btoa(reader.result));\n    reader.onerror = reject;\n});\n\n\nfunction App({ signOut, user }) {\n    const [modelSelected, setModelSelected] = useState('Anthropic: Claude');\n    const [inputText, setInputText] = useState(\"\");\n    const [responseText, setResponseText] = useState(\"\");\n    const [imageResponse, setImageResponse] = useState(null);\n    const [imageResponseImg, setImageResponseImg] = useState(\"\");\n    const [isBuffering, setIsBuffering] = useState(false)\n    const [isBufferingLanguage, setIsBufferingLanguage] = useState(false)\n    const [languageResponse, setLanguageResponse] = useState(\"\");\n    const [translationQueue, setTranslationQueue] = useState([]);\n    const [languageSelected, setLanguageSelected] = useState(\"English\");\n    const [demoSelected, setDemoSelected] = useState(\"Image\");\n    const [userInputPrompt, setUserInputPrompt] = useState('');\n    const [imageBlob, setImageBlob] = useState('');\n    const [userInputEnhance, setUserInputEnhance] = useState('');\n    const [enhanceResponse, setEnhanceResponse] = useState('');\n    const [authData, setAuthData] = useState({})\n\n    async function getSession() {\n        try {\n          const getAuth = await Auth.currentSession();\n          console.log(getAuth);\n          console.log(getAuth.idToken.jwtToken)\n            setAuthData(getAuth.idToken.jwtToken)\n        } catch (error) {\n          console.log(error);\n        }\n      }\n      \n      \n\n    useEffect(() => {\n        getSession();\n        \n    }, [])\n\n    const handleImageFormSubmit = (event) => {\n        event.preventDefault();\n        setIsBuffering(true)\n        fileToB64(event.target.files[0])\n            .then((b64) => fetch(API_GATEWAY_URL +\"/bedrock\", { \n                // /call-rekognition-api\n            method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${authData}`\n                },\n                body: JSON.stringify({'image': b64, 'endpoint': '/api/call-rekognition-api'}),\n        })\n            )\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(JSON.parse(data.body).labels)\n                // console.log(data.labels)\n                setImageResponse(URL.createObjectURL(event.target.files[0]));\n                const output = JSON.parse(data.body).labels.join(\" \");\n                setInputText(`Build me a product Description for ${output}`);\n                let payload = {\n                    modelId: 'anthropic.claude-instant-v1',\n                    contentType: 'application/json',\n                    accept: '*/*',\n                    endpoint: '/api/conversation/predict-claude',\n                    body: JSON.stringify({\n                        prompt: `Build me a product Description using 120 words or less. Here is additional information about the product photograph ${output}`,\n                        max_tokens_to_sample: 300,\n                        temperature: 0.5,\n                        top_k: 250,\n                        top_p: 1,\n                        stop_sequences: ['\\n\\nHuman:']\n                    }),\n                };\n                fetch(API_GATEWAY_URL + '/bedrock', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        \"Authorization\": `Bearer ${authData}`\n                    },\n                    body: JSON.stringify(payload)\n                })\n                    .then((response) => response.json())\n                    .then((data) => {\n                        \n                        setResponseText(JSON.parse(data.body))\n                        handleTranslations(JSON.parse(data.body))\n                    }\n                    )\n                    .catch((error) => console.error(\"Error:\", error))\n                    .finally(\n                        setTimeout(function () {\n                            setIsBuffering(false)\n                        }, 2000)\n                    )\n            })\n            .catch((error) => console.error(\"Error:\", error))\n\n    };\n\n    const base64ToBlob = (base64Data, contentType = \"image/jpeg\") => {\n        const byteCharacters = atob(base64Data);\n        const byteArrays = [];\n\n        for (let offset = 0; offset < byteCharacters.length; offset += 512) {\n            const slice = byteCharacters.slice(offset, offset + 512);\n\n            const byteNumbers = new Array(slice.length);\n            for (let i = 0; i < slice.length; i++) {\n                byteNumbers[i] = slice.charCodeAt(i);\n            }\n\n            const byteArray = new Uint8Array(byteNumbers);\n            byteArrays.push(byteArray);\n        }\n\n        return new Blob(byteArrays, { type: contentType });\n    };\n\n    const handleImageFormSubmitPrompt = (blob) => {\n        setIsBuffering(true)\n        setLanguageResponse(\"\")\n        fetch(API_GATEWAY_URL + '/bedrock', {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${authData}`\n            },\n            body: JSON.stringify({'image': blob, 'endpoint': \"/api/call-rekognition-api\"}),\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                const output = JSON.parse(data.body).labels.join(\" \");\n                setInputText(`Build me a product Description for ${output}`);\n                let payload = {\n                    modelId: 'anthropic.claude-instant-v1',\n                    contentType: 'application/json',\n                    endpoint: '/api/conversation/predict-claude',\n                    accept: '*/*',\n                    body: JSON.stringify({\n                        prompt: `Build me a product Description using 120 words or less. Here is additional information about the product photograph ${output}`,\n                        max_tokens_to_sample: 300,\n                        temperature: 0.5,\n                        top_k: 250,\n                        top_p: 1,\n                        stop_sequences: ['\\n\\nHuman:']\n                    }),\n                };\n                fetch(API_GATEWAY_URL + '/bedrock', {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": `Bearer ${authData}`\n                    },\n                    body: JSON.stringify(payload),\n                })\n                    .then((response) => response.json())\n                    .then((data) => {\n                        setResponseText(JSON.parse(data.body))\n                        handleTranslations(JSON.parse(data.body))\n                    })\n                    .catch((error) => console.error(\"Error:\", error))\n                    .finally(\n                        setIsBuffering(false)\n                    )\n            })\n            .catch((error) => console.error(\"Error:\", error))\n\n    };\n\n    const handleImageChange = (event) => {\n        setLanguageResponse(\"\")\n        setLanguageSelected(\"English\")\n        const imageFile = event.target.files[0];\n        if (imageFile) {\n            handleImageFormSubmit(event);\n        }\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        setIsBuffering(true);\n        setLanguageResponse(\"\")\n        setImageResponseImg(\"\")\n        const payload = {\n            \"modelId\": \"stability.stable-diffusion-xl\",\n            \"contentType\": \"application/json\",\n            \"accept\": \"application/json\",\n            'endpoint': \"/api/call-stablediffusion\",\n            \"body\": JSON.stringify({\n                \"text_prompts\": [\n                    { \"text\": userInputPrompt }\n                ],\n                \"cfg_scale\": 10,\n                \"seed\": 0,\n                \"steps\": 50\n            })\n        };\n\n        fetch(API_GATEWAY_URL+'/bedrock', {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${authData}`\n            },\n            body: JSON.stringify(payload)\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (JSON.parse(data.body).result === \"success\" && JSON.parse(data.body).artifacts.length > 0) {\n                    const base64Data = JSON.parse(data.body).artifacts[0].base64;\n                    const imageUrl = \"data:image/jpeg;base64,\" + base64Data;\n                    setImageResponseImg(<img src={imageUrl} alt=\"Generated Image\" />);\n\n                    setImageBlob(base64Data);\n                    handleImageFormSubmitPrompt(base64Data);\n                } else {\n                    setImageResponseImg(\"Image API failed to generate the image.\");\n                }\n            })\n            // .catch(() => {\n            //   setImageResponseImg(\"Image API request failed.\");\n            // })\n            .finally(() => {\n                setIsBuffering(false)\n            });\n    };\n\n    const sendMessageEnhance = () => {\n        setIsBuffering(true);\n        setEnhanceResponse('')\n\n        let payload = {\n            modelId: 'anthropic.claude-instant-v1',\n            contentType: 'application/json',\n            endpoint: '/api/conversation/predict-claude',\n            accept: '*/*',\n            body: JSON.stringify({\n                prompt: `I will be listing a product on my eCommerce Marketplace. Make the following product description better: ${userInputEnhance}`,\n                max_tokens_to_sample: 300,\n                temperature: 0.5,\n                top_k: 250,\n                top_p: 1,\n                stop_sequences: ['\\n\\nHuman:']\n            }),\n        };\n\n        // setUserInput('');\n        fetch(API_GATEWAY_URL +'/bedrock', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Authorization\": `Bearer ${authData}`\n            },\n            body: JSON.stringify(payload)\n        })\n            .then(response => response.json())\n            .then(response => {\n                setEnhanceResponse(JSON.parse(response.body))\n            })\n            .catch(error => {\n                console.error('Error:', error);\n            }).finally(() => {\n                setIsBuffering(false)\n            });\n    };\n\n    const handleTranslations = (description) => {\n        setIsBufferingLanguage(true);\n\n        let languages = ['Spanish', 'French', 'German'];\n\n        let payload = {\n            prompt: '',\n            maxTokens: 200,\n            temperature: 0.5,\n            topP: 0.5,\n            stopSequences: [],\n            countPenalty: { scale: 0 },\n            presencePenalty: { scale: 0 },\n            frequencyPenalty: { scale: 0 }\n        };\n\n        let response_container = [\n            {\n                'Language': 'English',\n                'Description': description\n            }\n        ];\n        setLanguageResponse(response_container)\n        let newQueue = [];\n\n        for (let i = 0; i < languages.length; i++) {\n            payload.prompt = `Translate this to ${languages[i]}: ${description}`;\n            \n            callai21(languages[i], payload)\n        }\n\n        // setTranslationQueue((prevQueue) => [...prevQueue, ...newQueue]);\n        processTranslationQueue();\n    };\n\n    const processTranslationQueue = () => {\n        if (translationQueue.length > 0) {\n            const nextRequest = translationQueue[0];\n\n            setTranslationQueue((prevQueue) => prevQueue.slice(1));\n\n            nextRequest\n                .then((response) => {\n                    console.log(response);\n                })\n                .catch((error) => {\n                    console.error('Error:', error);\n                })\n                .finally(() => {\n                    processTranslationQueue();\n                });\n        } else {\n            setIsBufferingLanguage(false);\n        }\n    };\n\n    const callai21 = async (language, payload) => {\n        // setIsBufferingLanguage(true);\n        console.log('payload in callai21 start:');\n        console.log(payload);\n        payload['endpoint'] = '/api/conversation/predict-ai21'\n        console.log('payload in callai21 end');\n        console.log('');\n    \n        try {\n            const response = await fetch(API_GATEWAY_URL+'/bedrock', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    \"Authorization\": `Bearer ${authData}`\n                },\n                body: JSON.stringify(payload)\n            });\n    \n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n    \n            const responseData = await response.json();\n            const botResponse = JSON.parse(responseData.body).output_text;\n            console.log(language);\n            console.log(botResponse);\n    \n            setLanguageResponse(prevLanguageResponse => [\n                ...prevLanguageResponse,\n                {\n                    'Language': language,\n                    'Description': botResponse\n                }\n            ]);\n        } catch (error) {\n            console.error('Error:', error);\n        } finally {\n            setIsBufferingLanguage(false);\n            setIsBuffering(false)\n        }\n    };\n\n\n    const getSelectedDescription = () => {\n        for (let i = 0; i < languageResponse.length; i++) {\n            if (languageResponse[i].Language == languageSelected) {\n                return languageResponse[i].Description\n            }\n        }\n    }\n\n    const handleDemoSelection = (demo) => {\n        setResponseText('')\n        setDemoSelected(demo)\n        setLanguageResponse('')\n        setImageResponseImg('')\n        setLanguageSelected('English')\n        setEnhanceResponse('')\n        setUserInputPrompt('')\n        setUserInputEnhance('')\n    }\n\n    return (\n        \n            <div id=\"ContentSection\">\n                <div className=\"Contents\">\n                    <h1>Building Product Descriptions with Amazon Bedrock</h1>\n                    <div className=\"Demos\">\n                        <div className=\"DemoOptions\">\n                            <span className={demoSelected == 'Image' ? \"active\" : \"inactive\"}\n                                onClick={() => handleDemoSelection('Image')}>\n                                Create Product Description from Image\n                            </span>\n                            <span className={demoSelected == 'Prompt' ? \"active\" : \"inactive\"}\n                                onClick={() => handleDemoSelection('Prompt')}>\n                                Create Image and Description from Text\n                            </span>\n                            <span className={demoSelected == 'Enhance' ? \"active\" : \"inactive\"}\n                                onClick={() => handleDemoSelection('Enhance')}>\n                                Enhance a Product Description\n                            </span>\n                        </div>\n                    </div>\n                    {demoSelected === 'Image' &&\n                        <form onSubmit={handleImageFormSubmit} encType=\"multipart/form-data\">\n                            <label htmlFor=\"imageUpload\">\n                                <input\n                                    type=\"file\"\n                                    id=\"imageUpload\"\n                                    name=\"imageUpload\"\n                                    accept=\"image/*\"\n                                    required\n                                    onChange={handleImageChange}\n                                />\n                            </label>\n                        </form>\n                    }\n                    {demoSelected === 'Prompt' &&\n                        <div className=\"user-input-product\">\n                            <textarea\n                                value={userInputPrompt}\n                                onChange={(e) => setUserInputPrompt(e.target.value)}\n                                placeholder=\"Provide description of product and hit send to generate an image and product description of that image...\"\n                            />\n                            <button type=\"button\" onClick={handleSubmit} disabled={isBuffering}>Send</button>\n                        </div>\n                    }\n                    {demoSelected === 'Enhance' &&\n                        <div className=\"user-input-product\">\n                            <textarea\n                                value={userInputEnhance}\n                                onChange={(e) => setUserInputEnhance(e.target.value)}\n                                placeholder=\"Provide product description and hit send to enhance the product description with Claude...\"\n                            />\n                            <button type=\"button\" onClick={sendMessageEnhance} disabled={isBuffering}>Send</button>\n                        </div>\n                    }\n\n                    {responseText !== '' && demoSelected !== 'Prompt' &&\n                        <div className=\"ImageLabel\">\n                            <div id=\"imageResponse\">\n                                {imageResponse && (\n                                    <img src={imageResponse} alt=\"Uploaded Image\" style={{ maxWidth: \"500px\", maxHeight: \"500px\", display: \"block\", margin: \"0 auto\" }} />\n                                )}\n                            </div>\n                        </div>\n                    }\n                    {imageResponseImg !== '' && demoSelected !== 'Image' &&\n                        <div className=\"ImageLabel\">\n                            <div id=\"imageResponse\">{imageResponseImg}</div>\n                        </div>\n                    }\n\n                    {isBuffering &&\n                        <div className=\"dots\">\n                            <div className=\"dot\"></div>\n                            <div className=\"dot\"></div>\n                            <div className=\"dot\"></div>\n                        </div>\n                    }\n                    {isBufferingLanguage &&\n                        <div className=\"dots\">\n                            <div className=\"dot\"></div>\n                            <div className=\"dot\"></div>\n                            <div className=\"dot\"></div>\n                        </div>\n                    }\n\n                    <div className=\"Translations\">\n                    <div className=\"TranslationOptions\">\n                    {languageResponse !== \"\" &&\n                        languageResponse.map((response) => (\n                            \n                                    <span\n                                        className={response.Language == languageSelected ? \"active\" : \"inactive\"}\n                                        key={response.Language}\n                                        onClick={() => setLanguageSelected(response.Language)}\n                                    >\n                                        {response.Language}\n                                    </span>\n                                    ))}\n                                </div>\n                                \n                                <span className=\"ProductDesc\" style={{ display: languageResponse !== \"\" ? 'initial':'none'}} >Product Description:</span>\n                                \n                                <div className=\"ProductDescription\">\n                                \n                                    {languageResponse !== \"\" &&\n                                        getSelectedDescription()\n                                    }\n                                    {enhanceResponse !== '' &&\n                                        enhanceResponse\n                                    }\n                                </div>\n                                \n                        \n                            </div>\n                </div>\n            </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}