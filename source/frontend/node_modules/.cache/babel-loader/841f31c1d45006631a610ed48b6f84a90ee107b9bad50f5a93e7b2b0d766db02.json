{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __awaiter, __generator, __rest } from \"tslib\";\nimport { Cache } from '@aws-amplify/cache';\nimport { ConsoleLogger as Logger, ClientDevice, Credentials, Signer, Hub, transferKeyToLowerCase, transferKeyToUpperCase, AnalyticsAction } from '@aws-amplify/core';\nimport { putEvents, updateEndpoint } from '@aws-amplify/core/internals/aws-clients/pinpoint';\nimport { v1 as uuid } from 'uuid';\nimport { getAnalyticsUserAgentString } from '../utils/UserAgent';\nimport EventBuffer from './EventBuffer';\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nvar dispatchAnalyticsEvent = function (event, data) {\n  Hub.dispatch('analytics', {\n    event: event,\n    data: data\n  }, 'Analytics', AMPLIFY_SYMBOL);\n};\nvar logger = new Logger('AWSPinpointProvider');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\nvar FORBIDDEN_CODE = 403;\nvar MOBILE_SERVICE_NAME = 'mobiletargeting';\nvar EXPIRED_TOKEN_CODE = 'ExpiredTokenException';\nvar UPDATE_ENDPOINT = '_update_endpoint';\nvar SESSION_START = '_session.start';\nvar SESSION_STOP = '_session.stop';\nvar BEACON_SUPPORTED = typeof navigator !== 'undefined' && navigator && typeof navigator.sendBeacon === 'function';\n// events buffer\nvar BUFFER_SIZE = 1000;\nvar FLUSH_SIZE = 100;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\nvar RESEND_LIMIT = 5;\n// params: { event: {name: , .... }, timeStamp, config, resendLimits }\nvar AWSPinpointProvider = /** @class */function () {\n  function AWSPinpointProvider(config) {\n    this._endpointGenerating = true;\n    this._endpointUpdateInProgress = false;\n    this._buffer = null;\n    this._endpointBuffer = [];\n    this._config = config ? config : {};\n    this._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n    this._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n    this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n    this._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n    this._clientInfo = ClientDevice.clientInfo();\n  }\n  /**\n   * get the category of the plugin\n   */\n  AWSPinpointProvider.prototype.getCategory = function () {\n    return AWSPinpointProvider.category;\n  };\n  /**\n   * get provider name of the plugin\n   */\n  AWSPinpointProvider.prototype.getProviderName = function () {\n    return AWSPinpointProvider.providerName;\n  };\n  /**\n   * configure the plugin\n   * @param {Object} config - configuration\n   */\n  AWSPinpointProvider.prototype.configure = function (config) {\n    var _this = this;\n    logger.debug('configure Analytics', config);\n    var conf = config || {};\n    this._config = Object.assign({}, this._config, conf);\n    // If autoSessionRecord is enabled, we need to wait for the endpoint to be\n    // updated before sending any events. See `sendEvents` in `Analytics.ts`\n    this._endpointGenerating = !!config['autoSessionRecord'];\n    if (this._config.appId && !this._config.disabled) {\n      if (!this._config.endpointId) {\n        var cacheKey = this.getProviderName() + '_' + this._config.appId;\n        this._getEndpointId(cacheKey).then(function (endpointId) {\n          logger.debug('setting endpoint id from the cache', endpointId);\n          _this._config.endpointId = endpointId;\n          dispatchAnalyticsEvent('pinpointProvider_configured', null);\n        }).catch(function (err) {\n          logger.debug('Failed to generate endpointId', err);\n        });\n      } else {\n        dispatchAnalyticsEvent('pinpointProvider_configured', null);\n      }\n    } else {\n      this._flushBuffer();\n    }\n    return this._config;\n  };\n  /**\n   * record an event\n   * @param {Object} params - the params of an event\n   */\n  AWSPinpointProvider.prototype.record = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, timestamp;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('_public record', params);\n            return [4 /*yield*/, this._getCredentials()];\n          case 1:\n            credentials = _a.sent();\n            if (!credentials || !this._config.appId || !this._config.region) {\n              logger.debug('cannot send events without credentials, applicationId or region');\n              return [2 /*return*/, handlers.reject(new Error('No credentials, applicationId or region'))];\n            }\n            this._init(credentials);\n            timestamp = new Date().getTime();\n            // attach the session and eventId\n            this._generateSession(params);\n            params.event.eventId = uuid();\n            Object.assign(params, {\n              timestamp: timestamp,\n              config: this._config\n            });\n            if (params.event.immediate) {\n              return [2 /*return*/, this._send(params, handlers)];\n            } else {\n              this._putToBuffer(params, handlers);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._sendEndpointUpdate = function (endpointObject) {\n    return __awaiter(this, void 0, void 0, function () {\n      var next;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._endpointUpdateInProgress) {\n              this._endpointBuffer.push(endpointObject);\n              return [2 /*return*/];\n            }\n\n            this._endpointUpdateInProgress = true;\n            return [4 /*yield*/, this._updateEndpoint(endpointObject)];\n          case 1:\n            _a.sent();\n            next = this._endpointBuffer.shift();\n            this._endpointUpdateInProgress = false;\n            next && this._sendEndpointUpdate(next);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   * @param params - params for event recording\n   * Put events into buffer\n   */\n  AWSPinpointProvider.prototype._putToBuffer = function (params, handlers) {\n    var _a;\n    if (params.event.name === UPDATE_ENDPOINT) {\n      this._sendEndpointUpdate({\n        params: params,\n        handlers: handlers\n      });\n      return;\n    }\n    (_a = this._buffer) === null || _a === void 0 ? void 0 : _a.push({\n      params: params,\n      handlers: handlers\n    });\n  };\n  AWSPinpointProvider.prototype._generateSession = function (params) {\n    this._sessionId = this._sessionId || uuid();\n    var event = params.event;\n    switch (event.name) {\n      case SESSION_START:\n        // refresh the session id and session start time\n        this._sessionStartTimestamp = new Date().getTime();\n        this._sessionId = uuid();\n        event.session = {\n          Id: this._sessionId,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString()\n        };\n        break;\n      case SESSION_STOP:\n        var stopTimestamp = new Date().getTime();\n        this._sessionStartTimestamp = this._sessionStartTimestamp || new Date().getTime();\n        this._sessionId = this._sessionId || uuid();\n        event.session = {\n          Id: this._sessionId,\n          Duration: stopTimestamp - this._sessionStartTimestamp,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n          StopTimestamp: new Date(stopTimestamp).toISOString()\n        };\n        this._sessionId = undefined;\n        this._sessionStartTimestamp = undefined;\n        break;\n      default:\n        this._sessionStartTimestamp = this._sessionStartTimestamp || new Date().getTime();\n        this._sessionId = this._sessionId || uuid();\n        event.session = {\n          Id: this._sessionId,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString()\n        };\n    }\n  };\n  AWSPinpointProvider.prototype._send = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var event;\n      return __generator(this, function (_a) {\n        event = params.event;\n        switch (event.name) {\n          case UPDATE_ENDPOINT:\n            return [2 /*return*/, this._updateEndpoint({\n              params: params,\n              handlers: handlers\n            })];\n          case SESSION_STOP:\n            return [2 /*return*/, this._pinpointSendStopSession(params, handlers)];\n          default:\n            return [2 /*return*/, this._pinpointPutEvents(params, handlers)];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._generateBatchItemContext = function (params) {\n    var _a, _b;\n    var event = params.event,\n      timestamp = params.timestamp,\n      config = params.config;\n    var name = event.name,\n      attributes = event.attributes,\n      metrics = event.metrics,\n      eventId = event.eventId,\n      session = event.session;\n    var appId = config.appId,\n      endpointId = config.endpointId;\n    var endpointContext = {};\n    return {\n      ApplicationId: appId,\n      EventsRequest: {\n        BatchItem: (_a = {}, _a[endpointId] = {\n          Endpoint: endpointContext,\n          Events: (_b = {}, _b[eventId] = {\n            EventType: name,\n            Timestamp: new Date(timestamp).toISOString(),\n            Attributes: attributes,\n            Metrics: metrics,\n            Session: session\n          }, _b)\n        }, _a)\n      }\n    };\n  };\n  AWSPinpointProvider.prototype._pinpointPutEvents = function (params, handlers) {\n    var _a, _b, _c, _d, _e;\n    return __awaiter(this, void 0, void 0, function () {\n      var eventId, endpointId, eventParams, _f, credentials, region, data, _g, StatusCode, Message, err_1;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            eventId = params.event.eventId, endpointId = params.config.endpointId;\n            eventParams = this._generateBatchItemContext(params);\n            _h.label = 1;\n          case 1:\n            _h.trys.push([1, 3,, 4]);\n            _f = this._config, credentials = _f.credentials, region = _f.region;\n            return [4 /*yield*/, putEvents({\n              credentials: credentials,\n              region: region,\n              userAgentValue: getAnalyticsUserAgentString(AnalyticsAction.Record)\n            }, eventParams)];\n          case 2:\n            data = _h.sent();\n            _g = (_e = (_d = (_c = (_b = (_a = data.EventsResponse) === null || _a === void 0 ? void 0 : _a.Results) === null || _b === void 0 ? void 0 : _b[endpointId]) === null || _c === void 0 ? void 0 : _c.EventsItemResponse) === null || _d === void 0 ? void 0 : _d[eventId]) !== null && _e !== void 0 ? _e : {}, StatusCode = _g.StatusCode, Message = _g.Message;\n            if (StatusCode && ACCEPTED_CODES.includes(StatusCode)) {\n              logger.debug('record event success. ', data);\n              return [2 /*return*/, handlers.resolve(data)];\n            } else if (StatusCode && RETRYABLE_CODES.includes(StatusCode)) {\n              // TODO: v6 integrate retry to the service handler retryDecider\n              this._retry(params, handlers);\n            } else {\n              logger.error(\"Event \" + eventId + \" is not accepted, the error is \" + Message);\n              return [2 /*return*/, handlers.reject(data)];\n            }\n            return [3 /*break*/, 4];\n          case 3:\n            err_1 = _h.sent();\n            this._eventError(err_1);\n            return [2 /*return*/, handlers.reject(err_1)];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._pinpointSendStopSession = function (params, handlers) {\n    if (!BEACON_SUPPORTED) {\n      this._pinpointPutEvents(params, handlers);\n      return;\n    }\n    var eventParams = this._generateBatchItemContext(params);\n    var region = this._config.region;\n    var ApplicationId = eventParams.ApplicationId,\n      EventsRequest = eventParams.EventsRequest;\n    var accessInfo = {\n      secret_key: this._config.credentials.secretAccessKey,\n      access_key: this._config.credentials.accessKeyId,\n      session_token: this._config.credentials.sessionToken\n    };\n    var url = \"https://pinpoint.\" + region + \".amazonaws.com/v1/apps/\" + ApplicationId + \"/events/legacy\";\n    var body = JSON.stringify(EventsRequest);\n    var method = 'POST';\n    var request = {\n      url: url,\n      body: body,\n      method: method\n    };\n    var serviceInfo = {\n      region: region,\n      service: MOBILE_SERVICE_NAME\n    };\n    var requestUrl = Signer.signUrl(request, accessInfo, serviceInfo);\n    var success = navigator.sendBeacon(requestUrl, body);\n    if (success) {\n      return handlers.resolve('sendBeacon success');\n    }\n    return handlers.reject('sendBeacon failure');\n  };\n  AWSPinpointProvider.prototype._retry = function (params, handlers) {\n    var resendLimit = params.config.resendLimit;\n    // For backward compatibility\n    params.resendLimit = typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n    if (params.resendLimit-- > 0) {\n      logger.debug(\"resending event \" + params.eventName + \" with \" + params.resendLimit + \" retry times left\");\n      this._pinpointPutEvents(params, handlers);\n    } else {\n      logger.debug(\"retry times used up for event \" + params.eventName);\n    }\n  };\n  AWSPinpointProvider.prototype._updateEndpoint = function (endpointObject) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params, handlers, config, event, appId, endpointId, request, update_params, _a, credentials, region, data, err_2, failureData;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            params = endpointObject.params, handlers = endpointObject.handlers;\n            config = params.config, event = params.event;\n            appId = config.appId, endpointId = config.endpointId;\n            request = this._endpointRequest(config, transferKeyToLowerCase(event, [], ['attributes', 'userAttributes', 'Attributes', 'UserAttributes']));\n            update_params = {\n              ApplicationId: appId,\n              EndpointId: endpointId,\n              EndpointRequest: request\n            };\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            _a = this._config, credentials = _a.credentials, region = _a.region;\n            return [4 /*yield*/, updateEndpoint({\n              credentials: credentials,\n              region: region,\n              userAgentValue: getAnalyticsUserAgentString(AnalyticsAction.UpdateEndpoint)\n            }, update_params)];\n          case 2:\n            data = _b.sent();\n            logger.debug('updateEndpoint success', data);\n            this._endpointGenerating = false;\n            this._resumeBuffer();\n            handlers.resolve(data);\n            return [2 /*return*/];\n          case 3:\n            err_2 = _b.sent();\n            failureData = {\n              err: err_2,\n              update_params: update_params,\n              endpointObject: endpointObject\n            };\n            return [2 /*return*/, this._handleEndpointUpdateFailure(failureData)];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._handleEndpointUpdateFailure = function (failureData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var err, endpointObject, statusCode, exponential;\n      return __generator(this, function (_a) {\n        err = failureData.err, endpointObject = failureData.endpointObject;\n        statusCode = err.$metadata && err.$metadata.httpStatusCode;\n        logger.debug('updateEndpoint error', err);\n        switch (statusCode) {\n          case FORBIDDEN_CODE:\n            return [2 /*return*/, this._handleEndpointUpdateForbidden(failureData)];\n          default:\n            if (RETRYABLE_CODES.includes(statusCode)) {\n              exponential = true;\n              return [2 /*return*/, this._retryEndpointUpdate(endpointObject, exponential)];\n            }\n            logger.error('updateEndpoint failed', err);\n            endpointObject.handlers.reject(err);\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._handleEndpointUpdateForbidden = function (failureData) {\n    var err = failureData.err,\n      endpointObject = failureData.endpointObject;\n    var code = err.code,\n      retryable = err.retryable;\n    if (code !== EXPIRED_TOKEN_CODE && !retryable) {\n      return endpointObject.handlers.reject(err);\n    }\n    this._retryEndpointUpdate(endpointObject);\n  };\n  AWSPinpointProvider.prototype._retryEndpointUpdate = function (endpointObject, exponential) {\n    if (exponential === void 0) {\n      exponential = false;\n    }\n    logger.debug('_retryEndpointUpdate', endpointObject);\n    var params = endpointObject.params;\n    // TODO: implement retry with exp back off once exp function is available\n    var resendLimit = params.config.resendLimit;\n    params.resendLimit = typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n    if (params.resendLimit-- > 0) {\n      logger.debug(\"resending endpoint update \" + params.event.eventId + \" with \" + params.resendLimit + \" retry attempts remaining\");\n      // insert at the front of endpointBuffer\n      this._endpointBuffer.length ? this._endpointBuffer.unshift(endpointObject) : this._updateEndpoint(endpointObject);\n      return;\n    }\n    logger.warn(\"resending endpoint update \" + params.event.eventId + \" failed after \" + params.config.resendLimit + \" attempts\");\n    if (this._endpointGenerating) {\n      logger.error('Initial endpoint update failed. ');\n    }\n  };\n  /**\n   * @private\n   * @param config\n   * Configure credentials and init buffer\n   */\n  AWSPinpointProvider.prototype._init = function (credentials) {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityId;\n      return __generator(this, function (_a) {\n        logger.debug('init provider');\n        if (this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n          logger.debug('no change for aws credentials, directly return from init');\n          return [2 /*return*/];\n        }\n\n        identityId = this._config.credentials ? this._config.credentials.identityId : null;\n        this._config.credentials = credentials;\n        if (!this._bufferExists() || identityId !== credentials.identityId) {\n          // if the identity has changed, flush the buffer and instantiate a new one\n          // this will cause the old buffer to send any remaining events\n          // with the old credentials and then stop looping and shortly thereafter get picked up by GC\n          this._initBuffer();\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._bufferExists = function () {\n    return this._buffer && this._buffer instanceof EventBuffer;\n  };\n  AWSPinpointProvider.prototype._initBuffer = function () {\n    if (this._bufferExists()) {\n      this._flushBuffer();\n    }\n    this._buffer = new EventBuffer(this._config);\n    // if the first endpoint update hasn't yet resolved pause the buffer to\n    // prevent race conditions. It will be resumed as soon as that request succeeds\n    if (this._endpointGenerating) {\n      this._buffer.pause();\n    }\n  };\n  AWSPinpointProvider.prototype._flushBuffer = function () {\n    var _a;\n    if (this._bufferExists()) {\n      (_a = this._buffer) === null || _a === void 0 ? void 0 : _a.flush();\n      this._buffer = null;\n    }\n  };\n  AWSPinpointProvider.prototype._resumeBuffer = function () {\n    var _a;\n    if (this._bufferExists()) {\n      (_a = this._buffer) === null || _a === void 0 ? void 0 : _a.resume();\n    }\n  };\n  AWSPinpointProvider.prototype._getEndpointId = function (cacheKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointId, ttl, expiration;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, Cache.getItem(cacheKey)];\n          case 1:\n            endpointId = _a.sent();\n            logger.debug('endpointId from cache', endpointId, 'type', typeof endpointId);\n            if (!endpointId) {\n              endpointId = uuid();\n              ttl = 1000 * 60 * 60 * 24 * 365 * 100;\n              expiration = new Date().getTime() + ttl;\n              Cache.setItem(cacheKey, endpointId, {\n                expires: expiration,\n                priority: 1\n              });\n            }\n            return [2 /*return*/, endpointId];\n        }\n      });\n    });\n  };\n  /**\n   * EndPoint request\n   * @return {Object} - The request of updating endpoint\n   */\n  AWSPinpointProvider.prototype._endpointRequest = function (config, event) {\n    var credentials = config.credentials;\n    var clientInfo = this._clientInfo || {};\n    var clientContext = config.clientContext || {};\n    // for now we have three different ways for default endpoint configurations\n    // clientInfo\n    // clientContext (deprecated)\n    // config.endpoint\n    var defaultEndpointConfig = config.endpoint || {};\n    var demographicByClientInfo = {\n      appVersion: clientInfo.appVersion,\n      make: clientInfo.make,\n      model: clientInfo.model,\n      modelVersion: clientInfo.version,\n      platform: clientInfo.platform\n    };\n    // for backward compatibility\n    var clientId = clientContext.clientId,\n      appTitle = clientContext.appTitle,\n      appVersionName = clientContext.appVersionName,\n      appVersionCode = clientContext.appVersionCode,\n      appPackageName = clientContext.appPackageName,\n      demographicByClientContext = __rest(clientContext, [\"clientId\", \"appTitle\", \"appVersionName\", \"appVersionCode\", \"appPackageName\"]);\n    var channelType = event.address ? clientInfo.platform === 'android' ? 'GCM' : 'APNS' : undefined;\n    var tmp = __assign(__assign(__assign({\n      channelType: channelType,\n      requestId: uuid(),\n      effectiveDate: new Date().toISOString()\n    }, defaultEndpointConfig), event), {\n      attributes: __assign(__assign({}, defaultEndpointConfig.attributes), event.attributes),\n      demographic: __assign(__assign(__assign(__assign({}, demographicByClientInfo), demographicByClientContext), defaultEndpointConfig.demographic), event.demographic),\n      location: __assign(__assign({}, defaultEndpointConfig.location), event.location),\n      metrics: __assign(__assign({}, defaultEndpointConfig.metrics), event.metrics),\n      user: {\n        userId: event.userId || defaultEndpointConfig.userId || credentials.identityId,\n        userAttributes: __assign(__assign({}, defaultEndpointConfig.userAttributes), event.userAttributes)\n      }\n    });\n    // eliminate unnecessary params\n    var userId = tmp.userId,\n      userAttributes = tmp.userAttributes,\n      name = tmp.name,\n      session = tmp.session,\n      eventId = tmp.eventId,\n      immediate = tmp.immediate,\n      ret = __rest(tmp, [\"userId\", \"userAttributes\", \"name\", \"session\", \"eventId\", \"immediate\"]);\n    return transferKeyToUpperCase(ret, [], ['metrics', 'userAttributes', 'attributes']);\n  };\n  AWSPinpointProvider.prototype._eventError = function (err) {\n    logger.error('record event failed.', err);\n    logger.warn(\"Please ensure you have updated your Pinpoint IAM Policy \" + \"with the Action: \\\"mobiletargeting:PutEvents\\\" \" + \"in order to record events\");\n  };\n  AWSPinpointProvider.prototype._getCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, err_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2 /*return*/, null];\n            logger.debug('set credentials for analytics', credentials);\n            return [2 /*return*/, Credentials.shear(credentials)];\n          case 2:\n            err_3 = _a.sent();\n            logger.debug('ensure credentials error', err_3);\n            return [2 /*return*/, null];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.category = 'Analytics';\n  AWSPinpointProvider.providerName = 'AWSPinpoint';\n  return AWSPinpointProvider;\n}();\nexport { AWSPinpointProvider };","map":{"version":3,"mappings":"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","names":["Cache","ConsoleLogger","Logger","ClientDevice","Credentials","Signer","Hub","transferKeyToLowerCase","transferKeyToUpperCase","AnalyticsAction","putEvents","updateEndpoint","v1","uuid","getAnalyticsUserAgentString","EventBuffer","AMPLIFY_SYMBOL","Symbol","for","dispatchAnalyticsEvent","event","data","dispatch","logger","RETRYABLE_CODES","ACCEPTED_CODES","FORBIDDEN_CODE","MOBILE_SERVICE_NAME","EXPIRED_TOKEN_CODE","UPDATE_ENDPOINT","SESSION_START","SESSION_STOP","BEACON_SUPPORTED","navigator","sendBeacon","BUFFER_SIZE","FLUSH_SIZE","FLUSH_INTERVAL","RESEND_LIMIT","config","_buffer","_endpointBuffer","_config","bufferSize","flushSize","flushInterval","resendLimit","_clientInfo","clientInfo","AWSPinpointProvider","category","providerName","debug","conf","Object","assign","_endpointGenerating","appId","disabled","endpointId","cacheKey","getProviderName","_getEndpointId","then","_this","catch","err","_flushBuffer","params","handlers","_getCredentials","credentials","_a","region","reject","Error","_init","timestamp","Date","getTime","_generateSession","eventId","immediate","_send","_putToBuffer","endpointObject","_endpointUpdateInProgress","push","_updateEndpoint","next","shift","_sendEndpointUpdate","name","_sessionId","_sessionStartTimestamp","session","Id","StartTimestamp","toISOString","stopTimestamp","Duration","StopTimestamp","undefined","_pinpointSendStopSession","_pinpointPutEvents","attributes","metrics","endpointContext","ApplicationId","EventsRequest","BatchItem","Endpoint","Events","_b","EventType","Timestamp","Attributes","Metrics","Session","eventParams","_generateBatchItemContext","_f","userAgentValue","Record","_h","_g","EventsResponse","Results","EventsItemResponse","StatusCode","Message","includes","resolve","_retry","error","_eventError","err_1","accessInfo","secret_key","secretAccessKey","access_key","accessKeyId","session_token","sessionToken","url","body","JSON","stringify","method","request","serviceInfo","service","requestUrl","signUrl","success","eventName","_endpointRequest","update_params","EndpointId","EndpointRequest","UpdateEndpoint","_resumeBuffer","failureData","_handleEndpointUpdateFailure","statusCode","$metadata","httpStatusCode","_handleEndpointUpdateForbidden","exponential","_retryEndpointUpdate","retryable","code","length","unshift","warn","identityId","_bufferExists","_initBuffer","pause","flush","resume","getItem","ttl","expiration","setItem","expires","priority","clientContext","defaultEndpointConfig","endpoint","demographicByClientInfo","appVersion","make","model","modelVersion","version","platform","appTitle","appVersionName","appVersionCode","appPackageName","demographicByClientContext","channelType","address","tmp","requestId","effectiveDate","demographic","location","user","userId","userAttributes","ret","get","shear","err_3"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-amplify/analytics/src/Providers/AWSPinpointProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Cache } from '@aws-amplify/cache';\nimport {\n\tConsoleLogger as Logger,\n\tClientDevice,\n\tCredentials,\n\tSigner,\n\tHub,\n\ttransferKeyToLowerCase,\n\ttransferKeyToUpperCase,\n\tAnalyticsAction,\n} from '@aws-amplify/core';\nimport {\n\tputEvents,\n\tPutEventsInput,\n\tPutEventsOutput,\n\tupdateEndpoint,\n\tUpdateEndpointInput,\n\tUpdateEndpointOutput,\n} from '@aws-amplify/core/internals/aws-clients/pinpoint';\n\nimport {\n\tAnalyticsProvider,\n\tPromiseHandlers,\n\tEndpointBuffer,\n\tEventParams,\n\tEventObject,\n\tEndpointFailureData,\n} from '../types';\nimport { v1 as uuid } from 'uuid';\nimport { getAnalyticsUserAgentString } from '../utils/UserAgent';\nimport EventBuffer from './EventBuffer';\n\nconst AMPLIFY_SYMBOL = (\n\ttypeof Symbol !== 'undefined' && typeof Symbol.for === 'function'\n\t\t? Symbol.for('amplify_default')\n\t\t: '@@amplify_default'\n) as Symbol;\n\nconst dispatchAnalyticsEvent = (event, data) => {\n\tHub.dispatch('analytics', { event, data }, 'Analytics', AMPLIFY_SYMBOL);\n};\n\nconst logger = new Logger('AWSPinpointProvider');\nconst RETRYABLE_CODES = [429, 500];\nconst ACCEPTED_CODES = [202];\nconst FORBIDDEN_CODE = 403;\nconst MOBILE_SERVICE_NAME = 'mobiletargeting';\nconst EXPIRED_TOKEN_CODE = 'ExpiredTokenException';\nconst UPDATE_ENDPOINT = '_update_endpoint';\nconst SESSION_START = '_session.start';\nconst SESSION_STOP = '_session.stop';\n\nconst BEACON_SUPPORTED =\n\ttypeof navigator !== 'undefined' &&\n\tnavigator &&\n\ttypeof navigator.sendBeacon === 'function';\n\n// events buffer\nconst BUFFER_SIZE = 1000;\nconst FLUSH_SIZE = 100;\nconst FLUSH_INTERVAL = 5 * 1000; // 5s\nconst RESEND_LIMIT = 5;\n\n// params: { event: {name: , .... }, timeStamp, config, resendLimits }\nexport class AWSPinpointProvider implements AnalyticsProvider {\n\tstatic category = 'Analytics';\n\tstatic providerName = 'AWSPinpoint';\n\n\tprivate _config;\n\tprivate _sessionId;\n\tprivate _sessionStartTimestamp;\n\tprivate _buffer: EventBuffer | null;\n\tprivate _endpointBuffer: EndpointBuffer;\n\tprivate _clientInfo;\n\tprivate _endpointGenerating = true;\n\tprivate _endpointUpdateInProgress = false;\n\n\tconstructor(config?) {\n\t\tthis._buffer = null;\n\t\tthis._endpointBuffer = [];\n\t\tthis._config = config ? config : {};\n\t\tthis._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n\t\tthis._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n\t\tthis._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n\t\tthis._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n\t\tthis._clientInfo = ClientDevice.clientInfo();\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t */\n\tgetCategory(): string {\n\t\treturn AWSPinpointProvider.category;\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tgetProviderName(): string {\n\t\treturn AWSPinpointProvider.providerName;\n\t}\n\n\t/**\n\t * configure the plugin\n\t * @param {Object} config - configuration\n\t */\n\tpublic configure(config): object {\n\t\tlogger.debug('configure Analytics', config);\n\t\tconst conf = config || {};\n\t\tthis._config = Object.assign({}, this._config, conf);\n\n\t\t// If autoSessionRecord is enabled, we need to wait for the endpoint to be\n\t\t// updated before sending any events. See `sendEvents` in `Analytics.ts`\n\t\tthis._endpointGenerating = !!config['autoSessionRecord'];\n\n\t\tif (this._config.appId && !this._config.disabled) {\n\t\t\tif (!this._config.endpointId) {\n\t\t\t\tconst cacheKey = this.getProviderName() + '_' + this._config.appId;\n\t\t\t\tthis._getEndpointId(cacheKey)\n\t\t\t\t\t.then(endpointId => {\n\t\t\t\t\t\tlogger.debug('setting endpoint id from the cache', endpointId);\n\t\t\t\t\t\tthis._config.endpointId = endpointId;\n\t\t\t\t\t\tdispatchAnalyticsEvent('pinpointProvider_configured', null);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\tlogger.debug('Failed to generate endpointId', err);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tdispatchAnalyticsEvent('pinpointProvider_configured', null);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._flushBuffer();\n\t\t}\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * record an event\n\t * @param {Object} params - the params of an event\n\t */\n\tpublic async record(params: EventParams, handlers: PromiseHandlers) {\n\t\tlogger.debug('_public record', params);\n\t\tconst credentials = await this._getCredentials();\n\t\tif (!credentials || !this._config.appId || !this._config.region) {\n\t\t\tlogger.debug(\n\t\t\t\t'cannot send events without credentials, applicationId or region'\n\t\t\t);\n\t\t\treturn handlers.reject(\n\t\t\t\tnew Error('No credentials, applicationId or region')\n\t\t\t);\n\t\t}\n\n\t\tthis._init(credentials);\n\n\t\tconst timestamp = new Date().getTime();\n\t\t// attach the session and eventId\n\t\tthis._generateSession(params);\n\t\tparams.event.eventId = uuid();\n\n\t\tObject.assign(params, { timestamp, config: this._config });\n\n\t\tif (params.event.immediate) {\n\t\t\treturn this._send(params, handlers);\n\t\t} else {\n\t\t\tthis._putToBuffer(params, handlers);\n\t\t}\n\t}\n\n\tprivate async _sendEndpointUpdate(endpointObject: EventObject) {\n\t\tif (this._endpointUpdateInProgress) {\n\t\t\tthis._endpointBuffer.push(endpointObject);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._endpointUpdateInProgress = true;\n\t\tawait this._updateEndpoint(endpointObject);\n\n\t\tconst next = this._endpointBuffer.shift();\n\t\tthis._endpointUpdateInProgress = false;\n\n\t\tnext && this._sendEndpointUpdate(next);\n\t}\n\n\t/**\n\t * @private\n\t * @param params - params for event recording\n\t * Put events into buffer\n\t */\n\tprivate _putToBuffer(params, handlers) {\n\t\tif (params.event.name === UPDATE_ENDPOINT) {\n\t\t\tthis._sendEndpointUpdate({ params, handlers });\n\t\t\treturn;\n\t\t}\n\n\t\tthis._buffer?.push({ params, handlers });\n\t}\n\n\tprivate _generateSession(params) {\n\t\tthis._sessionId = this._sessionId || uuid();\n\t\tconst { event } = params;\n\n\t\tswitch (event.name) {\n\t\t\tcase SESSION_START:\n\t\t\t\t// refresh the session id and session start time\n\t\t\t\tthis._sessionStartTimestamp = new Date().getTime();\n\t\t\t\tthis._sessionId = uuid();\n\t\t\t\tevent.session = {\n\t\t\t\t\tId: this._sessionId,\n\t\t\t\t\tStartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase SESSION_STOP:\n\t\t\t\tconst stopTimestamp = new Date().getTime();\n\t\t\t\tthis._sessionStartTimestamp =\n\t\t\t\t\tthis._sessionStartTimestamp || new Date().getTime();\n\t\t\t\tthis._sessionId = this._sessionId || uuid();\n\t\t\t\tevent.session = {\n\t\t\t\t\tId: this._sessionId,\n\t\t\t\t\tDuration: stopTimestamp - this._sessionStartTimestamp,\n\t\t\t\t\tStartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n\t\t\t\t\tStopTimestamp: new Date(stopTimestamp).toISOString(),\n\t\t\t\t};\n\t\t\t\tthis._sessionId = undefined;\n\t\t\t\tthis._sessionStartTimestamp = undefined;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis._sessionStartTimestamp =\n\t\t\t\t\tthis._sessionStartTimestamp || new Date().getTime();\n\t\t\t\tthis._sessionId = this._sessionId || uuid();\n\t\t\t\tevent.session = {\n\t\t\t\t\tId: this._sessionId,\n\t\t\t\t\tStartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n\t\t\t\t};\n\t\t}\n\t}\n\n\tprivate async _send(params, handlers) {\n\t\tconst { event } = params;\n\n\t\tswitch (event.name) {\n\t\t\tcase UPDATE_ENDPOINT:\n\t\t\t\treturn this._updateEndpoint({ params, handlers });\n\t\t\tcase SESSION_STOP:\n\t\t\t\treturn this._pinpointSendStopSession(params, handlers);\n\t\t\tdefault:\n\t\t\t\treturn this._pinpointPutEvents(params, handlers);\n\t\t}\n\t}\n\n\tprivate _generateBatchItemContext(params): PutEventsInput {\n\t\tconst { event, timestamp, config } = params;\n\t\tconst { name, attributes, metrics, eventId, session } = event;\n\t\tconst { appId, endpointId } = config;\n\t\tconst endpointContext = {};\n\n\t\treturn {\n\t\t\tApplicationId: appId,\n\t\t\tEventsRequest: {\n\t\t\t\tBatchItem: {\n\t\t\t\t\t[endpointId]: {\n\t\t\t\t\t\tEndpoint: endpointContext,\n\t\t\t\t\t\tEvents: {\n\t\t\t\t\t\t\t[eventId]: {\n\t\t\t\t\t\t\t\tEventType: name,\n\t\t\t\t\t\t\t\tTimestamp: new Date(timestamp).toISOString(),\n\t\t\t\t\t\t\t\tAttributes: attributes,\n\t\t\t\t\t\t\t\tMetrics: metrics,\n\t\t\t\t\t\t\t\tSession: session,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t}\n\n\tprivate async _pinpointPutEvents(params, handlers) {\n\t\tconst {\n\t\t\tevent: { eventId },\n\t\t\tconfig: { endpointId },\n\t\t} = params;\n\t\tconst eventParams = this._generateBatchItemContext(params);\n\n\t\ttry {\n\t\t\tconst { credentials, region } = this._config;\n\t\t\tconst data: PutEventsOutput = await putEvents(\n\t\t\t\t{\n\t\t\t\t\tcredentials,\n\t\t\t\t\tregion,\n\t\t\t\t\tuserAgentValue: getAnalyticsUserAgentString(AnalyticsAction.Record),\n\t\t\t\t},\n\t\t\t\teventParams\n\t\t\t);\n\n\t\t\tconst { StatusCode, Message } =\n\t\t\t\tdata.EventsResponse?.Results?.[endpointId]?.EventsItemResponse?.[\n\t\t\t\t\teventId\n\t\t\t\t] ?? {};\n\n\t\t\tif (StatusCode && ACCEPTED_CODES.includes(StatusCode)) {\n\t\t\t\tlogger.debug('record event success. ', data);\n\t\t\t\treturn handlers.resolve(data);\n\t\t\t} else if (StatusCode && RETRYABLE_CODES.includes(StatusCode)) {\n\t\t\t\t// TODO: v6 integrate retry to the service handler retryDecider\n\t\t\t\tthis._retry(params, handlers);\n\t\t\t} else {\n\t\t\t\tlogger.error(\n\t\t\t\t\t`Event ${eventId} is not accepted, the error is ${Message}`\n\t\t\t\t);\n\t\t\t\treturn handlers.reject(data);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tthis._eventError(err);\n\t\t\treturn handlers.reject(err);\n\t\t}\n\t}\n\n\tprivate _pinpointSendStopSession(params, handlers): Promise<string> | void {\n\t\tif (!BEACON_SUPPORTED) {\n\t\t\tthis._pinpointPutEvents(params, handlers);\n\t\t\treturn;\n\t\t}\n\n\t\tconst eventParams = this._generateBatchItemContext(params);\n\n\t\tconst { region } = this._config;\n\t\tconst { ApplicationId, EventsRequest } = eventParams;\n\n\t\tconst accessInfo = {\n\t\t\tsecret_key: this._config.credentials.secretAccessKey,\n\t\t\taccess_key: this._config.credentials.accessKeyId,\n\t\t\tsession_token: this._config.credentials.sessionToken,\n\t\t};\n\n\t\tconst url = `https://pinpoint.${region}.amazonaws.com/v1/apps/${ApplicationId}/events/legacy`;\n\t\tconst body = JSON.stringify(EventsRequest);\n\t\tconst method = 'POST';\n\n\t\tconst request = {\n\t\t\turl,\n\t\t\tbody,\n\t\t\tmethod,\n\t\t};\n\n\t\tconst serviceInfo = { region, service: MOBILE_SERVICE_NAME };\n\n\t\tconst requestUrl: string = Signer.signUrl(request, accessInfo, serviceInfo);\n\n\t\tconst success: boolean = navigator.sendBeacon(requestUrl, body);\n\n\t\tif (success) {\n\t\t\treturn handlers.resolve('sendBeacon success');\n\t\t}\n\t\treturn handlers.reject('sendBeacon failure');\n\t}\n\n\tprivate _retry(params, handlers) {\n\t\tconst {\n\t\t\tconfig: { resendLimit },\n\t\t} = params;\n\t\t// For backward compatibility\n\t\tparams.resendLimit =\n\t\t\ttypeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n\t\tif (params.resendLimit-- > 0) {\n\t\t\tlogger.debug(\n\t\t\t\t`resending event ${params.eventName} with ${params.resendLimit} retry times left`\n\t\t\t);\n\t\t\tthis._pinpointPutEvents(params, handlers);\n\t\t} else {\n\t\t\tlogger.debug(`retry times used up for event ${params.eventName}`);\n\t\t}\n\t}\n\n\tprivate async _updateEndpoint(endpointObject: EventObject) {\n\t\tconst { params, handlers } = endpointObject;\n\t\tconst { config, event } = params;\n\t\tconst { appId, endpointId } = config;\n\n\t\tconst request = this._endpointRequest(\n\t\t\tconfig,\n\t\t\ttransferKeyToLowerCase(\n\t\t\t\tevent,\n\t\t\t\t[],\n\t\t\t\t['attributes', 'userAttributes', 'Attributes', 'UserAttributes']\n\t\t\t)\n\t\t);\n\t\tconst update_params: UpdateEndpointInput = {\n\t\t\tApplicationId: appId,\n\t\t\tEndpointId: endpointId,\n\t\t\tEndpointRequest: request,\n\t\t};\n\n\t\ttry {\n\t\t\tconst { credentials, region } = this._config;\n\t\t\tconst data: UpdateEndpointOutput = await updateEndpoint(\n\t\t\t\t{\n\t\t\t\t\tcredentials,\n\t\t\t\t\tregion,\n\t\t\t\t\tuserAgentValue: getAnalyticsUserAgentString(\n\t\t\t\t\t\tAnalyticsAction.UpdateEndpoint\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tupdate_params\n\t\t\t);\n\t\t\tlogger.debug('updateEndpoint success', data);\n\t\t\tthis._endpointGenerating = false;\n\t\t\tthis._resumeBuffer();\n\n\t\t\thandlers.resolve(data);\n\t\t\treturn;\n\t\t} catch (err) {\n\t\t\tconst failureData: EndpointFailureData = {\n\t\t\t\terr,\n\t\t\t\tupdate_params,\n\t\t\t\tendpointObject,\n\t\t\t};\n\n\t\t\treturn this._handleEndpointUpdateFailure(failureData);\n\t\t}\n\t}\n\n\tprivate async _handleEndpointUpdateFailure(failureData: EndpointFailureData) {\n\t\tconst { err, endpointObject } = failureData;\n\t\tconst statusCode = err.$metadata && err.$metadata.httpStatusCode;\n\n\t\tlogger.debug('updateEndpoint error', err);\n\n\t\tswitch (statusCode) {\n\t\t\tcase FORBIDDEN_CODE:\n\t\t\t\treturn this._handleEndpointUpdateForbidden(failureData);\n\t\t\tdefault:\n\t\t\t\tif (RETRYABLE_CODES.includes(statusCode)) {\n\t\t\t\t\t// Server error. Attempt exponential retry\n\t\t\t\t\tconst exponential = true;\n\t\t\t\t\treturn this._retryEndpointUpdate(endpointObject, exponential);\n\t\t\t\t}\n\t\t\t\tlogger.error('updateEndpoint failed', err);\n\t\t\t\tendpointObject.handlers.reject(err);\n\t\t}\n\t}\n\n\tprivate _handleEndpointUpdateForbidden(failureData: EndpointFailureData) {\n\t\tconst { err, endpointObject } = failureData;\n\n\t\tconst { code, retryable } = err;\n\n\t\tif (code !== EXPIRED_TOKEN_CODE && !retryable) {\n\t\t\treturn endpointObject.handlers.reject(err);\n\t\t}\n\n\t\tthis._retryEndpointUpdate(endpointObject);\n\t}\n\n\tprivate _retryEndpointUpdate(\n\t\tendpointObject: EventObject,\n\t\texponential: boolean = false\n\t) {\n\t\tlogger.debug('_retryEndpointUpdate', endpointObject);\n\t\tconst { params } = endpointObject;\n\n\t\t// TODO: implement retry with exp back off once exp function is available\n\t\tconst {\n\t\t\tconfig: { resendLimit },\n\t\t} = params;\n\n\t\tparams.resendLimit =\n\t\t\ttypeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n\n\t\tif (params.resendLimit-- > 0) {\n\t\t\tlogger.debug(\n\t\t\t\t`resending endpoint update ${params.event.eventId} with ${params.resendLimit} retry attempts remaining`\n\t\t\t);\n\t\t\t// insert at the front of endpointBuffer\n\t\t\tthis._endpointBuffer.length\n\t\t\t\t? this._endpointBuffer.unshift(endpointObject)\n\t\t\t\t: this._updateEndpoint(endpointObject);\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.warn(\n\t\t\t`resending endpoint update ${params.event.eventId} failed after ${params.config.resendLimit} attempts`\n\t\t);\n\n\t\tif (this._endpointGenerating) {\n\t\t\tlogger.error('Initial endpoint update failed. ');\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param config\n\t * Configure credentials and init buffer\n\t */\n\tprivate async _init(credentials) {\n\t\tlogger.debug('init provider');\n\n\t\tif (\n\t\t\tthis._config.credentials &&\n\t\t\tthis._config.credentials.sessionToken === credentials.sessionToken &&\n\t\t\tthis._config.credentials.identityId === credentials.identityId\n\t\t) {\n\t\t\tlogger.debug('no change for aws credentials, directly return from init');\n\t\t\treturn;\n\t\t}\n\n\t\tconst identityId = this._config.credentials\n\t\t\t? this._config.credentials.identityId\n\t\t\t: null;\n\n\t\tthis._config.credentials = credentials;\n\n\t\tif (!this._bufferExists() || identityId !== credentials.identityId) {\n\t\t\t// if the identity has changed, flush the buffer and instantiate a new one\n\t\t\t// this will cause the old buffer to send any remaining events\n\t\t\t// with the old credentials and then stop looping and shortly thereafter get picked up by GC\n\t\t\tthis._initBuffer();\n\t\t}\n\t}\n\n\tprivate _bufferExists() {\n\t\treturn this._buffer && this._buffer instanceof EventBuffer;\n\t}\n\n\tprivate _initBuffer() {\n\t\tif (this._bufferExists()) {\n\t\t\tthis._flushBuffer();\n\t\t}\n\n\t\tthis._buffer = new EventBuffer(this._config);\n\n\t\t// if the first endpoint update hasn't yet resolved pause the buffer to\n\t\t// prevent race conditions. It will be resumed as soon as that request succeeds\n\t\tif (this._endpointGenerating) {\n\t\t\tthis._buffer.pause();\n\t\t}\n\t}\n\n\tprivate _flushBuffer() {\n\t\tif (this._bufferExists()) {\n\t\t\tthis._buffer?.flush();\n\t\t\tthis._buffer = null;\n\t\t}\n\t}\n\n\tprivate _resumeBuffer() {\n\t\tif (this._bufferExists()) {\n\t\t\tthis._buffer?.resume();\n\t\t}\n\t}\n\n\tprivate async _getEndpointId(cacheKey) {\n\t\t// try to get from cache\n\t\tlet endpointId = await Cache.getItem(cacheKey);\n\t\tlogger.debug(\n\t\t\t'endpointId from cache',\n\t\t\tendpointId,\n\t\t\t'type',\n\t\t\ttypeof endpointId\n\t\t);\n\t\tif (!endpointId) {\n\t\t\tendpointId = uuid();\n\t\t\t// set a longer TTL to avoid endpoint id being deleted after the default TTL (3 days)\n\t\t\t// also set its priority to the highest to reduce its chance of being deleted when cache is full\n\t\t\tconst ttl = 1000 * 60 * 60 * 24 * 365 * 100; // 100 years\n\t\t\tconst expiration = new Date().getTime() + ttl;\n\t\t\tCache.setItem(cacheKey, endpointId, {\n\t\t\t\texpires: expiration,\n\t\t\t\tpriority: 1,\n\t\t\t});\n\t\t}\n\t\treturn endpointId;\n\t}\n\n\t/**\n\t * EndPoint request\n\t * @return {Object} - The request of updating endpoint\n\t */\n\tprivate _endpointRequest(config, event) {\n\t\tconst { credentials } = config;\n\t\tconst clientInfo = this._clientInfo || {};\n\t\tconst clientContext = config.clientContext || {};\n\t\t// for now we have three different ways for default endpoint configurations\n\t\t// clientInfo\n\t\t// clientContext (deprecated)\n\t\t// config.endpoint\n\t\tconst defaultEndpointConfig = config.endpoint || {};\n\t\tconst demographicByClientInfo = {\n\t\t\tappVersion: clientInfo.appVersion,\n\t\t\tmake: clientInfo.make,\n\t\t\tmodel: clientInfo.model,\n\t\t\tmodelVersion: clientInfo.version,\n\t\t\tplatform: clientInfo.platform,\n\t\t};\n\t\t// for backward compatibility\n\t\tconst {\n\t\t\tclientId,\n\t\t\tappTitle,\n\t\t\tappVersionName,\n\t\t\tappVersionCode,\n\t\t\tappPackageName,\n\t\t\t...demographicByClientContext\n\t\t} = clientContext;\n\t\tconst channelType = event.address\n\t\t\t? clientInfo.platform === 'android'\n\t\t\t\t? 'GCM'\n\t\t\t\t: 'APNS'\n\t\t\t: undefined;\n\t\tconst tmp = {\n\t\t\tchannelType,\n\t\t\trequestId: uuid(),\n\t\t\teffectiveDate: new Date().toISOString(),\n\t\t\t...defaultEndpointConfig,\n\t\t\t...event,\n\t\t\tattributes: {\n\t\t\t\t...defaultEndpointConfig.attributes,\n\t\t\t\t...event.attributes,\n\t\t\t},\n\t\t\tdemographic: {\n\t\t\t\t...demographicByClientInfo,\n\t\t\t\t...demographicByClientContext,\n\t\t\t\t...defaultEndpointConfig.demographic,\n\t\t\t\t...event.demographic,\n\t\t\t},\n\t\t\tlocation: {\n\t\t\t\t...defaultEndpointConfig.location,\n\t\t\t\t...event.location,\n\t\t\t},\n\t\t\tmetrics: {\n\t\t\t\t...defaultEndpointConfig.metrics,\n\t\t\t\t...event.metrics,\n\t\t\t},\n\t\t\tuser: {\n\t\t\t\tuserId:\n\t\t\t\t\tevent.userId ||\n\t\t\t\t\tdefaultEndpointConfig.userId ||\n\t\t\t\t\tcredentials.identityId,\n\t\t\t\tuserAttributes: {\n\t\t\t\t\t...defaultEndpointConfig.userAttributes,\n\t\t\t\t\t...event.userAttributes,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\t// eliminate unnecessary params\n\t\tconst {\n\t\t\tuserId,\n\t\t\tuserAttributes,\n\t\t\tname,\n\t\t\tsession,\n\t\t\teventId,\n\t\t\timmediate,\n\t\t\t...ret\n\t\t} = tmp;\n\t\treturn transferKeyToUpperCase(\n\t\t\tret,\n\t\t\t[],\n\t\t\t['metrics', 'userAttributes', 'attributes']\n\t\t);\n\t}\n\n\tprivate _eventError(err: any) {\n\t\tlogger.error('record event failed.', err);\n\t\tlogger.warn(\n\t\t\t`Please ensure you have updated your Pinpoint IAM Policy ` +\n\t\t\t\t`with the Action: \"mobiletargeting:PutEvents\" ` +\n\t\t\t\t`in order to record events`\n\t\t);\n\t}\n\n\tprivate async _getCredentials() {\n\t\ttry {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) return null;\n\n\t\t\tlogger.debug('set credentials for analytics', credentials);\n\t\t\treturn Credentials.shear(credentials);\n\t\t} catch (err) {\n\t\t\tlogger.debug('ensure credentials error', err);\n\t\t\treturn null;\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}