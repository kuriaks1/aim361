{"ast":null,"code":"/**\n * Lazy String holder for JSON typed contents.\n */\nimport { __extends, __read, __spread } from \"tslib\";\n/**\n * Because of https://github.com/microsoft/tslib/issues/95,\n * TS 'extends' shim doesn't support extending native types like String.\n * So here we create StringWrapper that duplicate everything from String\n * class including its prototype chain. So we can extend from here.\n */\n// @ts-ignore StringWrapper implementation is not a simple constructor\nexport var StringWrapper = function () {\n  //@ts-ignore 'this' cannot be assigned to any, but Object.getPrototypeOf accepts any\n  var Class = Object.getPrototypeOf(this).constructor;\n  var Constructor = Function.bind.apply(String, __spread([null], arguments));\n  //@ts-ignore Call wrapped String constructor directly, don't bother typing it.\n  var instance = new Constructor();\n  Object.setPrototypeOf(instance, Class.prototype);\n  return instance;\n};\nStringWrapper.prototype = Object.create(String.prototype, {\n  constructor: {\n    value: StringWrapper,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  }\n});\nObject.setPrototypeOf(StringWrapper, String);\nvar LazyJsonString = /** @class */function (_super) {\n  __extends(LazyJsonString, _super);\n  function LazyJsonString() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  LazyJsonString.prototype.deserializeJSON = function () {\n    return JSON.parse(_super.prototype.toString.call(this));\n  };\n  LazyJsonString.prototype.toJSON = function () {\n    return _super.prototype.toString.call(this);\n  };\n  LazyJsonString.fromObject = function (object) {\n    if (object instanceof LazyJsonString) {\n      return object;\n    } else if (object instanceof String || typeof object === \"string\") {\n      return new LazyJsonString(object);\n    }\n    return new LazyJsonString(JSON.stringify(object));\n  };\n  return LazyJsonString;\n}(StringWrapper);\nexport { LazyJsonString };","map":{"version":3,"mappings":"AAAA;;;;AAQA;;;;;;AAMA;AACA,OAAO,IAAMA,aAAa,GAAkB;EAC1C;EACA,IAAMC,KAAK,GAAGC,MAAM,CAACC,cAAc,CAAC,IAAI,CAAC,CAACC,WAAW;EACrD,IAAMC,WAAW,GAAGC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,MAAM,YAAG,IAAW,GAAKC,SAAS,EAAE;EAC5E;EACA,IAAMC,QAAQ,GAAG,IAAIN,WAAW,EAAE;EAClCH,MAAM,CAACU,cAAc,CAACD,QAAQ,EAAEV,KAAK,CAACY,SAAS,CAAC;EAChD,OAAOF,QAAkB;AAC3B,CAAC;AACDX,aAAa,CAACa,SAAS,GAAGX,MAAM,CAACY,MAAM,CAACL,MAAM,CAACI,SAAS,EAAE;EACxDT,WAAW,EAAE;IACXW,KAAK,EAAEf,aAAa;IACpBgB,UAAU,EAAE,KAAK;IACjBC,QAAQ,EAAE,IAAI;IACdC,YAAY,EAAE;;CAEjB,CAAC;AACFhB,MAAM,CAACU,cAAc,CAACZ,aAAa,EAAES,MAAM,CAAC;AAE5C;EAAoCU;EAApC;;EAiBA;EAhBEC,wCAAe,GAAf;IACE,OAAOC,IAAI,CAACC,KAAK,CAACC,iBAAMC,QAAQ,WAAE,CAAC;EACrC,CAAC;EAEDJ,+BAAM,GAAN;IACE,OAAOG,iBAAMC,QAAQ,WAAE;EACzB,CAAC;EAEMJ,yBAAU,GAAjB,UAAkBK,MAAW;IAC3B,IAAIA,MAAM,YAAYL,cAAc,EAAE;MACpC,OAAOK,MAAM;KACd,MAAM,IAAIA,MAAM,YAAYhB,MAAM,IAAI,OAAOgB,MAAM,KAAK,QAAQ,EAAE;MACjE,OAAO,IAAIL,cAAc,CAACK,MAAM,CAAC;;IAEnC,OAAO,IAAIL,cAAc,CAACC,IAAI,CAACK,SAAS,CAACD,MAAM,CAAC,CAAC;EACnD,CAAC;EACH,qBAAC;AAAD,CAAC,CAjBmCzB,aAAa","names":["StringWrapper","Class","Object","getPrototypeOf","constructor","Constructor","Function","bind","apply","String","arguments","instance","setPrototypeOf","prototype","create","value","enumerable","writable","configurable","__extends","LazyJsonString","JSON","parse","_super","toString","object","stringify"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-sdk/smithy-client/src/lazy-json.ts"],"sourcesContent":["/**\n * Lazy String holder for JSON typed contents.\n */\n\ninterface StringWrapper {\n  new (arg: any): String;\n}\n\n/**\n * Because of https://github.com/microsoft/tslib/issues/95,\n * TS 'extends' shim doesn't support extending native types like String.\n * So here we create StringWrapper that duplicate everything from String\n * class including its prototype chain. So we can extend from here.\n */\n// @ts-ignore StringWrapper implementation is not a simple constructor\nexport const StringWrapper: StringWrapper = function () {\n  //@ts-ignore 'this' cannot be assigned to any, but Object.getPrototypeOf accepts any\n  const Class = Object.getPrototypeOf(this).constructor;\n  const Constructor = Function.bind.apply(String, [null as any, ...arguments]);\n  //@ts-ignore Call wrapped String constructor directly, don't bother typing it.\n  const instance = new Constructor();\n  Object.setPrototypeOf(instance, Class.prototype);\n  return instance as String;\n};\nStringWrapper.prototype = Object.create(String.prototype, {\n  constructor: {\n    value: StringWrapper,\n    enumerable: false,\n    writable: true,\n    configurable: true,\n  },\n});\nObject.setPrototypeOf(StringWrapper, String);\n\nexport class LazyJsonString extends StringWrapper {\n  deserializeJSON(): any {\n    return JSON.parse(super.toString());\n  }\n\n  toJSON(): string {\n    return super.toString();\n  }\n\n  static fromObject(object: any): LazyJsonString {\n    if (object instanceof LazyJsonString) {\n      return object;\n    } else if (object instanceof String || typeof object === \"string\") {\n      return new LazyJsonString(object);\n    }\n    return new LazyJsonString(JSON.stringify(object));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}