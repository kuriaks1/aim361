{"ast":null,"code":"import { __asyncValues, __awaiter, __extends, __generator, __read, __spread, __values } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport { isPredicateObj, isPredicateGroup, OpType, QueryOne } from '../../types';\nimport { isPrivateMode, traverseModel, validatePredicate, inMemoryPagination, keysEqual, getStorename, isSafariCompatabilityMode } from '../../util';\nimport { StorageAdapterBase } from './StorageAdapterBase';\nvar logger = new Logger('DataStore');\n/**\n * The point after which queries composed of multiple simple OR conditions\n * should scan-and-filter instead of individual queries for each condition.\n *\n * At some point, this should be configurable and/or dynamic based on table\n * size and possibly even on observed average seek latency. For now, it's\n * based on an manual \"binary search\" for the breakpoint as measured in the\n * unit test suite. This isn't necessarily optimal. But, it's at least derived\n * empirically, rather than theoretically and without any verification!\n *\n * REMEMBER! If you run more realistic benchmarks and update this value, update\n * this comment so the validity and accuracy of future query tuning exercises\n * can be compared to the methods used to derive the current value. E.g.,\n *\n * 1. In browser benchmark > unit test benchmark\n * 2. Multi-browser benchmark > single browser benchmark\n * 3. Benchmarks of various table sizes > static table size benchmark\n *\n * etc...\n *\n */\nvar MULTI_OR_CONDITION_SCAN_BREAKPOINT = 7;\n//\nvar DB_VERSION = 3;\nvar IndexedDBAdapter = /** @class */function (_super) {\n  __extends(IndexedDBAdapter, _super);\n  function IndexedDBAdapter() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.safariCompatabilityMode = false;\n    /**\n     * Checks the given path against the browser's IndexedDB implementation for\n     * necessary compatibility transformations, applying those transforms if needed.\n     *\n     * @param `keyArr` strings to compatibilize for browser-indexeddb index operations\n     * @returns An array or string, depending on and given key,\n     * that is ensured to be compatible with the IndexedDB implementation's nuances.\n     */\n    _this.canonicalKeyPath = function (keyArr) {\n      if (_this.safariCompatabilityMode) {\n        return keyArr.length > 1 ? keyArr : keyArr[0];\n      }\n      return keyArr;\n    };\n    return _this;\n    //#endregion\n  }\n  // checks are called by StorageAdapterBase class\n  IndexedDBAdapter.prototype.preSetUpChecks = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.setSafariCompatabilityMode()];\n          case 2:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.preOpCheck = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Initialize IndexedDB database\n   * Create new DB if one doesn't exist\n   * Upgrade outdated DB\n   *\n   * Called by `StorageAdapterBase.setUp()`\n   *\n   * @returns IDB Database instance\n   */\n  IndexedDBAdapter.prototype.initDb = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, idb.openDB(this.dbName, DB_VERSION, {\n              upgrade: function (db, oldVersion, newVersion, txn) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var _a, _b, storeName, origStore, tmpName, _c, namespaceName, modelName, modelInCurrentSchema, newStore, cursor, count, e_1_1, error_1;\n                  var e_1, _d;\n                  var _this = this;\n                  return __generator(this, function (_e) {\n                    switch (_e.label) {\n                      case 0:\n                        // create new database\n                        if (oldVersion === 0) {\n                          Object.keys(this.schema.namespaces).forEach(function (namespaceName) {\n                            var namespace = _this.schema.namespaces[namespaceName];\n                            Object.keys(namespace.models).forEach(function (modelName) {\n                              var storeName = getStorename(namespaceName, modelName);\n                              _this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                            });\n                          });\n                          return [2 /*return*/];\n                        }\n\n                        if (!((oldVersion === 1 || oldVersion === 2) && newVersion === 3)) return [3 /*break*/, 16];\n                        _e.label = 1;\n                      case 1:\n                        _e.trys.push([1, 14,, 15]);\n                        _e.label = 2;\n                      case 2:\n                        _e.trys.push([2, 11, 12, 13]);\n                        _a = __values(txn.objectStoreNames), _b = _a.next();\n                        _e.label = 3;\n                      case 3:\n                        if (!!_b.done) return [3 /*break*/, 10];\n                        storeName = _b.value;\n                        origStore = txn.objectStore(storeName);\n                        tmpName = \"tmp_\" + storeName;\n                        origStore.name = tmpName;\n                        _c = this.getNamespaceAndModelFromStorename(storeName), namespaceName = _c.namespaceName, modelName = _c.modelName;\n                        modelInCurrentSchema = modelName in this.schema.namespaces[namespaceName].models;\n                        if (!modelInCurrentSchema) {\n                          // delete original\n                          db.deleteObjectStore(tmpName);\n                          return [3 /*break*/, 9];\n                        }\n                        newStore = this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                        return [4 /*yield*/, origStore.openCursor()];\n                      case 4:\n                        cursor = _e.sent();\n                        count = 0;\n                        _e.label = 5;\n                      case 5:\n                        if (!(cursor && cursor.value)) return [3 /*break*/, 8];\n                        // we don't pass key, since they are all new entries in the new store\n                        return [4 /*yield*/, newStore.put(cursor.value)];\n                      case 6:\n                        // we don't pass key, since they are all new entries in the new store\n                        _e.sent();\n                        return [4 /*yield*/, cursor.continue()];\n                      case 7:\n                        cursor = _e.sent();\n                        count++;\n                        return [3 /*break*/, 5];\n                      case 8:\n                        // delete original\n                        db.deleteObjectStore(tmpName);\n                        logger.debug(count + \" \" + storeName + \" records migrated\");\n                        _e.label = 9;\n                      case 9:\n                        _b = _a.next();\n                        return [3 /*break*/, 3];\n                      case 10:\n                        return [3 /*break*/, 13];\n                      case 11:\n                        e_1_1 = _e.sent();\n                        e_1 = {\n                          error: e_1_1\n                        };\n                        return [3 /*break*/, 13];\n                      case 12:\n                        try {\n                          if (_b && !_b.done && (_d = _a.return)) _d.call(_a);\n                        } finally {\n                          if (e_1) throw e_1.error;\n                        }\n                        return [7 /*endfinally*/];\n                      case 13:\n                        // add new models created after IndexedDB, but before migration\n                        // this case may happen when a user has not opened an app for\n                        // some time and a new model is added during that time\n                        Object.keys(this.schema.namespaces).forEach(function (namespaceName) {\n                          var namespace = _this.schema.namespaces[namespaceName];\n                          var objectStoreNames = new Set(txn.objectStoreNames);\n                          Object.keys(namespace.models).map(function (modelName) {\n                            return [modelName, getStorename(namespaceName, modelName)];\n                          }).filter(function (_a) {\n                            var _b = __read(_a, 2),\n                              storeName = _b[1];\n                            return !objectStoreNames.has(storeName);\n                          }).forEach(function (_a) {\n                            var _b = __read(_a, 2),\n                              modelName = _b[0],\n                              storeName = _b[1];\n                            _this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                          });\n                        });\n                        return [3 /*break*/, 15];\n                      case 14:\n                        error_1 = _e.sent();\n                        logger.error('Error migrating IndexedDB data', error_1);\n                        txn.abort();\n                        throw error_1;\n                      case 15:\n                        return [2 /*return*/];\n                      case 16:\n                        return [2 /*return*/];\n                    }\n                  });\n                });\n              }\n            })];\n\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype._get = function (storeOrStoreName, keyArr) {\n    return __awaiter(this, void 0, void 0, function () {\n      var index, storeName, store, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (typeof storeOrStoreName === 'string') {\n              storeName = storeOrStoreName;\n              index = this.db.transaction(storeName, 'readonly').store.index('byPk');\n            } else {\n              store = storeOrStoreName;\n              index = store.index('byPk');\n            }\n            return [4 /*yield*/, index.get(this.canonicalKeyPath(keyArr))];\n          case 1:\n            result = _a.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.clear = function () {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            (_a = this.db) === null || _a === void 0 ? void 0 : _a.close();\n            return [4 /*yield*/, idb.deleteDB(this.dbName)];\n          case 2:\n            _b.sent();\n            this.db = undefined;\n            this.initPromise = undefined;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.save = function (model, condition) {\n    var e_2, _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, storeName, set, connectionStoreNames, modelKeyValues, tx, store, fromDB, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, keys, store_1, itemKeyValues, fromDB_1, opType, key, e_2_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _c.sent();\n            _b = this.saveMetadata(model), storeName = _b.storeName, set = _b.set, connectionStoreNames = _b.connectionStoreNames, modelKeyValues = _b.modelKeyValues;\n            tx = this.db.transaction(__spread([storeName], Array.from(set.values())), 'readwrite');\n            store = tx.objectStore(storeName);\n            return [4 /*yield*/, this._get(store, modelKeyValues)];\n          case 2:\n            fromDB = _c.sent();\n            this.validateSaveCondition(condition, fromDB);\n            result = [];\n            _c.label = 3;\n          case 3:\n            _c.trys.push([3, 11, 12, 17]);\n            connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n            _c.label = 4;\n          case 4:\n            return [4 /*yield*/, connectionStoreNames_1.next()];\n          case 5:\n            if (!(connectionStoreNames_1_1 = _c.sent(), !connectionStoreNames_1_1.done)) return [3 /*break*/, 10];\n            resItem = connectionStoreNames_1_1.value;\n            storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance, keys = resItem.keys;\n            store_1 = tx.objectStore(storeName_1);\n            itemKeyValues = keys.map(function (key) {\n              return item[key];\n            });\n            return [4 /*yield*/, this._get(store_1, itemKeyValues)];\n          case 6:\n            fromDB_1 = _c.sent();\n            opType = fromDB_1 ? OpType.UPDATE : OpType.INSERT;\n            if (!(keysEqual(itemKeyValues, modelKeyValues) || opType === OpType.INSERT)) return [3 /*break*/, 9];\n            return [4 /*yield*/, store_1.index('byPk').getKey(this.canonicalKeyPath(itemKeyValues))];\n          case 7:\n            key = _c.sent();\n            return [4 /*yield*/, store_1.put(item, key)];\n          case 8:\n            _c.sent();\n            result.push([instance, opType]);\n            _c.label = 9;\n          case 9:\n            return [3 /*break*/, 4];\n          case 10:\n            return [3 /*break*/, 17];\n          case 11:\n            e_2_1 = _c.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3 /*break*/, 17];\n          case 12:\n            _c.trys.push([12,, 15, 16]);\n            if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3 /*break*/, 14];\n            return [4 /*yield*/, _a.call(connectionStoreNames_1)];\n          case 13:\n            _c.sent();\n            _c.label = 14;\n          case 14:\n            return [3 /*break*/, 16];\n          case 15:\n            if (e_2) throw e_2.error;\n            return [7 /*endfinally*/];\n          case 16:\n            return [7 /*endfinally*/];\n          case 17:\n            return [4 /*yield*/, tx.done];\n          case 18:\n            _c.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, storeName, namespaceName, queryByKey, predicates, hasSort, hasPagination, records;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            _a = this.queryMetadata(modelConstructor, predicate, pagination), storeName = _a.storeName, namespaceName = _a.namespaceName, queryByKey = _a.queryByKey, predicates = _a.predicates, hasSort = _a.hasSort, hasPagination = _a.hasPagination;\n            return [4 /*yield*/, function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var record, filtered, all;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!queryByKey) return [3 /*break*/, 2];\n                      return [4 /*yield*/, this.getByKey(storeName, queryByKey)];\n                    case 1:\n                      record = _a.sent();\n                      return [2 /*return*/, record ? [record] : []];\n                    case 2:\n                      if (!predicates) return [3 /*break*/, 4];\n                      return [4 /*yield*/, this.filterOnPredicate(storeName, predicates)];\n                    case 3:\n                      filtered = _a.sent();\n                      return [2 /*return*/, this.inMemoryPagination(filtered, pagination)];\n                    case 4:\n                      if (!hasSort) return [3 /*break*/, 6];\n                      return [4 /*yield*/, this.getAll(storeName)];\n                    case 5:\n                      all = _a.sent();\n                      return [2 /*return*/, this.inMemoryPagination(all, pagination)];\n                    case 6:\n                      if (hasPagination) {\n                        return [2 /*return*/, this.enginePagination(storeName, pagination)];\n                      }\n                      return [2 /*return*/, this.getAll(storeName)];\n                  }\n                });\n              });\n            }()];\n          case 2:\n            records = _b.sent();\n            return [4 /*yield*/, this.load(namespaceName, modelConstructor.name, records)];\n          case 3:\n            return [2 /*return*/, _b.sent()];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, cursor, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _a.sent();\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4 /*yield*/, this.db.transaction([storeName], 'readonly').objectStore(storeName).openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev')];\n          case 2:\n            cursor = _a.sent();\n            result = cursor ? cursor.value : undefined;\n            return [2 /*return*/, result && this.modelInstanceCreator(modelConstructor, result)];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.batchSave = function (modelConstructor, items) {\n    return __awaiter(this, void 0, void 0, function () {\n      var modelName, namespaceName, storeName, result, txn, store, _loop_1, this_1, items_1, items_1_1, item, e_3_1;\n      var e_3, _a;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            if (items.length === 0) {\n              return [2 /*return*/, []];\n            }\n            modelName = modelConstructor.name;\n            namespaceName = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            result = [];\n            txn = this.db.transaction(storeName, 'readwrite');\n            store = txn.store;\n            _loop_1 = function (item) {\n              var model, connectedModels, keyValues, _deleted, index, key, instance;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    model = this_1.modelInstanceCreator(modelConstructor, item);\n                    connectedModels = traverseModel(modelName, model, this_1.schema.namespaces[namespaceName], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);\n                    keyValues = this_1.getIndexKeyValuesFromModel(model);\n                    _deleted = item._deleted;\n                    index = store.index('byPk');\n                    return [4 /*yield*/, index.getKey(this_1.canonicalKeyPath(keyValues))];\n                  case 1:\n                    key = _a.sent();\n                    if (!!_deleted) return [3 /*break*/, 3];\n                    instance = connectedModels.find(function (_a) {\n                      var instance = _a.instance;\n                      var instanceKeyValues = _this.getIndexKeyValuesFromModel(instance);\n                      return keysEqual(instanceKeyValues, keyValues);\n                    }).instance;\n                    result.push([instance, key ? OpType.UPDATE : OpType.INSERT]);\n                    return [4 /*yield*/, store.put(instance, key)];\n                  case 2:\n                    _a.sent();\n                    return [3 /*break*/, 5];\n                  case 3:\n                    result.push([item, OpType.DELETE]);\n                    if (!key) return [3 /*break*/, 5];\n                    return [4 /*yield*/, store.delete(key)];\n                  case 4:\n                    _a.sent();\n                    _a.label = 5;\n                  case 5:\n                    return [2 /*return*/];\n                }\n              });\n            };\n\n            this_1 = this;\n            _b.label = 2;\n          case 2:\n            _b.trys.push([2, 7, 8, 9]);\n            items_1 = __values(items), items_1_1 = items_1.next();\n            _b.label = 3;\n          case 3:\n            if (!!items_1_1.done) return [3 /*break*/, 6];\n            item = items_1_1.value;\n            return [5 /*yield**/, _loop_1(item)];\n          case 4:\n            _b.sent();\n            _b.label = 5;\n          case 5:\n            items_1_1 = items_1.next();\n            return [3 /*break*/, 3];\n          case 6:\n            return [3 /*break*/, 9];\n          case 7:\n            e_3_1 = _b.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3 /*break*/, 9];\n          case 8:\n            try {\n              if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n            } finally {\n              if (e_3) throw e_3.error;\n            }\n            return [7 /*endfinally*/];\n          case 9:\n            return [4 /*yield*/, txn.done];\n          case 10:\n            _b.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.deleteItem = function (deleteQueue) {\n    var e_4, _a, e_5, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var connectionStoreNames, tx, _c, _d, deleteItem, storeName, items, store, items_2, items_2_1, item, key, keyValues, itemKey, e_5_1, e_4_1;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            connectionStoreNames = deleteQueue.map(function (_a) {\n              var storeName = _a.storeName;\n              return storeName;\n            });\n            tx = this.db.transaction(__spread(connectionStoreNames), 'readwrite');\n            _e.label = 1;\n          case 1:\n            _e.trys.push([1, 22, 23, 28]);\n            _c = __asyncValues(deleteQueue);\n            _e.label = 2;\n          case 2:\n            return [4 /*yield*/, _c.next()];\n          case 3:\n            if (!(_d = _e.sent(), !_d.done)) return [3 /*break*/, 21];\n            deleteItem = _d.value;\n            storeName = deleteItem.storeName, items = deleteItem.items;\n            store = tx.objectStore(storeName);\n            _e.label = 4;\n          case 4:\n            _e.trys.push([4, 14, 15, 20]);\n            items_2 = __asyncValues(items);\n            _e.label = 5;\n          case 5:\n            return [4 /*yield*/, items_2.next()];\n          case 6:\n            if (!(items_2_1 = _e.sent(), !items_2_1.done)) return [3 /*break*/, 13];\n            item = items_2_1.value;\n            if (!item) return [3 /*break*/, 12];\n            key = void 0;\n            if (!(typeof item === 'object')) return [3 /*break*/, 8];\n            keyValues = this.getIndexKeyValuesFromModel(item);\n            return [4 /*yield*/, store.index('byPk').getKey(this.canonicalKeyPath(keyValues))];\n          case 7:\n            key = _e.sent();\n            return [3 /*break*/, 10];\n          case 8:\n            itemKey = item.toString();\n            return [4 /*yield*/, store.index('byPk').getKey(itemKey)];\n          case 9:\n            key = _e.sent();\n            _e.label = 10;\n          case 10:\n            if (!(key !== undefined)) return [3 /*break*/, 12];\n            return [4 /*yield*/, store.delete(key)];\n          case 11:\n            _e.sent();\n            _e.label = 12;\n          case 12:\n            return [3 /*break*/, 5];\n          case 13:\n            return [3 /*break*/, 20];\n          case 14:\n            e_5_1 = _e.sent();\n            e_5 = {\n              error: e_5_1\n            };\n            return [3 /*break*/, 20];\n          case 15:\n            _e.trys.push([15,, 18, 19]);\n            if (!(items_2_1 && !items_2_1.done && (_b = items_2.return))) return [3 /*break*/, 17];\n            return [4 /*yield*/, _b.call(items_2)];\n          case 16:\n            _e.sent();\n            _e.label = 17;\n          case 17:\n            return [3 /*break*/, 19];\n          case 18:\n            if (e_5) throw e_5.error;\n            return [7 /*endfinally*/];\n          case 19:\n            return [7 /*endfinally*/];\n          case 20:\n            return [3 /*break*/, 2];\n          case 21:\n            return [3 /*break*/, 28];\n          case 22:\n            e_4_1 = _e.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3 /*break*/, 28];\n          case 23:\n            _e.trys.push([23,, 26, 27]);\n            if (!(_d && !_d.done && (_a = _c.return))) return [3 /*break*/, 25];\n            return [4 /*yield*/, _a.call(_c)];\n          case 24:\n            _e.sent();\n            _e.label = 25;\n          case 25:\n            return [3 /*break*/, 27];\n          case 26:\n            if (e_4) throw e_4.error;\n            return [7 /*endfinally*/];\n          case 27:\n            return [7 /*endfinally*/];\n          case 28:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  //#region platform-specific helper methods\n  IndexedDBAdapter.prototype.checkPrivate = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var isPrivate;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, isPrivateMode().then(function (isPrivate) {\n              return isPrivate;\n            })];\n          case 1:\n            isPrivate = _a.sent();\n            if (isPrivate) {\n              logger.error(\"IndexedDB not supported in this browser's private mode\");\n              return [2 /*return*/, Promise.reject(\"IndexedDB not supported in this browser's private mode\")];\n            } else {\n              return [2 /*return*/, Promise.resolve()];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Whether the browser's implementation of IndexedDB is coercing single-field\n   * indexes to a scalar key.\n   *\n   * If this returns `true`, we need to treat indexes containing a single field\n   * as scalars.\n   *\n   * See PR description for reference:\n   * https://github.com/aws-amplify/amplify-js/pull/10527\n   */\n  IndexedDBAdapter.prototype.setSafariCompatabilityMode = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4 /*yield*/, isSafariCompatabilityMode()];\n          case 1:\n            _a.safariCompatabilityMode = _b.sent();\n            if (this.safariCompatabilityMode === true) {\n              logger.debug('IndexedDB Adapter is running in Safari Compatability Mode');\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.getNamespaceAndModelFromStorename = function (storeName) {\n    var _a = __read(storeName.split('_')),\n      namespaceName = _a[0],\n      modelNameArr = _a.slice(1);\n    return {\n      namespaceName: namespaceName,\n      modelName: modelNameArr.join('_')\n    };\n  };\n  IndexedDBAdapter.prototype.createObjectStoreForModel = function (db, namespaceName, storeName, modelName) {\n    var store = db.createObjectStore(storeName, {\n      autoIncrement: true\n    });\n    var indexes = this.schema.namespaces[namespaceName].relationships[modelName].indexes;\n    indexes.forEach(function (_a) {\n      var _b = __read(_a, 3),\n        idxName = _b[0],\n        keyPath = _b[1],\n        options = _b[2];\n      store.createIndex(idxName, keyPath, options);\n    });\n    return store;\n  };\n  IndexedDBAdapter.prototype.getByKey = function (storeName, keyValue) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._get(storeName, keyValue)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.getAll = function (storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Tries to generate an index fetcher for the given predicates. Assumes\n   * that the given predicate conditions are contained by an AND group and\n   * should therefore all match a single record.\n   *\n   * @param storeName The table to query.\n   * @param predicates The predicates to try to AND together.\n   * @param transaction\n   */\n  IndexedDBAdapter.prototype.matchingIndexQueries = function (storeName, predicates, transaction) {\n    var e_6, _a, e_7, _b;\n    var _this = this;\n    // could be expanded later to include `exec()` and a `cardinality` estimate?\n    var queries = [];\n    var predicateIndex = new Map();\n    try {\n      for (var predicates_1 = __values(predicates), predicates_1_1 = predicates_1.next(); !predicates_1_1.done; predicates_1_1 = predicates_1.next()) {\n        var predicate = predicates_1_1.value;\n        predicateIndex.set(String(predicate.field), predicate);\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (predicates_1_1 && !predicates_1_1.done && (_a = predicates_1.return)) _a.call(predicates_1);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n    var store = transaction.objectStore(storeName);\n    var _loop_2 = function (name_1) {\n      var e_8, _a;\n      var idx = store.index(name_1);\n      var keypath = Array.isArray(idx.keyPath) ? idx.keyPath : [idx.keyPath];\n      var matchingPredicateValues = [];\n      try {\n        for (var keypath_1 = (e_8 = void 0, __values(keypath)), keypath_1_1 = keypath_1.next(); !keypath_1_1.done; keypath_1_1 = keypath_1.next()) {\n          var field = keypath_1_1.value;\n          var p = predicateIndex.get(field);\n          if (p && p.operand !== null && p.operand !== undefined) {\n            matchingPredicateValues.push(p.operand);\n          } else {\n            break;\n          }\n        }\n      } catch (e_8_1) {\n        e_8 = {\n          error: e_8_1\n        };\n      } finally {\n        try {\n          if (keypath_1_1 && !keypath_1_1.done && (_a = keypath_1.return)) _a.call(keypath_1);\n        } finally {\n          if (e_8) throw e_8.error;\n        }\n      }\n      // if we have a matching predicate field for each component of this index,\n      // we can build a query for it. otherwise, we can't.\n      if (matchingPredicateValues.length === keypath.length) {\n        // re-create a transaction, because the transaction used to fetch the\n        // indexes may no longer be active.\n        queries.push(function () {\n          return _this.db.transaction(storeName).objectStore(storeName).index(name_1).getAll(_this.canonicalKeyPath(matchingPredicateValues));\n        });\n      }\n    };\n    try {\n      for (var _c = __values(store.indexNames), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var name_1 = _d.value;\n        _loop_2(name_1);\n      }\n    } catch (e_7_1) {\n      e_7 = {\n        error: e_7_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n      } finally {\n        if (e_7) throw e_7.error;\n      }\n    }\n    return queries;\n  };\n  IndexedDBAdapter.prototype.baseQueryIndex = function (storeName, predicates, transaction) {\n    return __awaiter(this, void 0, void 0, function () {\n      var predicateObjs, type, fieldPredicates, txn, result, groupQueries, objectQueries, indexedQueries;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            predicateObjs = predicates.predicates, type = predicates.type;\n            // the predicate objects we care about tend to be nested at least\n            // one level down: `{and: {or: {and: { <the predicates we want> }}}}`\n            // so, we unpack and/or groups until we find a group with more than 1\n            // child OR a child that is not a group (and is therefore a predicate \"object\").\n            while (predicateObjs.length === 1 && isPredicateGroup(predicateObjs[0]) && predicateObjs[0].type !== 'not') {\n              type = predicateObjs[0].type;\n              predicateObjs = predicateObjs[0].predicates;\n            }\n            fieldPredicates = predicateObjs.filter(function (p) {\n              return isPredicateObj(p) && p.operator === 'eq';\n            });\n            txn = transaction || this.db.transaction(storeName);\n            result = {};\n            if (!(type === 'or')) return [3 /*break*/, 2];\n            return [4 /*yield*/, Promise.all(predicateObjs.filter(function (o) {\n              return isPredicateGroup(o) && o.type === 'and';\n            }).map(function (o) {\n              return _this.baseQueryIndex(storeName, o, txn);\n            })).then(function (queries) {\n              return queries.filter(function (q) {\n                return q.indexedQueries.length === 1;\n              }).map(function (i) {\n                return i.indexedQueries;\n              });\n            })];\n          case 1:\n            groupQueries = _a.sent();\n            objectQueries = predicateObjs.filter(function (o) {\n              return isPredicateObj(o);\n            }).map(function (o) {\n              return _this.matchingIndexQueries(storeName, [o], txn);\n            });\n            indexedQueries = __spread(groupQueries, objectQueries).map(function (q) {\n              return q[0];\n            }).filter(function (i) {\n              return i;\n            });\n            // if, after hunting for base queries, we don't have exactly 1 base query\n            // for each child group + object, stop trying to optimize. we're not dealing\n            // with a simple query that fits the intended optimization path.\n            if (predicateObjs.length > indexedQueries.length) {\n              result = {\n                groupType: null,\n                indexedQueries: []\n              };\n            } else {\n              result = {\n                groupType: 'or',\n                indexedQueries: indexedQueries\n              };\n            }\n            return [3 /*break*/, 3];\n          case 2:\n            if (type === 'and') {\n              // our potential indexes or lacks thereof.\n              // note that we're only optimizing for `eq` right now.\n              result = {\n                groupType: type,\n                indexedQueries: this.matchingIndexQueries(storeName, fieldPredicates, txn)\n              };\n            } else {\n              result = {\n                groupType: null,\n                indexedQueries: []\n              };\n            }\n            _a.label = 3;\n          case 3:\n            if (!!transaction) return [3 /*break*/, 5];\n            return [4 /*yield*/, txn.done];\n          case 4:\n            _a.sent();\n            _a.label = 5;\n          case 5:\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.filterOnPredicate = function (storeName, predicates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var predicateObjs, type, _a, groupType, indexedQueries, candidateResults, distinctResults, indexedQueries_1, indexedQueries_1_1, query, resultGroup, resultGroup_1, resultGroup_1_1, item, distinctificationString, e_9_1, filtered;\n      var e_9, _b, e_10, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            predicateObjs = predicates.predicates, type = predicates.type;\n            return [4 /*yield*/, this.baseQueryIndex(storeName, predicates)];\n          case 1:\n            _a = _d.sent(), groupType = _a.groupType, indexedQueries = _a.indexedQueries;\n            if (!(groupType === 'and' && indexedQueries.length > 0)) return [3 /*break*/, 3];\n            return [4 /*yield*/, indexedQueries[0]()];\n          case 2:\n            // each condition must be satsified, we can form a base set with any\n            // ONE of those conditions and then filter.\n            candidateResults = _d.sent();\n            return [3 /*break*/, 14];\n          case 3:\n            if (!(groupType === 'or' && indexedQueries.length > 0 && indexedQueries.length <= MULTI_OR_CONDITION_SCAN_BREAKPOINT)) return [3 /*break*/, 12];\n            distinctResults = new Map();\n            _d.label = 4;\n          case 4:\n            _d.trys.push([4, 9, 10, 11]);\n            indexedQueries_1 = __values(indexedQueries), indexedQueries_1_1 = indexedQueries_1.next();\n            _d.label = 5;\n          case 5:\n            if (!!indexedQueries_1_1.done) return [3 /*break*/, 8];\n            query = indexedQueries_1_1.value;\n            return [4 /*yield*/, query()];\n          case 6:\n            resultGroup = _d.sent();\n            try {\n              for (resultGroup_1 = (e_10 = void 0, __values(resultGroup)), resultGroup_1_1 = resultGroup_1.next(); !resultGroup_1_1.done; resultGroup_1_1 = resultGroup_1.next()) {\n                item = resultGroup_1_1.value;\n                distinctificationString = JSON.stringify(item);\n                distinctResults.set(distinctificationString, item);\n              }\n            } catch (e_10_1) {\n              e_10 = {\n                error: e_10_1\n              };\n            } finally {\n              try {\n                if (resultGroup_1_1 && !resultGroup_1_1.done && (_c = resultGroup_1.return)) _c.call(resultGroup_1);\n              } finally {\n                if (e_10) throw e_10.error;\n              }\n            }\n            _d.label = 7;\n          case 7:\n            indexedQueries_1_1 = indexedQueries_1.next();\n            return [3 /*break*/, 5];\n          case 8:\n            return [3 /*break*/, 11];\n          case 9:\n            e_9_1 = _d.sent();\n            e_9 = {\n              error: e_9_1\n            };\n            return [3 /*break*/, 11];\n          case 10:\n            try {\n              if (indexedQueries_1_1 && !indexedQueries_1_1.done && (_b = indexedQueries_1.return)) _b.call(indexedQueries_1);\n            } finally {\n              if (e_9) throw e_9.error;\n            }\n            return [7 /*endfinally*/];\n          case 11:\n            // we could conceivably check for special conditions and return early here.\n            // but, this is simpler and has not yet had a measurable performance impact.\n            candidateResults = Array.from(distinctResults.values());\n            return [3 /*break*/, 14];\n          case 12:\n            return [4 /*yield*/, this.getAll(storeName)];\n          case 13:\n            // nothing intelligent we can do with `not` groups unless or until we start\n            // smashing comparison operators against indexes -- at which point we could\n            // perform some reversal here.\n            candidateResults = _d.sent();\n            _d.label = 14;\n          case 14:\n            filtered = predicateObjs ? candidateResults.filter(function (m) {\n              return validatePredicate(m, type, predicateObjs);\n            }) : candidateResults;\n            return [2 /*return*/, filtered];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.inMemoryPagination = function (records, pagination) {\n    return inMemoryPagination(records, pagination);\n  };\n  IndexedDBAdapter.prototype.enginePagination = function (storeName, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, _a, page, _b, limit, initialRecord, cursor, pageResults, hasLimit;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!pagination) return [3 /*break*/, 7];\n            _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;\n            initialRecord = Math.max(0, page * limit) || 0;\n            return [4 /*yield*/, this.db.transaction(storeName).objectStore(storeName).openCursor()];\n          case 1:\n            cursor = _c.sent();\n            if (!(cursor && initialRecord > 0)) return [3 /*break*/, 3];\n            return [4 /*yield*/, cursor.advance(initialRecord)];\n          case 2:\n            _c.sent();\n            _c.label = 3;\n          case 3:\n            pageResults = [];\n            hasLimit = typeof limit === 'number' && limit > 0;\n            _c.label = 4;\n          case 4:\n            if (!(cursor && cursor.value)) return [3 /*break*/, 6];\n            pageResults.push(cursor.value);\n            if (hasLimit && pageResults.length === limit) {\n              return [3 /*break*/, 6];\n            }\n            return [4 /*yield*/, cursor.continue()];\n          case 5:\n            cursor = _c.sent();\n            return [3 /*break*/, 4];\n          case 6:\n            result = pageResults;\n            return [3 /*break*/, 9];\n          case 7:\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 8:\n            result = _c.sent();\n            _c.label = 9;\n          case 9:\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  return IndexedDBAdapter;\n}(StorageAdapterBase);\nexport default new IndexedDBAdapter();","map":{"version":3,"mappings":";AAAA;AACA;AACA,SAASA,aAAa,IAAIC,MAAM,QAAQ,mBAAmB;AAC3D,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,SACCC,cAAc,EACdC,gBAAgB,EAGhBC,MAAM,EAMNC,QAAQ,QACF,aAAa;AACpB,SACCC,aAAa,EACbC,aAAa,EACbC,iBAAiB,EACjBC,kBAAkB,EAClBC,SAAS,EACTC,YAAY,EACZC,yBAAyB,QACnB,YAAY;AACnB,SAASC,kBAAkB,QAAQ,sBAAsB;AAEzD,IAAMC,MAAM,GAAG,IAAId,MAAM,CAAC,WAAW,CAAC;AAEtC;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAMe,kCAAkC,GAAG,CAAC;AAC5C;AACA,IAAMC,UAAU,GAAG,CAAC;AAEpB;EAA+BC;EAA/B;IAAA;IAESC,6BAAuB,GAAY,KAAK;IAgsBhD;;;;;;;;IAQQA,sBAAgB,GAAG,UAACC,MAA2B;MACtD,IAAID,KAAI,CAACE,uBAAuB,EAAE;QACjC,OAAOD,MAAM,CAACE,MAAM,GAAG,CAAC,GAAGF,MAAM,GAAGA,MAAM,CAAC,CAAC,CAAC;;MAE9C,OAAOA,MAAM;IACd,CAAC;;IACD;EACD;EA7sBC;EACgBG,yCAAc,GAA9B;;;;;YACC,qBAAM,IAAI,CAACC,YAAY,EAAE;;YAAzBC,SAAyB;YACzB,qBAAM,IAAI,CAACC,0BAA0B,EAAE;;YAAvCD,SAAuC;;;;;GACvC;;EAEeF,qCAAU,GAA1B;;;;;YACC,qBAAM,IAAI,CAACC,YAAY,EAAE;;YAAzBC,SAAyB;;;;;GACzB;EAED;;;;;;;;;EASgBF,iCAAM,GAAtB;;;;;;YACQ,qBAAMrB,GAAG,CAACyB,MAAM,CAAC,IAAI,CAACC,MAAM,EAAEX,UAAU,EAAE;cAChDY,OAAO,EAAE,UAAOC,EAAE,EAAEC,UAAU,EAAEC,UAAU,EAAEC,GAAG;gBAAA;;;;;;;wBAC9C;wBACA,IAAIF,UAAU,KAAK,CAAC,EAAE;0BACrBG,MAAM,CAACC,IAAI,CAAC,IAAI,CAACC,MAAM,CAACC,UAAU,CAAC,CAACC,OAAO,CAAC,uBAAa;4BACxD,IAAMC,SAAS,GAAGpB,KAAI,CAACiB,MAAM,CAACC,UAAU,CAACG,aAAa,CAAC;4BAEvDN,MAAM,CAACC,IAAI,CAACI,SAAS,CAACE,MAAM,CAAC,CAACH,OAAO,CAAC,mBAAS;8BAC9C,IAAMI,SAAS,GAAG9B,YAAY,CAAC4B,aAAa,EAAEG,SAAS,CAAC;8BACxDxB,KAAI,CAACyB,yBAAyB,CAC7Bd,EAAE,EACFU,aAAa,EACbE,SAAS,EACTC,SAAS,CACT;4BACF,CAAC,CAAC;0BACH,CAAC,CAAC;0BAEF;;;8BAIG,CAACZ,UAAU,KAAK,CAAC,IAAIA,UAAU,KAAK,CAAC,KAAKC,UAAU,KAAK,CAAC,GAA1D;;;;;;;wBAEsBP,iBAAG,CAACoB,gBAAgB;;;;wBAAjCH,SAAS;wBACbI,SAAS,GAAGb,GAAG,CAACc,WAAW,CAACL,SAAS,CAAC;wBAGtCM,OAAO,GAAG,SAAON,SAAW;wBAClCI,SAAS,CAACG,IAAI,GAAGD,OAAO;wBAElBE,KACL,IAAI,CAACC,iCAAiC,CAACT,SAAS,CAAC,EAD1CF,aAAa,qBAAEG,SAAS;wBAG1BS,oBAAoB,GACzBT,SAAS,IAAI,IAAI,CAACP,MAAM,CAACC,UAAU,CAACG,aAAa,CAAC,CAACC,MAAM;wBAE1D,IAAI,CAACW,oBAAoB,EAAE;0BAC1B;0BACAtB,EAAE,CAACuB,iBAAiB,CAACL,OAAO,CAAC;0BAC7B;;wBAGKM,QAAQ,GAAG,IAAI,CAACV,yBAAyB,CAC9Cd,EAAE,EACFU,aAAa,EACbE,SAAS,EACTC,SAAS,CACT;wBAEY,qBAAMG,SAAS,CAACS,UAAU,EAAE;;wBAArCC,MAAM,GAAGC,SAA4B;wBACrCC,KAAK,GAAG,CAAC;;;8BAGNF,MAAM,IAAIA,MAAM,CAACG,KAAK;wBAC5B;wBACA,qBAAML,QAAQ,CAACM,GAAG,CAACJ,MAAM,CAACG,KAAK,CAAC;;wBADhC;wBACAF,SAAgC;wBAEvB,qBAAMD,MAAM,CAACK,QAAQ,EAAE;;wBAAhCL,MAAM,GAAGC,SAAuB;wBAChCC,KAAK,EAAE;;;wBAGR;wBACA5B,EAAE,CAACuB,iBAAiB,CAACL,OAAO,CAAC;wBAE7BjC,MAAM,CAAC+C,KAAK,CAAIJ,KAAK,SAAIhB,SAAS,sBAAmB,CAAC;;;;;;;;;;;;;;;;;;;;;wBAGvD;wBACA;wBACA;wBACAR,MAAM,CAACC,IAAI,CAAC,IAAI,CAACC,MAAM,CAACC,UAAU,CAAC,CAACC,OAAO,CAAC,uBAAa;0BACxD,IAAMC,SAAS,GAAGpB,KAAI,CAACiB,MAAM,CAACC,UAAU,CAACG,aAAa,CAAC;0BACvD,IAAMK,gBAAgB,GAAG,IAAIkB,GAAG,CAAC9B,GAAG,CAACY,gBAAgB,CAAC;0BAEtDX,MAAM,CAACC,IAAI,CAACI,SAAS,CAACE,MAAM,CAAC,CAC3BuB,GAAG,CAAC,mBAAS;4BACb,OAAO,CAACrB,SAAS,EAAE/B,YAAY,CAAC4B,aAAa,EAAEG,SAAS,CAAC,CAAC;0BAC3D,CAAC,CAAC,CACDsB,MAAM,CAAC,UAACxC,EAAa;gCAAbyC,kBAAa;8BAAVxB,iBAAS;4BAAM,QAACG,gBAAgB,CAACsB,GAAG,CAACzB,SAAS,CAAC;0BAAhC,CAAgC,CAAC,CAC3DJ,OAAO,CAAC,UAACb,EAAsB;gCAAtByC,kBAAsB;8BAArBvB,iBAAS;8BAAED,iBAAS;4BAC9BvB,KAAI,CAACyB,yBAAyB,CAC7Bd,EAAE,EACFU,aAAa,EACbE,SAAS,EACTC,SAAS,CACT;0BACF,CAAC,CAAC;wBACJ,CAAC,CAAC;;;;wBAEF5B,MAAM,CAACqD,KAAK,CAAC,gCAAgC,EAAEC,OAAK,CAAC;wBACrDpC,GAAG,CAACqC,KAAK,EAAE;wBACX,MAAMD,OAAK;;wBAGZ;;;;;;;aAGF,CAAC;;;YAlGF,sBAAO5C,SAkGL;;;;GACF;EAEeF,+BAAI,GAApB,UACCgD,gBAA8C,EAC9CnD,MAAgB;;;;;;YAIhB,IAAI,OAAOmD,gBAAgB,KAAK,QAAQ,EAAE;cACnC7B,SAAS,GAAG6B,gBAAgB;cAClCC,KAAK,GAAG,IAAI,CAAC1C,EAAE,CAAC2C,WAAW,CAAC/B,SAAS,EAAE,UAAU,CAAC,CAACgC,KAAK,CAACF,KAAK,CAAC,MAAM,CAAC;aACtE,MAAM;cACAE,KAAK,GAAGH,gBAAgB;cAC9BC,KAAK,GAAGE,KAAK,CAACF,KAAK,CAAC,MAAM,CAAC;;YAGb,qBAAMA,KAAK,CAACG,GAAG,CAAC,IAAI,CAACC,gBAAgB,CAACxD,MAAM,CAAC,CAAC;;YAAvDyD,MAAM,GAAGpD,SAA8C;YAE7D,sBAAUoD,MAAM;;;;GAChB;EAEKtD,gCAAK,GAAX;;;;;;YACC,qBAAM,IAAI,CAACC,YAAY,EAAE;;YAAzB0C,SAAyB;YAEzB,UAAI,CAACpC,EAAE,0CAAEgD,KAAK;YACd,qBAAM5E,GAAG,CAAC6E,QAAQ,CAAC,IAAI,CAACnD,MAAM,CAAC;;YAA/BsC,SAA+B;YAE/B,IAAI,CAACpC,EAAE,GAAGkD,SAAU;YACpB,IAAI,CAACC,WAAW,GAAGD,SAAU;;;;;GAC7B;;EAEKzD,+BAAI,GAAV,UACC2D,KAAQ,EACRC,SAA6B;;;;;;;YAE7B,qBAAM,IAAI,CAAC3D,YAAY,EAAE;;YAAzB0B,SAAyB;YAEnBgB,KACL,IAAI,CAACkB,YAAY,CAACF,KAAK,CAAC,EADjBxC,SAAS,iBAAE2C,GAAG,WAAEC,oBAAoB,4BAAEC,cAAc;YAGtDC,EAAE,GAAG,IAAI,CAAC1D,EAAE,CAAC2C,WAAW,WAC5B/B,SAAS,GAAK+C,KAAK,CAACC,IAAI,CAACL,GAAG,CAACM,MAAM,EAAE,CAAC,GACvC,WAAW,CACX;YAEKjB,KAAK,GAAGc,EAAE,CAACzC,WAAW,CAACL,SAAS,CAAC;YACxB,qBAAM,IAAI,CAACkD,IAAI,CAAClB,KAAK,EAAEa,cAAc,CAAC;;YAA/CM,MAAM,GAAG3C,SAAsC;YAErD,IAAI,CAAC4C,qBAAqB,CAACX,SAAS,EAAEU,MAAM,CAAC;YAEvChB,MAAM,GAAyC,EAAE;;;;YAC3BkB,2DAAoB;;;;;;YAA/BC,OAAO;YACfC,cAAoCD,OAAO,UAAlC,EAAEE,IAAI,GAAqBF,OAAO,KAA5B,EAAEG,QAAQ,GAAWH,OAAO,SAAlB,EAAE7D,IAAI,GAAK6D,OAAO,KAAZ;YACjCI,UAAQZ,EAAE,CAACzC,WAAW,CAACkD,WAAS,CAAC;YAEjCI,aAAa,GAAalE,IAAI,CAAC6B,GAAG,CAAC,aAAG;cAAI,WAAI,CAACsC,GAAG,CAAC;YAAT,CAAS,CAAC;YAExC,qBAAM,IAAI,CAACV,IAAI,CAACQ,OAAK,EAAEC,aAAa,CAAC;;YAAjDE,WAAYrD,SAAqC;YACjDsD,MAAM,GAAWD,QAAM,GAAGlG,MAAM,CAACoG,MAAM,GAAGpG,MAAM,CAACqG,MAAM;kBAG5D/F,SAAS,CAAC0F,aAAa,EAAEd,cAAc,CAAC,IACxCiB,MAAM,KAAKnG,MAAM,CAACqG,MAAM,GADxB;YAGY,qBAAMN,OAAK,CACrB5B,KAAK,CAAC,MAAM,CAAC,CACbmC,MAAM,CAAC,IAAI,CAAC/B,gBAAgB,CAACyB,aAAa,CAAC,CAAC;;YAFxCC,GAAG,GAAGpD,SAEkC;YAC9C,qBAAMkD,OAAK,CAACxC,GAAG,CAACsC,IAAI,EAAEI,GAAG,CAAC;;YAA1BpD,SAA0B;YAC1B2B,MAAM,CAAC+B,IAAI,CAAC,CAACT,QAAQ,EAAEK,MAAM,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;YAGjC,qBAAMhB,EAAE,CAACqB,IAAI;;YAAb3D,SAAa;YAEb,sBAAO2B,MAAM;;;;GACb;EAEKtD,gCAAK,GAAX,UACCuF,gBAA+C,EAC/CC,SAA6B,EAC7BC,UAA+B;;;;;;;YAE/B,qBAAM,IAAI,CAACxF,YAAY,EAAE;;YAAzB0C,SAAyB;YACnBzC,KAOF,IAAI,CAACwF,aAAa,CAACH,gBAAgB,EAAEC,SAAS,EAAEC,UAAU,CAAC,EAN9DtE,SAAS,iBACTF,aAAa,qBACb0E,UAAU,kBACVC,UAAU,kBACVC,OAAO,eACPC,aAAa;YAGQ,qBAAO;cAAA;;;;;2BAYxBH,UAAU,EAAV;sBACY,qBAAM,IAAI,CAACI,QAAQ,CAAC5E,SAAS,EAAEwE,UAAU,CAAC;;sBAAnDK,MAAM,GAAG9F,SAA0C;sBACzD,sBAAO8F,MAAM,GAAG,CAACA,MAAM,CAAC,GAAG,EAAE;;2BAG1BJ,UAAU,EAAV;sBACc,qBAAM,IAAI,CAACK,iBAAiB,CAAC9E,SAAS,EAAEyE,UAAU,CAAC;;sBAA9DM,QAAQ,GAAGhG,SAAmD;sBACpE,sBAAO,IAAI,CAACf,kBAAkB,CAAC+G,QAAQ,EAAET,UAAU,CAAC;;2BAGjDI,OAAO,EAAP;sBACS,qBAAM,IAAI,CAACM,MAAM,CAAChF,SAAS,CAAC;;sBAAlCiF,GAAG,GAAGlG,SAA4B;sBACxC,sBAAO,IAAI,CAACf,kBAAkB,CAACiH,GAAG,EAAEX,UAAU,CAAC;;sBAGhD,IAAIK,aAAa,EAAE;wBAClB,sBAAO,IAAI,CAACO,gBAAgB,CAAClF,SAAS,EAAEsE,UAAU,CAAC;;sBAGpD,sBAAO,IAAI,CAACU,MAAM,CAAChF,SAAS,CAAC;;;;aAC7B,CAAC,CAAE;;YAhCEmF,OAAO,GAAS3D,SAgCV;YAEL,qBAAM,IAAI,CAAC4D,IAAI,CAACtF,aAAa,EAAEsE,gBAAgB,CAAC7D,IAAI,EAAE4E,OAAO,CAAC;;YAArE,sBAAO3D,SAA8D;;;;GACrE;EAEK3C,mCAAQ,GAAd,UACCuF,gBAA+C,EAC/CiB,WAAsC;IAAtC;MAAAA,cAAwBzH,QAAQ,CAAC0H,KAAK;IAAA;;;;;;YAEtC,qBAAM,IAAI,CAACxG,YAAY,EAAE;;YAAzBC,SAAyB;YACnBiB,SAAS,GAAG,IAAI,CAACuF,oBAAoB,CAACnB,gBAAgB,CAAC;YAE9C,qBAAM,IAAI,CAAChF,EAAE,CAC1B2C,WAAW,CAAC,CAAC/B,SAAS,CAAC,EAAE,UAAU,CAAC,CACpCK,WAAW,CAACL,SAAS,CAAC,CACtBa,UAAU,CAACyB,SAAS,EAAE+C,WAAW,KAAKzH,QAAQ,CAAC0H,KAAK,GAAG,MAAM,GAAG,MAAM,CAAC;;YAHnExE,MAAM,GAAG/B,SAG0D;YAEnEoD,MAAM,GAAGrB,MAAM,GAAMA,MAAM,CAACG,KAAK,GAAGqB,SAAS;YAEnD,sBAAOH,MAAM,IAAI,IAAI,CAACqD,oBAAoB,CAACpB,gBAAgB,EAAEjC,MAAM,CAAC;;;;GACpE;EAEKtD,oCAAS,GAAf,UACCuF,gBAAiD,EACjDqB,KAA8B;;;;;;;;YAE9B,qBAAM,IAAI,CAAC3G,YAAY,EAAE;;YAAzB0C,SAAyB;YAEzB,IAAIiE,KAAK,CAAC7G,MAAM,KAAK,CAAC,EAAE;cACvB,sBAAO,EAAE;;YAGJqB,SAAS,GAAGmE,gBAAgB,CAAC7D,IAAI;YACjCT,aAAa,GAAG,IAAI,CAAC4F,iBAAiB,CAACtB,gBAAgB,CAAC;YACxDpE,SAAS,GAAG,IAAI,CAACuF,oBAAoB,CAACnB,gBAAgB,CAAC;YACvDjC,MAAM,GAAkB,EAAE;YAE1B5C,GAAG,GAAG,IAAI,CAACH,EAAE,CAAC2C,WAAW,CAAC/B,SAAS,EAAE,WAAW,CAAC;YACjDgC,KAAK,GAAGzC,GAAG,CAACyC,KAAK;gCAEZwB,IAAI;;;;;oBACRhB,KAAK,GAAGmD,OAAKH,oBAAoB,CAACpB,gBAAgB,EAAEZ,IAAI,CAAC;oBAEzDoC,eAAe,GAAG9H,aAAa,CACpCmC,SAAS,EACTuC,KAAK,EACLmD,OAAKjG,MAAM,CAACC,UAAU,CAACG,aAAa,CAAC,EACrC6F,OAAKH,oBAAoB,EACzBG,OAAKE,8BAA+B,CACpC;oBAEKC,SAAS,GAAGH,OAAKI,0BAA0B,CAACvD,KAAK,CAAC;oBAChDwD,QAAQ,GAAKxC,IAAI,SAAT;oBAEV1B,KAAK,GAAGE,KAAK,CAACF,KAAK,CAAC,MAAM,CAAC;oBAErB,qBAAMA,KAAK,CAACmC,MAAM,CAAC0B,OAAKzD,gBAAgB,CAAC4D,SAAS,CAAC,CAAC;;oBAA1DlC,GAAG,GAAG7E,SAAoD;yBAE5D,CAACiH,QAAQ,EAAT;oBACKvC,QAAQ,GAAKmC,eAAe,CAACK,IAAI,CAAC,UAAClH,EAAY;0BAAV0E,sBAAQ;sBACpD,IAAMyC,iBAAiB,GAAGzH,KAAI,CAACsH,0BAA0B,CAACtC,QAAQ,CAAC;sBACnE,OAAOxF,SAAS,CAACiI,iBAAiB,EAAEJ,SAAS,CAAC;oBAC/C,CAAC,CAAE,SAHa;oBAKhB3D,MAAM,CAAC+B,IAAI,CAAC,CACET,QAAS,EACtBG,GAAG,GAAGjG,MAAM,CAACoG,MAAM,GAAGpG,MAAM,CAACqG,MAAM,CACnC,CAAC;oBACF,qBAAMhC,KAAK,CAACd,GAAG,CAACuC,QAAQ,EAAEG,GAAG,CAAC;;oBAA9B7E,SAA8B;;;oBAE9BoD,MAAM,CAAC+B,IAAI,CAAC,CAAcV,IAAK,EAAE7F,MAAM,CAACwI,MAAM,CAAC,CAAC;yBAE5CvC,GAAG,EAAH;oBACH,qBAAM5B,KAAK,CAACoE,MAAM,CAACxC,GAAG,CAAC;;oBAAvB7E,SAAuB;;;;;;;;;;;;YAjCPsH,wBAAK;;;;YAAb7C,IAAI;0CAAJA,IAAI;;;;;;;;;;;;;;;;;;;;;;;YAsCf,qBAAMjE,GAAG,CAAC4E,IAAI;;YAAd3C,SAAc;YAEd,sBAAOW,MAAM;;;;GACb;EAEetD,qCAAU,GAA1B,UACCyH,WAGG;;;;;;;YAEG1D,oBAAoB,GAAG0D,WAAY,CAAChF,GAAG,CAAC,UAACvC,EAAa;kBAAXiB,wBAAS;cACzD,OAAOA,SAAS;YACjB,CAAC,CAAC;YAEI8C,EAAE,GAAG,IAAI,CAAC1D,EAAE,CAAC2C,WAAW,UAAKa,oBAAoB,GAAG,WAAW,CAAC;;;;YACvCpC,8BAAY;;;;;;YAA1B+F,UAAU;YAClBvG,SAAS,GAAYuG,UAAU,UAAtB,EAAEd,KAAK,GAAKc,UAAU,MAAf;YAClBvE,KAAK,GAAGc,EAAE,CAACzC,WAAW,CAACL,SAAS,CAAC;;;;YAEdwG,6BAAK;;;;;;YAAbhD,IAAI;iBAChBA,IAAI,EAAJ;YACCI,GAAG,SAAyB;kBAE5B,OAAOJ,IAAI,KAAK,QAAQ,GAAxB;YACGsC,SAAS,GAAG,IAAI,CAACC,0BAA0B,CAACvC,IAAS,CAAC;YACtD,qBAAMxB,KAAK,CACfF,KAAK,CAAC,MAAM,CAAC,CACbmC,MAAM,CAAC,IAAI,CAAC/B,gBAAgB,CAAC4D,SAAS,CAAC,CAAC;;YAF1ClC,GAAG,GAAG7C,SAEoC;;;YAEpC0F,OAAO,GAAGjD,IAAI,CAACkD,QAAQ,EAAE;YACzB,qBAAM1E,KAAK,CAACF,KAAK,CAAC,MAAM,CAAC,CAACmC,MAAM,CAACwC,OAAO,CAAC;;YAA/C7C,GAAG,GAAG7C,SAAyC;;;kBAG5C6C,GAAG,KAAKtB,SAAS,GAAjB;YACH,qBAAMN,KAAK,CAACoE,MAAM,CAACxC,GAAG,CAAC;;YAAvB7C,SAAuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAK3B;EAED;EAEclC,uCAAY,GAA1B;;;;;;YACmB,qBAAMhB,aAAa,EAAE,CAAC8I,IAAI,CAAC,mBAAS;cACrD,OAAOC,SAAS;YACjB,CAAC,CAAC;;YAFIA,SAAS,GAAG7H,SAEhB;YACF,IAAI6H,SAAS,EAAE;cACdvI,MAAM,CAACqD,KAAK,CAAC,wDAAwD,CAAC;cACtE,sBAAOmF,OAAO,CAACC,MAAM,CACpB,wDAAwD,CACxD;aACD,MAAM;cACN,sBAAOD,OAAO,CAACE,OAAO,EAAE;;;;;;GAEzB;EAED;;;;;;;;;;EAUclI,qDAA0B,GAAxC;;;;;;YACCE,SAAI;YAA2B,qBAAMZ,yBAAyB,EAAE;;YAAhEY,GAAKJ,uBAAuB,GAAG6C,SAAiC;YAEhE,IAAI,IAAI,CAAC7C,uBAAuB,KAAK,IAAI,EAAE;cAC1CN,MAAM,CAAC+C,KAAK,CAAC,2DAA2D,CAAC;;;;;;GAE1E;;EAEOvC,4DAAiC,GAAzC,UAA0CmB,SAAiB;IACpD,qCAAuD;MAAtDF,qBAAa;MAAEkH,0BAAuC;IAC7D,OAAO;MACNlH,aAAa;MACbG,SAAS,EAAE+G,YAAY,CAACC,IAAI,CAAC,GAAG;KAChC;EACF,CAAC;EAEOpI,oDAAyB,GAAjC,UACCO,EAAoB,EACpBU,aAAqB,EACrBE,SAAiB,EACjBC,SAAiB;IAEjB,IAAM+B,KAAK,GAAG5C,EAAE,CAAC8H,iBAAiB,CAAClH,SAAS,EAAE;MAC7CmH,aAAa,EAAE;KACf,CAAC;IAEM,oFAAO;IAGfC,OAAO,CAACxH,OAAO,CAAC,UAACb,EAA2B;UAA3ByC,kBAA2B;QAA1B6F,eAAO;QAAEC,eAAO;QAAEC,eAAO;MAC1CvF,KAAK,CAACwF,WAAW,CAACH,OAAO,EAAEC,OAAO,EAAEC,OAAO,CAAC;IAC7C,CAAC,CAAC;IAEF,OAAOvF,KAAK;EACb,CAAC;EAEanD,mCAAQ,GAAtB,UACCmB,SAAiB,EACjByH,QAAkB;;;;;YAER,qBAAM,IAAI,CAACvE,IAAI,CAAClD,SAAS,EAAEyH,QAAQ,CAAC;;YAA9C,sBAAU1I,SAAoC;;;;GAC9C;EAEaF,iCAAM,GAApB,UACCmB,SAAiB;;;;;YAEV,qBAAM,IAAI,CAACZ,EAAE,CAAC4F,MAAM,CAAChF,SAAS,CAAC;;YAAtC,sBAAOjB,SAA+B;;;;GACtC;EAED;;;;;;;;;EASQF,+CAAoB,GAA5B,UACCmB,SAAiB,EACjByE,UAAgC,EAChC1C,WAAmD;;IAHpD;IAKC;IACA,IAAM2F,OAAO,GAA2B,EAAE;IAE1C,IAAMC,cAAc,GAAG,IAAIC,GAAG,EAA8B;;MAC5D,KAAwB,sCAAU,qGAAE;QAA/B,IAAMvD,SAAS;QACnBsD,cAAc,CAAChF,GAAG,CAACkF,MAAM,CAACxD,SAAS,CAACyD,KAAK,CAAC,EAAEzD,SAAS,CAAC;;;;;;;;;;;;;IAGvD,IAAMrC,KAAK,GAAGD,WAAW,CAAC1B,WAAW,CAACL,SAAS,CAAC;4BACrC+H,MAAI;;MACd,IAAMC,GAAG,GAAGhG,KAAK,CAACF,KAAK,CAACiG,MAAI,CAAC;MAC7B,IAAME,OAAO,GAAGlF,KAAK,CAACmF,OAAO,CAACF,GAAG,CAACV,OAAO,CAAC,GAAGU,GAAG,CAACV,OAAO,GAAG,CAACU,GAAG,CAACV,OAAO,CAAC;MACxE,IAAMa,uBAAuB,GAAwB,EAAE;;QAEvD,KAAoB,+CAAO,uFAAE;UAAxB,IAAML,KAAK;UACf,IAAMM,CAAC,GAAGT,cAAc,CAAC1F,GAAG,CAAC6F,KAAK,CAAC;UACnC,IAAIM,CAAC,IAAIA,CAAC,CAACC,OAAO,KAAK,IAAI,IAAID,CAAC,CAACC,OAAO,KAAK/F,SAAS,EAAE;YACvD6F,uBAAuB,CAACjE,IAAI,CAACkE,CAAC,CAACC,OAAO,CAAC;WACvC,MAAM;YACN;;;;;;;;;;;;;;MAIF;MACA;MACA,IAAIF,uBAAuB,CAACvJ,MAAM,KAAKqJ,OAAO,CAACrJ,MAAM,EAAE;QACtD;QACA;QACA8I,OAAO,CAACxD,IAAI,CAAC;UACZ,YAAI,CAAC9E,EAAE,CACL2C,WAAW,CAAC/B,SAAS,CAAC,CACtBK,WAAW,CAACL,SAAS,CAAC,CACtB8B,KAAK,CAACiG,MAAI,CAAC,CACX/C,MAAM,CAACvG,KAAI,CAACyD,gBAAgB,CAACiG,uBAAuB,CAAC,CAAC;QAJxD,CAIwD,CACxD;;;;MAzBH,KAAmB,uBAAK,CAACG,UAAU;QAA9B,IAAMP,MAAI;gBAAJA,MAAI;;;;;;;;;;;;;IA6Bf,OAAOL,OAAO;EACf,CAAC;EAEa7I,yCAAc,GAA5B,UACCmB,SAAiB,EACjByE,UAA8B,EAC9B1C,WAAgE;;;;;;;YAE9CwG,aAAa,GAAW9D,UAAU,WAArB,EAAE+D,IAAI,GAAK/D,UAAU,KAAf;YAErC;YACA;YACA;YACA;YACA,OACC8D,aAAa,CAAC3J,MAAM,KAAK,CAAC,IAC1BlB,gBAAgB,CAAC6K,aAAa,CAAC,CAAC,CAAC,CAAC,IACjCA,aAAa,CAAC,CAAC,CAAwB,CAACC,IAAI,KAAK,KAAK,EACtD;cACDA,IAAI,GAAID,aAAa,CAAC,CAAC,CAAwB,CAACC,IAAI;cACpDD,aAAa,GAAIA,aAAa,CAAC,CAAC,CAAwB,CAAC9D,UAAU;;YAG9DgE,eAAe,GAAGF,aAAa,CAAChH,MAAM,CAC3C,WAAC;cAAI,qBAAc,CAAC6G,CAAC,CAAC,IAAIA,CAAC,CAACM,QAAQ,KAAK,IAAI;YAAxC,CAAwC,CACrB;YAInBnJ,GAAG,GAAGwC,WAAW,IAAI,IAAI,CAAC3C,EAAE,CAAC2C,WAAW,CAAC/B,SAAS,CAAC;YAErDmC,MAAM,GAAG,EAGZ;kBAIGqG,IAAI,KAAK,IAAI,GAAb;YAQkB,qBAAM3B,OAAO,CAAC5B,GAAG,CACrCsD,aAAa,CACXhH,MAAM,CAAC,WAAC;cAAI,uBAAgB,CAACoH,CAAC,CAAC,IAAIA,CAAC,CAACH,IAAI,KAAK,KAAK;YAAvC,CAAuC,CAAC,CACpDlH,GAAG,CAAC,WAAC;cACL,YAAI,CAACsH,cAAc,CAAC5I,SAAS,EAAE2I,CAAuB,EAAEpJ,GAAG,CAAC;YAA5D,CAA4D,CAC5D,CACF,CAACoH,IAAI,CAAC,iBAAO;cACb,cAAO,CACLpF,MAAM,CAAC,WAAC;gBAAI,QAAC,CAACsH,cAAc,CAACjK,MAAM,KAAK,CAAC;cAA7B,CAA6B,CAAC,CAC1C0C,GAAG,CAAC,WAAC;gBAAI,QAAC,CAACuH,cAAc;cAAhB,CAAgB,CAAC;YAF5B,CAE4B,CAC5B;;YAVKC,YAAY,GAAG/J,SAUpB;YAKKgK,aAAa,GAAGR,aAAa,CACjChH,MAAM,CAAC,WAAC;cAAI,qBAAc,CAACoH,CAAC,CAAC;YAAjB,CAAiB,CAAC,CAC9BrH,GAAG,CAAC,WAAC;cACL,YAAI,CAAC0H,oBAAoB,CAAChJ,SAAS,EAAE,CAAC2I,CAAuB,CAAC,EAAEpJ,GAAG,CAAC;YAApE,CAAoE,CACpE;YAEIsJ,cAAc,GAAGI,SAAIH,YAAY,EAAKC,aAAa,EACvDzH,GAAG,CAAC,WAAC;cAAI,QAAC,CAAC,CAAC,CAAC;YAAJ,CAAI,CAAC,CACdC,MAAM,CAAC,WAAC;cAAI,QAAC;YAAD,CAAC,CAAC;YAEhB;YACA;YACA;YACA,IAAIgH,aAAa,CAAC3J,MAAM,GAAGiK,cAAc,CAACjK,MAAM,EAAE;cACjDuD,MAAM,GAAG;gBACR+G,SAAS,EAAE,IAAI;gBACfL,cAAc,EAAE;eAChB;aACD,MAAM;cACN1G,MAAM,GAAG;gBACR+G,SAAS,EAAE,IAAI;gBACfL,cAAc;eACd;;;;YAEI,IAAIL,IAAI,KAAK,KAAK,EAAE;cAC1B;cACA;cACArG,MAAM,GAAG;gBACR+G,SAAS,EAAEV,IAAI;gBACfK,cAAc,EAAE,IAAI,CAACG,oBAAoB,CACxChJ,SAAS,EACTyI,eAAe,EACflJ,GAAG;eAEJ;aACD,MAAM;cACN4C,MAAM,GAAG;gBACR+G,SAAS,EAAE,IAAI;gBACfL,cAAc,EAAE;eAChB;;;;iBAOE,CAAC9G,WAAW,EAAZ;YAAc,qBAAMxC,GAAG,CAAC4E,IAAI;;YAAdpF,SAAc;;;YAEhC,sBAAOoD,MAAM;;;;GACb;EAEatD,4CAAiB,GAA/B,UACCmB,SAAiB,EACjByE,UAA8B;;;;;;;YAEV8D,aAAa,GAAW9D,UAAU,WAArB,EAAE+D,IAAI,GAAK/D,UAAU,KAAf;YAED,qBAAM,IAAI,CAACmE,cAAc,CAC9D5I,SAAS,EACTyE,UAAU,CACV;;YAHK1F,KAAgCoK,SAGrC,EAHOD,SAAS,iBAAEL,cAAc;kBAS7BK,SAAS,KAAK,KAAK,IAAIL,cAAc,CAACjK,MAAM,GAAG,CAAC,GAAhD;YAGgB,qBAAMiK,cAAc,CAAC,CAAC,CAAC,EAAE;;YAF5C;YACA;YACAO,gBAAgB,GAAGD,SAAyB;;;kBAE5CD,SAAS,KAAK,IAAI,IAClBL,cAAc,CAACjK,MAAM,GAAG,CAAC,IACzBiK,cAAc,CAACjK,MAAM,IAAIN,kCAAkC,GAF3D;YAQM+K,eAAe,GAAG,IAAIzB,GAAG,EAAa;;;;YACxB0B,0CAAc;;;;YAAvBC,KAAK;YACK,qBAAMA,KAAK,EAAE;;YAA3BC,WAAW,GAAGL,SAAa;;cACjC,KAAmBM,oDAAW,2GAAE;gBAArBjG,IAAI;gBACRkG,uBAAuB,GAAGC,IAAI,CAACC,SAAS,CAACpG,IAAI,CAAC;gBACpD6F,eAAe,CAAC1G,GAAG,CAAC+G,uBAAuB,EAAElG,IAAI,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAIpD;YACA;YACA4F,gBAAgB,GAAGrG,KAAK,CAACC,IAAI,CAACqG,eAAe,CAACpG,MAAM,EAAE,CAAC;;;YAK/B,qBAAM,IAAI,CAAC+B,MAAM,CAAChF,SAAS,CAAC;;YAHpD;YACA;YACA;YACAoJ,gBAAgB,GAAQD,SAA4B;;;YAG/CpE,QAAQ,GAAGwD,aAAa,GAC3Ba,gBAAgB,CAAC7H,MAAM,CAAC,WAAC;cAAI,wBAAiB,CAACsI,CAAC,EAAErB,IAAI,EAAED,aAAa,CAAC;YAAzC,CAAyC,CAAC,GACvEa,gBAAgB;YAEnB,sBAAOrE,QAAQ;;;;GACf;EAEOlG,6CAAkB,GAA1B,UACCsG,OAAY,EACZb,UAA+B;IAE/B,OAAOtG,kBAAkB,CAACmH,OAAO,EAAEb,UAAU,CAAC;EAC/C,CAAC;EAEazF,2CAAgB,GAA9B,UACCmB,SAAiB,EACjBsE,UAA+B;;;;;;iBAI3BA,UAAU,EAAV;YACKvF,KAAwBuF,UAAU,KAA1B,EAARwF,IAAI,mBAAG,CAAC,OAAEtI,KAAc8C,UAAU,MAAf,EAATyF,KAAK,mBAAG,CAAC;YACrBC,aAAa,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEJ,IAAI,GAAGC,KAAK,CAAC,IAAI,CAAC;YAEvC,qBAAM,IAAI,CAAC3K,EAAE,CACxB2C,WAAW,CAAC/B,SAAS,CAAC,CACtBK,WAAW,CAACL,SAAS,CAAC,CACtBa,UAAU,EAAE;;YAHVC,MAAM,GAAGN,SAGC;kBAEVM,MAAM,IAAIkJ,aAAa,GAAG,CAAC,GAA3B;YACH,qBAAMlJ,MAAM,CAACqJ,OAAO,CAACH,aAAa,CAAC;;YAAnCxJ,SAAmC;;;YAG9B4J,WAAW,GAAQ,EAAE;YACrBC,QAAQ,GAAG,OAAON,KAAK,KAAK,QAAQ,IAAIA,KAAK,GAAG,CAAC;;;kBAEhDjJ,MAAM,IAAIA,MAAM,CAACG,KAAK;YAC5BmJ,WAAW,CAAClG,IAAI,CAACpD,MAAM,CAACG,KAAK,CAAC;YAE9B,IAAIoJ,QAAQ,IAAID,WAAW,CAACxL,MAAM,KAAKmL,KAAK,EAAE;cAC7C;;YAGQ,qBAAMjJ,MAAM,CAACK,QAAQ,EAAE;;YAAhCL,MAAM,GAAGN,SAAuB;;;YAGjC2B,MAAM,GAAGiI,WAAW;;;YAEN,qBAAM,IAAI,CAAChL,EAAE,CAAC4F,MAAM,CAAChF,SAAS,CAAC;;YAA7CmC,MAAM,GAAQ3B,SAA+B;;;YAG9C,sBAAO2B,MAAM;;;;GACb;EAiBF,uBAAC;AAAD,CAAC,CAjtB8B/D,kBAAkB;AAmtBjD,eAAe,IAAIS,gBAAgB,EAAE","names":["ConsoleLogger","Logger","idb","isPredicateObj","isPredicateGroup","OpType","QueryOne","isPrivateMode","traverseModel","validatePredicate","inMemoryPagination","keysEqual","getStorename","isSafariCompatabilityMode","StorageAdapterBase","logger","MULTI_OR_CONDITION_SCAN_BREAKPOINT","DB_VERSION","__extends","_this","keyArr","safariCompatabilityMode","length","IndexedDBAdapter","checkPrivate","_a","setSafariCompatabilityMode","openDB","dbName","upgrade","db","oldVersion","newVersion","txn","Object","keys","schema","namespaces","forEach","namespace","namespaceName","models","storeName","modelName","createObjectStoreForModel","objectStoreNames","origStore","objectStore","tmpName","name","_c","getNamespaceAndModelFromStorename","modelInCurrentSchema","deleteObjectStore","newStore","openCursor","cursor","_e","count","value","put","continue","debug","Set","map","filter","_b","has","error","error_1","abort","storeOrStoreName","index","transaction","store","get","canonicalKeyPath","result","close","deleteDB","undefined","initPromise","model","condition","saveMetadata","set","connectionStoreNames","modelKeyValues","tx","Array","from","values","_get","fromDB","validateSaveCondition","connectionStoreNames_1","resItem","storeName_1","item","instance","store_1","itemKeyValues","key","fromDB_1","opType","UPDATE","INSERT","getKey","push","done","modelConstructor","predicate","pagination","queryMetadata","queryByKey","predicates","hasSort","hasPagination","getByKey","record","filterOnPredicate","filtered","getAll","all","enginePagination","records","load","firstOrLast","FIRST","getStorenameForModel","modelInstanceCreator","items","namespaceResolver","this_1","connectedModels","getModelConstructorByModelName","keyValues","getIndexKeyValuesFromModel","_deleted","find","instanceKeyValues","DELETE","delete","items_1","deleteQueue","deleteItem","items_2","itemKey","toString","then","isPrivate","Promise","reject","resolve","modelNameArr","join","createObjectStore","autoIncrement","indexes","idxName","keyPath","options","createIndex","keyValue","queries","predicateIndex","Map","String","field","name_1","idx","keypath","isArray","matchingPredicateValues","p","operand","indexNames","predicateObjs","type","fieldPredicates","operator","o","baseQueryIndex","indexedQueries","groupQueries","objectQueries","matchingIndexQueries","__spread","groupType","_d","candidateResults","distinctResults","indexedQueries_1","query","resultGroup","resultGroup_1","distinctificationString","JSON","stringify","m","page","limit","initialRecord","Math","max","advance","pageResults","hasLimit"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-amplify/datastore/src/storage/adapter/IndexedDBAdapter.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport {\n\tisPredicateObj,\n\tisPredicateGroup,\n\tModelInstanceMetadata,\n\tModelPredicate,\n\tOpType,\n\tPaginationInput,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tPredicateObject,\n\tPredicatesGroup,\n\tQueryOne,\n} from '../../types';\nimport {\n\tisPrivateMode,\n\ttraverseModel,\n\tvalidatePredicate,\n\tinMemoryPagination,\n\tkeysEqual,\n\tgetStorename,\n\tisSafariCompatabilityMode,\n} from '../../util';\nimport { StorageAdapterBase } from './StorageAdapterBase';\n\nconst logger = new Logger('DataStore');\n\n/**\n * The point after which queries composed of multiple simple OR conditions\n * should scan-and-filter instead of individual queries for each condition.\n *\n * At some point, this should be configurable and/or dynamic based on table\n * size and possibly even on observed average seek latency. For now, it's\n * based on an manual \"binary search\" for the breakpoint as measured in the\n * unit test suite. This isn't necessarily optimal. But, it's at least derived\n * empirically, rather than theoretically and without any verification!\n *\n * REMEMBER! If you run more realistic benchmarks and update this value, update\n * this comment so the validity and accuracy of future query tuning exercises\n * can be compared to the methods used to derive the current value. E.g.,\n *\n * 1. In browser benchmark > unit test benchmark\n * 2. Multi-browser benchmark > single browser benchmark\n * 3. Benchmarks of various table sizes > static table size benchmark\n *\n * etc...\n *\n */\nconst MULTI_OR_CONDITION_SCAN_BREAKPOINT = 7;\n//\nconst DB_VERSION = 3;\n\nclass IndexedDBAdapter extends StorageAdapterBase {\n\tprotected db!: idb.IDBPDatabase;\n\tprivate safariCompatabilityMode: boolean = false;\n\n\t// checks are called by StorageAdapterBase class\n\tprotected async preSetUpChecks() {\n\t\tawait this.checkPrivate();\n\t\tawait this.setSafariCompatabilityMode();\n\t}\n\n\tprotected async preOpCheck() {\n\t\tawait this.checkPrivate();\n\t}\n\n\t/**\n\t * Initialize IndexedDB database\n\t * Create new DB if one doesn't exist\n\t * Upgrade outdated DB\n\t *\n\t * Called by `StorageAdapterBase.setUp()`\n\t *\n\t * @returns IDB Database instance\n\t */\n\tprotected async initDb(): Promise<idb.IDBPDatabase> {\n\t\treturn await idb.openDB(this.dbName, DB_VERSION, {\n\t\t\tupgrade: async (db, oldVersion, newVersion, txn) => {\n\t\t\t\t// create new database\n\t\t\t\tif (oldVersion === 0) {\n\t\t\t\t\tObject.keys(this.schema.namespaces).forEach(namespaceName => {\n\t\t\t\t\t\tconst namespace = this.schema.namespaces[namespaceName];\n\n\t\t\t\t\t\tObject.keys(namespace.models).forEach(modelName => {\n\t\t\t\t\t\t\tconst storeName = getStorename(namespaceName, modelName);\n\t\t\t\t\t\t\tthis.createObjectStoreForModel(\n\t\t\t\t\t\t\t\tdb,\n\t\t\t\t\t\t\t\tnamespaceName,\n\t\t\t\t\t\t\t\tstoreName,\n\t\t\t\t\t\t\t\tmodelName\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// migrate existing database to latest schema\n\t\t\t\tif ((oldVersion === 1 || oldVersion === 2) && newVersion === 3) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfor (const storeName of txn.objectStoreNames) {\n\t\t\t\t\t\t\tconst origStore = txn.objectStore(storeName);\n\n\t\t\t\t\t\t\t// rename original store\n\t\t\t\t\t\t\tconst tmpName = `tmp_${storeName}`;\n\t\t\t\t\t\t\torigStore.name = tmpName;\n\n\t\t\t\t\t\t\tconst { namespaceName, modelName } =\n\t\t\t\t\t\t\t\tthis.getNamespaceAndModelFromStorename(storeName);\n\n\t\t\t\t\t\t\tconst modelInCurrentSchema =\n\t\t\t\t\t\t\t\tmodelName in this.schema.namespaces[namespaceName].models;\n\n\t\t\t\t\t\t\tif (!modelInCurrentSchema) {\n\t\t\t\t\t\t\t\t// delete original\n\t\t\t\t\t\t\t\tdb.deleteObjectStore(tmpName);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst newStore = this.createObjectStoreForModel(\n\t\t\t\t\t\t\t\tdb,\n\t\t\t\t\t\t\t\tnamespaceName,\n\t\t\t\t\t\t\t\tstoreName,\n\t\t\t\t\t\t\t\tmodelName\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tlet cursor = await origStore.openCursor();\n\t\t\t\t\t\t\tlet count = 0;\n\n\t\t\t\t\t\t\t// Copy data from original to new\n\t\t\t\t\t\t\twhile (cursor && cursor.value) {\n\t\t\t\t\t\t\t\t// we don't pass key, since they are all new entries in the new store\n\t\t\t\t\t\t\t\tawait newStore.put(cursor.value);\n\n\t\t\t\t\t\t\t\tcursor = await cursor.continue();\n\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// delete original\n\t\t\t\t\t\t\tdb.deleteObjectStore(tmpName);\n\n\t\t\t\t\t\t\tlogger.debug(`${count} ${storeName} records migrated`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// add new models created after IndexedDB, but before migration\n\t\t\t\t\t\t// this case may happen when a user has not opened an app for\n\t\t\t\t\t\t// some time and a new model is added during that time\n\t\t\t\t\t\tObject.keys(this.schema.namespaces).forEach(namespaceName => {\n\t\t\t\t\t\t\tconst namespace = this.schema.namespaces[namespaceName];\n\t\t\t\t\t\t\tconst objectStoreNames = new Set(txn.objectStoreNames);\n\n\t\t\t\t\t\t\tObject.keys(namespace.models)\n\t\t\t\t\t\t\t\t.map(modelName => {\n\t\t\t\t\t\t\t\t\treturn [modelName, getStorename(namespaceName, modelName)];\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.filter(([, storeName]) => !objectStoreNames.has(storeName))\n\t\t\t\t\t\t\t\t.forEach(([modelName, storeName]) => {\n\t\t\t\t\t\t\t\t\tthis.createObjectStoreForModel(\n\t\t\t\t\t\t\t\t\t\tdb,\n\t\t\t\t\t\t\t\t\t\tnamespaceName,\n\t\t\t\t\t\t\t\t\t\tstoreName,\n\t\t\t\t\t\t\t\t\t\tmodelName\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tlogger.error('Error migrating IndexedDB data', error);\n\t\t\t\t\t\ttxn.abort();\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected async _get<T>(\n\t\tstoreOrStoreName: idb.IDBPObjectStore | string,\n\t\tkeyArr: string[]\n\t): Promise<T> {\n\t\tlet index: idb.IDBPIndex;\n\n\t\tif (typeof storeOrStoreName === 'string') {\n\t\t\tconst storeName = storeOrStoreName;\n\t\t\tindex = this.db.transaction(storeName, 'readonly').store.index('byPk');\n\t\t} else {\n\t\t\tconst store = storeOrStoreName;\n\t\t\tindex = store.index('byPk');\n\t\t}\n\n\t\tconst result = await index.get(this.canonicalKeyPath(keyArr));\n\n\t\treturn <T>result;\n\t}\n\n\tasync clear(): Promise<void> {\n\t\tawait this.checkPrivate();\n\n\t\tthis.db?.close();\n\t\tawait idb.deleteDB(this.dbName);\n\n\t\tthis.db = undefined!;\n\t\tthis.initPromise = undefined!;\n\t}\n\n\tasync save<T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ModelPredicate<T>\n\t): Promise<[T, OpType.INSERT | OpType.UPDATE][]> {\n\t\tawait this.checkPrivate();\n\n\t\tconst { storeName, set, connectionStoreNames, modelKeyValues } =\n\t\t\tthis.saveMetadata(model);\n\n\t\tconst tx = this.db.transaction(\n\t\t\t[storeName, ...Array.from(set.values())],\n\t\t\t'readwrite'\n\t\t);\n\n\t\tconst store = tx.objectStore(storeName);\n\t\tconst fromDB = await this._get(store, modelKeyValues);\n\n\t\tthis.validateSaveCondition(condition, fromDB);\n\n\t\tconst result: [T, OpType.INSERT | OpType.UPDATE][] = [];\n\t\tfor await (const resItem of connectionStoreNames) {\n\t\t\tconst { storeName, item, instance, keys } = resItem;\n\t\t\tconst store = tx.objectStore(storeName);\n\n\t\t\tconst itemKeyValues: string[] = keys.map(key => item[key]);\n\n\t\t\tconst fromDB = <T>await this._get(store, itemKeyValues);\n\t\t\tconst opType: OpType = fromDB ? OpType.UPDATE : OpType.INSERT;\n\n\t\t\tif (\n\t\t\t\tkeysEqual(itemKeyValues, modelKeyValues) ||\n\t\t\t\topType === OpType.INSERT\n\t\t\t) {\n\t\t\t\tconst key = await store\n\t\t\t\t\t.index('byPk')\n\t\t\t\t\t.getKey(this.canonicalKeyPath(itemKeyValues));\n\t\t\t\tawait store.put(item, key);\n\t\t\t\tresult.push([instance, opType]);\n\t\t\t}\n\t\t}\n\t\tawait tx.done;\n\n\t\treturn result;\n\t}\n\n\tasync query<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tpredicate?: ModelPredicate<T>,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tawait this.checkPrivate();\n\t\tconst {\n\t\t\tstoreName,\n\t\t\tnamespaceName,\n\t\t\tqueryByKey,\n\t\t\tpredicates,\n\t\t\thasSort,\n\t\t\thasPagination,\n\t\t} = this.queryMetadata(modelConstructor, predicate, pagination);\n\n\t\tconst records: T[] = (await (async () => {\n\t\t\t//\n\t\t\t// NOTE: @svidgen explored removing this and letting query() take care of automatic\n\t\t\t// index leveraging. This would eliminate some amount of very similar code.\n\t\t\t// But, getAll is slightly slower than get()\n\t\t\t//\n\t\t\t// On Chrome:\n\t\t\t//   ~700ms vs ~1175ms per 10k reads.\n\t\t\t//\n\t\t\t// You can (and should) check my work here:\n\t\t\t// \thttps://gist.github.com/svidgen/74e55d573b19c3e5432b1b5bdf0f4d96\n\t\t\t//\n\t\t\tif (queryByKey) {\n\t\t\t\tconst record = await this.getByKey(storeName, queryByKey);\n\t\t\t\treturn record ? [record] : [];\n\t\t\t}\n\n\t\t\tif (predicates) {\n\t\t\t\tconst filtered = await this.filterOnPredicate(storeName, predicates);\n\t\t\t\treturn this.inMemoryPagination(filtered, pagination);\n\t\t\t}\n\n\t\t\tif (hasSort) {\n\t\t\t\tconst all = await this.getAll(storeName);\n\t\t\t\treturn this.inMemoryPagination(all, pagination);\n\t\t\t}\n\n\t\t\tif (hasPagination) {\n\t\t\t\treturn this.enginePagination(storeName, pagination);\n\t\t\t}\n\n\t\t\treturn this.getAll(storeName);\n\t\t})()) as T[];\n\n\t\treturn await this.load(namespaceName, modelConstructor.name, records);\n\t}\n\n\tasync queryOne<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tfirstOrLast: QueryOne = QueryOne.FIRST\n\t): Promise<T | undefined> {\n\t\tawait this.checkPrivate();\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\tconst cursor = await this.db\n\t\t\t.transaction([storeName], 'readonly')\n\t\t\t.objectStore(storeName)\n\t\t\t.openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev');\n\n\t\tconst result = cursor ? <T>cursor.value : undefined;\n\n\t\treturn result && this.modelInstanceCreator(modelConstructor, result);\n\t}\n\n\tasync batchSave<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<any>,\n\t\titems: ModelInstanceMetadata[]\n\t): Promise<[T, OpType][]> {\n\t\tawait this.checkPrivate();\n\n\t\tif (items.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst modelName = modelConstructor.name;\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\t\tconst result: [T, OpType][] = [];\n\n\t\tconst txn = this.db.transaction(storeName, 'readwrite');\n\t\tconst store = txn.store;\n\n\t\tfor (const item of items) {\n\t\t\tconst model = this.modelInstanceCreator(modelConstructor, item);\n\n\t\t\tconst connectedModels = traverseModel(\n\t\t\t\tmodelName,\n\t\t\t\tmodel,\n\t\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\t\tthis.modelInstanceCreator,\n\t\t\t\tthis.getModelConstructorByModelName!\n\t\t\t);\n\n\t\t\tconst keyValues = this.getIndexKeyValuesFromModel(model);\n\t\t\tconst { _deleted } = item;\n\n\t\t\tconst index = store.index('byPk');\n\n\t\t\tconst key = await index.getKey(this.canonicalKeyPath(keyValues));\n\n\t\t\tif (!_deleted) {\n\t\t\t\tconst { instance } = connectedModels.find(({ instance }) => {\n\t\t\t\t\tconst instanceKeyValues = this.getIndexKeyValuesFromModel(instance);\n\t\t\t\t\treturn keysEqual(instanceKeyValues, keyValues);\n\t\t\t\t})!;\n\n\t\t\t\tresult.push([\n\t\t\t\t\t<T>(<unknown>instance),\n\t\t\t\t\tkey ? OpType.UPDATE : OpType.INSERT,\n\t\t\t\t]);\n\t\t\t\tawait store.put(instance, key);\n\t\t\t} else {\n\t\t\t\tresult.push([<T>(<unknown>item), OpType.DELETE]);\n\n\t\t\t\tif (key) {\n\t\t\t\t\tawait store.delete(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait txn.done;\n\n\t\treturn result;\n\t}\n\n\tprotected async deleteItem<T extends PersistentModel>(\n\t\tdeleteQueue: {\n\t\t\tstoreName: string;\n\t\t\titems: T[] | IDBValidKey[];\n\t\t}[]\n\t) {\n\t\tconst connectionStoreNames = deleteQueue!.map(({ storeName }) => {\n\t\t\treturn storeName;\n\t\t});\n\n\t\tconst tx = this.db.transaction([...connectionStoreNames], 'readwrite');\n\t\tfor await (const deleteItem of deleteQueue!) {\n\t\t\tconst { storeName, items } = deleteItem;\n\t\t\tconst store = tx.objectStore(storeName);\n\n\t\t\tfor await (const item of items) {\n\t\t\t\tif (item) {\n\t\t\t\t\tlet key: IDBValidKey | undefined;\n\n\t\t\t\t\tif (typeof item === 'object') {\n\t\t\t\t\t\tconst keyValues = this.getIndexKeyValuesFromModel(item as T);\n\t\t\t\t\t\tkey = await store\n\t\t\t\t\t\t\t.index('byPk')\n\t\t\t\t\t\t\t.getKey(this.canonicalKeyPath(keyValues));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst itemKey = item.toString();\n\t\t\t\t\t\tkey = await store.index('byPk').getKey(itemKey);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (key !== undefined) {\n\t\t\t\t\t\tawait store.delete(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t//#region platform-specific helper methods\n\n\tprivate async checkPrivate() {\n\t\tconst isPrivate = await isPrivateMode().then(isPrivate => {\n\t\t\treturn isPrivate;\n\t\t});\n\t\tif (isPrivate) {\n\t\t\tlogger.error(\"IndexedDB not supported in this browser's private mode\");\n\t\t\treturn Promise.reject(\n\t\t\t\t\"IndexedDB not supported in this browser's private mode\"\n\t\t\t);\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t * Whether the browser's implementation of IndexedDB is coercing single-field\n\t * indexes to a scalar key.\n\t *\n\t * If this returns `true`, we need to treat indexes containing a single field\n\t * as scalars.\n\t *\n\t * See PR description for reference:\n\t * https://github.com/aws-amplify/amplify-js/pull/10527\n\t */\n\tprivate async setSafariCompatabilityMode() {\n\t\tthis.safariCompatabilityMode = await isSafariCompatabilityMode();\n\n\t\tif (this.safariCompatabilityMode === true) {\n\t\t\tlogger.debug('IndexedDB Adapter is running in Safari Compatability Mode');\n\t\t}\n\t}\n\n\tprivate getNamespaceAndModelFromStorename(storeName: string) {\n\t\tconst [namespaceName, ...modelNameArr] = storeName.split('_');\n\t\treturn {\n\t\t\tnamespaceName,\n\t\t\tmodelName: modelNameArr.join('_'),\n\t\t};\n\t}\n\n\tprivate createObjectStoreForModel(\n\t\tdb: idb.IDBPDatabase,\n\t\tnamespaceName: string,\n\t\tstoreName: string,\n\t\tmodelName: string\n\t): idb.IDBPObjectStore {\n\t\tconst store = db.createObjectStore(storeName, {\n\t\t\tautoIncrement: true,\n\t\t});\n\n\t\tconst { indexes } =\n\t\t\tthis.schema.namespaces[namespaceName].relationships![modelName];\n\n\t\tindexes.forEach(([idxName, keyPath, options]) => {\n\t\t\tstore.createIndex(idxName, keyPath, options);\n\t\t});\n\n\t\treturn store;\n\t}\n\n\tprivate async getByKey<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tkeyValue: string[]\n\t): Promise<T> {\n\t\treturn <T>await this._get(storeName, keyValue);\n\t}\n\n\tprivate async getAll<T extends PersistentModel>(\n\t\tstoreName: string\n\t): Promise<T[]> {\n\t\treturn await this.db.getAll(storeName);\n\t}\n\n\t/**\n\t * Tries to generate an index fetcher for the given predicates. Assumes\n\t * that the given predicate conditions are contained by an AND group and\n\t * should therefore all match a single record.\n\t *\n\t * @param storeName The table to query.\n\t * @param predicates The predicates to try to AND together.\n\t * @param transaction\n\t */\n\tprivate matchingIndexQueries<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpredicates: PredicateObject<T>[],\n\t\ttransaction: idb.IDBPTransaction<unknown, [string]>\n\t) {\n\t\t// could be expanded later to include `exec()` and a `cardinality` estimate?\n\t\tconst queries: (() => Promise<T[]>)[] = [];\n\n\t\tconst predicateIndex = new Map<string, PredicateObject<T>>();\n\t\tfor (const predicate of predicates) {\n\t\t\tpredicateIndex.set(String(predicate.field), predicate);\n\t\t}\n\n\t\tconst store = transaction.objectStore(storeName);\n\t\tfor (const name of store.indexNames) {\n\t\t\tconst idx = store.index(name);\n\t\t\tconst keypath = Array.isArray(idx.keyPath) ? idx.keyPath : [idx.keyPath];\n\t\t\tconst matchingPredicateValues: (string | number)[] = [];\n\n\t\t\tfor (const field of keypath) {\n\t\t\t\tconst p = predicateIndex.get(field);\n\t\t\t\tif (p && p.operand !== null && p.operand !== undefined) {\n\t\t\t\t\tmatchingPredicateValues.push(p.operand);\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if we have a matching predicate field for each component of this index,\n\t\t\t// we can build a query for it. otherwise, we can't.\n\t\t\tif (matchingPredicateValues.length === keypath.length) {\n\t\t\t\t// re-create a transaction, because the transaction used to fetch the\n\t\t\t\t// indexes may no longer be active.\n\t\t\t\tqueries.push(() =>\n\t\t\t\t\tthis.db\n\t\t\t\t\t\t.transaction(storeName)\n\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t.index(name)\n\t\t\t\t\t\t.getAll(this.canonicalKeyPath(matchingPredicateValues))\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn queries;\n\t}\n\n\tprivate async baseQueryIndex<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpredicates: PredicatesGroup<T>,\n\t\ttransaction?: idb.IDBPTransaction<unknown, [string]> | undefined\n\t) {\n\t\tlet { predicates: predicateObjs, type } = predicates;\n\n\t\t// the predicate objects we care about tend to be nested at least\n\t\t// one level down: `{and: {or: {and: { <the predicates we want> }}}}`\n\t\t// so, we unpack and/or groups until we find a group with more than 1\n\t\t// child OR a child that is not a group (and is therefore a predicate \"object\").\n\t\twhile (\n\t\t\tpredicateObjs.length === 1 &&\n\t\t\tisPredicateGroup(predicateObjs[0]) &&\n\t\t\t(predicateObjs[0] as PredicatesGroup<T>).type !== 'not'\n\t\t) {\n\t\t\ttype = (predicateObjs[0] as PredicatesGroup<T>).type;\n\t\t\tpredicateObjs = (predicateObjs[0] as PredicatesGroup<T>).predicates;\n\t\t}\n\n\t\tconst fieldPredicates = predicateObjs.filter(\n\t\t\tp => isPredicateObj(p) && p.operator === 'eq'\n\t\t) as PredicateObject<T>[];\n\n\t\t// several sub-queries could occur here. explicitly start a txn here to avoid\n\t\t// opening/closing multiple txns.\n\t\tconst txn = transaction || this.db.transaction(storeName);\n\n\t\tlet result = {} as {\n\t\t\tgroupType: typeof type | null;\n\t\t\tindexedQueries: (() => Promise<T[]>)[];\n\t\t};\n\n\t\t// `or` conditions, if usable, need to generate multiple queries. this is unlike\n\t\t// `and` conditions, which should just be combined.\n\t\tif (type === 'or') {\n\t\t\t/**\n\t\t\t * Base queries for each child group.\n\t\t\t *\n\t\t\t * For each child group, if it's an AND condition that results in a single\n\t\t\t * subordinate \"base query\", we can use it. if it's any more complicated\n\t\t\t * than that, it's not a simple join condition we want to use.\n\t\t\t */\n\t\t\tconst groupQueries = await Promise.all(\n\t\t\t\tpredicateObjs\n\t\t\t\t\t.filter(o => isPredicateGroup(o) && o.type === 'and')\n\t\t\t\t\t.map(o =>\n\t\t\t\t\t\tthis.baseQueryIndex(storeName, o as PredicatesGroup<T>, txn)\n\t\t\t\t\t)\n\t\t\t).then(queries =>\n\t\t\t\tqueries\n\t\t\t\t\t.filter(q => q.indexedQueries.length === 1)\n\t\t\t\t\t.map(i => i.indexedQueries)\n\t\t\t);\n\n\t\t\t/**\n\t\t\t * Base queries for each simple child \"object\" (field condition).\n\t\t\t */\n\t\t\tconst objectQueries = predicateObjs\n\t\t\t\t.filter(o => isPredicateObj(o))\n\t\t\t\t.map(o =>\n\t\t\t\t\tthis.matchingIndexQueries(storeName, [o as PredicateObject<T>], txn)\n\t\t\t\t);\n\n\t\t\tconst indexedQueries = [...groupQueries, ...objectQueries]\n\t\t\t\t.map(q => q[0])\n\t\t\t\t.filter(i => i);\n\n\t\t\t// if, after hunting for base queries, we don't have exactly 1 base query\n\t\t\t// for each child group + object, stop trying to optimize. we're not dealing\n\t\t\t// with a simple query that fits the intended optimization path.\n\t\t\tif (predicateObjs.length > indexedQueries.length) {\n\t\t\t\tresult = {\n\t\t\t\t\tgroupType: null,\n\t\t\t\t\tindexedQueries: [] as (() => Promise<T[]>)[],\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tresult = {\n\t\t\t\t\tgroupType: 'or',\n\t\t\t\t\tindexedQueries,\n\t\t\t\t};\n\t\t\t}\n\t\t} else if (type === 'and') {\n\t\t\t// our potential indexes or lacks thereof.\n\t\t\t// note that we're only optimizing for `eq` right now.\n\t\t\tresult = {\n\t\t\t\tgroupType: type,\n\t\t\t\tindexedQueries: this.matchingIndexQueries(\n\t\t\t\t\tstoreName,\n\t\t\t\t\tfieldPredicates,\n\t\t\t\t\ttxn\n\t\t\t\t),\n\t\t\t};\n\t\t} else {\n\t\t\tresult = {\n\t\t\t\tgroupType: null,\n\t\t\t\tindexedQueries: [],\n\t\t\t};\n\t\t}\n\n\t\t// Explicitly wait for txns from index queries to complete before proceding.\n\t\t// This helps ensure IndexedDB is in a stable, ready state. Else, subseqeuent\n\t\t// qeuries can sometimes appear to deadlock (at least in FakeIndexedDB).\n\t\t// (Unless we were *given* the transaction -- we'll assume the parent handles it.)\n\t\tif (!transaction) await txn.done;\n\n\t\treturn result;\n\t}\n\n\tprivate async filterOnPredicate<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpredicates: PredicatesGroup<T>\n\t) {\n\t\tconst { predicates: predicateObjs, type } = predicates;\n\n\t\tconst { groupType, indexedQueries } = await this.baseQueryIndex(\n\t\t\tstoreName,\n\t\t\tpredicates\n\t\t);\n\n\t\t// where we'll accumulate candidate results, which will be filtered at the end.\n\t\tlet candidateResults: T[];\n\n\t\t// semi-naive implementation:\n\t\tif (groupType === 'and' && indexedQueries.length > 0) {\n\t\t\t// each condition must be satsified, we can form a base set with any\n\t\t\t// ONE of those conditions and then filter.\n\t\t\tcandidateResults = await indexedQueries[0]();\n\t\t} else if (\n\t\t\tgroupType === 'or' &&\n\t\t\tindexedQueries.length > 0 &&\n\t\t\tindexedQueries.length <= MULTI_OR_CONDITION_SCAN_BREAKPOINT\n\t\t) {\n\t\t\t// NOTE: each condition implies a potentially distinct set. we only benefit\n\t\t\t// from using indexes here if EVERY condition uses an index. if any one\n\t\t\t// index requires a table scan, we gain nothing from the indexes.\n\t\t\t// NOTE: results must be DISTINCT-ified if we leverage indexes.\n\t\t\tconst distinctResults = new Map<string, T>();\n\t\t\tfor (const query of indexedQueries) {\n\t\t\t\tconst resultGroup = await query();\n\t\t\t\tfor (const item of resultGroup) {\n\t\t\t\t\tconst distinctificationString = JSON.stringify(item);\n\t\t\t\t\tdistinctResults.set(distinctificationString, item);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// we could conceivably check for special conditions and return early here.\n\t\t\t// but, this is simpler and has not yet had a measurable performance impact.\n\t\t\tcandidateResults = Array.from(distinctResults.values());\n\t\t} else {\n\t\t\t// nothing intelligent we can do with `not` groups unless or until we start\n\t\t\t// smashing comparison operators against indexes -- at which point we could\n\t\t\t// perform some reversal here.\n\t\t\tcandidateResults = <T[]>await this.getAll(storeName);\n\t\t}\n\n\t\tconst filtered = predicateObjs\n\t\t\t? candidateResults.filter(m => validatePredicate(m, type, predicateObjs))\n\t\t\t: candidateResults;\n\n\t\treturn filtered;\n\t}\n\n\tprivate inMemoryPagination<T extends PersistentModel>(\n\t\trecords: T[],\n\t\tpagination?: PaginationInput<T>\n\t): T[] {\n\t\treturn inMemoryPagination(records, pagination);\n\t}\n\n\tprivate async enginePagination<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tlet result: T[];\n\n\t\tif (pagination) {\n\t\t\tconst { page = 0, limit = 0 } = pagination;\n\t\t\tconst initialRecord = Math.max(0, page * limit) || 0;\n\n\t\t\tlet cursor = await this.db\n\t\t\t\t.transaction(storeName)\n\t\t\t\t.objectStore(storeName)\n\t\t\t\t.openCursor();\n\n\t\t\tif (cursor && initialRecord > 0) {\n\t\t\t\tawait cursor.advance(initialRecord);\n\t\t\t}\n\n\t\t\tconst pageResults: T[] = [];\n\t\t\tconst hasLimit = typeof limit === 'number' && limit > 0;\n\n\t\t\twhile (cursor && cursor.value) {\n\t\t\t\tpageResults.push(cursor.value);\n\n\t\t\t\tif (hasLimit && pageResults.length === limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcursor = await cursor.continue();\n\t\t\t}\n\n\t\t\tresult = pageResults;\n\t\t} else {\n\t\t\tresult = <T[]>await this.db.getAll(storeName);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Checks the given path against the browser's IndexedDB implementation for\n\t * necessary compatibility transformations, applying those transforms if needed.\n\t *\n\t * @param `keyArr` strings to compatibilize for browser-indexeddb index operations\n\t * @returns An array or string, depending on and given key,\n\t * that is ensured to be compatible with the IndexedDB implementation's nuances.\n\t */\n\tprivate canonicalKeyPath = (keyArr: (string | number)[]) => {\n\t\tif (this.safariCompatabilityMode) {\n\t\t\treturn keyArr.length > 1 ? keyArr : keyArr[0];\n\t\t}\n\t\treturn keyArr;\n\t};\n\t//#endregion\n}\n\nexport default new IndexedDBAdapter();\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}