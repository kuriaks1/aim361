{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetCelebrityRecognitionRequest, GetCelebrityRecognitionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetCelebrityRecognitionCommand, serializeAws_json1_1GetCelebrityRecognitionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the celebrity recognition results for a Amazon Rekognition Video analysis started by\n *      <a>StartCelebrityRecognition</a>.</p>\n *          <p>Celebrity recognition in a video is an asynchronous operation. Analysis is started by a call\n *       to <a>StartCelebrityRecognition</a>  which returns a job identifier (<code>JobId</code>).\n *       When the celebrity recognition operation finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n *       topic registered in the initial call to <code>StartCelebrityRecognition</code>.\n *       To get the results of the celebrity recognition analysis, first check that the status value published to the Amazon SNS\n *       topic is <code>SUCCEEDED</code>. If so, call  <code>GetCelebrityDetection</code> and pass the job identifier\n *       (<code>JobId</code>) from the initial call to <code>StartCelebrityDetection</code>. </p>\n *\n *          <p>For more information, see Working With Stored Videos in the Amazon Rekognition Developer Guide.</p>\n *          <p>\n *             <code>GetCelebrityRecognition</code> returns detected celebrities and the time(s) they are detected in an array\n *       (<code>Celebrities</code>) of <a>CelebrityRecognition</a>\n *\n *       objects. Each <code>CelebrityRecognition</code> contains information about the celebrity in a <a>CelebrityDetail</a>\n *       object and the time, <code>Timestamp</code>, the celebrity was detected.\n *       </p>\n *          <note>\n *\n *             <p>\n *                <code>GetCelebrityRecognition</code> only returns the default\n *         facial attributes (<code>BoundingBox</code>, <code>Confidence</code>,\n *         <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The other facial attributes listed\n *         in the <code>Face</code> object of the following response syntax are not returned. For more information,\n *         see FaceDetail in the Amazon Rekognition Developer Guide. </p>\n *          </note>\n *          <p>By default, the <code>Celebrities</code> array is sorted by time (milliseconds from the start of the video).\n *       You can also sort the array by celebrity by specifying the value <code>ID</code> in the <code>SortBy</code> input parameter.</p>\n *          <p>The <code>CelebrityDetail</code> object includes the celebrity identifer and additional information urls. If you don't store\n *       the additional information urls, you can get them later by calling <a>GetCelebrityInfo</a> with the celebrity identifer.</p>\n *          <p>No information is returned for faces not recognized as celebrities.</p>\n *          <p>Use MaxResults parameter to limit the number of labels returned. If there are more results than\n *       specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a\n *       pagination token for getting the next set of results. To get the next page of results, call <code>GetCelebrityDetection</code>\n *       and populate the <code>NextToken</code> request parameter with the token\n *       value returned from the previous call to <code>GetCelebrityRecognition</code>.</p>\n */\nvar GetCelebrityRecognitionCommand = /** @class */function (_super) {\n  __extends(GetCelebrityRecognitionCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function GetCelebrityRecognitionCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  GetCelebrityRecognitionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"GetCelebrityRecognitionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetCelebrityRecognitionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetCelebrityRecognitionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  GetCelebrityRecognitionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetCelebrityRecognitionCommand(input, context);\n  };\n  GetCelebrityRecognitionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetCelebrityRecognitionCommand(output, context);\n  };\n  return GetCelebrityRecognitionCommand;\n}($Command);\nexport { GetCelebrityRecognitionCommand };","map":{"version":3,"mappings":";AACA,SAASA,8BAA8B,EAAEC,+BAA+B,QAAQ,oBAAoB;AACpG,SACEC,oDAAoD,EACpDC,kDAAkD,QAC7C,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;EAAoDC;EAKlD;EACA;EAEA,wCAAqBC,KAA0C;IAA/D;IACE;IACAC,iBAAO;IAFYC,WAAK,GAALF,KAAK;;IAGxB;EACF;EAEA;;;EAGAG,0DAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA8C,EAC9CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACZ,cAAc,CAACS,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,UAAM,GAAKF,aAAa,OAAlB;IACd,IAAMQ,UAAU,GAAG,mBAAmB;IACtC,IAAMC,WAAW,GAAG,gCAAgC;IACpD,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM;MACNH,UAAU;MACVC,WAAW;MACXG,uBAAuB,EAAEzB,8BAA8B,CAAC0B,kBAAkB;MAC1EC,wBAAwB,EAAE1B,+BAA+B,CAACyB;KAC3D;IACO,kBAAc,GAAKb,aAAa,eAAlB;IACtB,OAAOM,KAAK,CAACS,OAAO,CAClB,UAACC,OAAsC;MACrC,qBAAc,CAACC,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEf,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxES,uBAAuB,CACxB;EACH,CAAC;EAEOZ,kDAAS,GAAjB,UAAkBH,KAA0C,EAAEuB,OAAuB;IACnF,OAAO5B,kDAAkD,CAACK,KAAK,EAAEuB,OAAO,CAAC;EAC3E,CAAC;EAEOpB,oDAAW,GAAnB,UAAoBqB,MAAsB,EAAED,OAAuB;IACjE,OAAO7B,oDAAoD,CAAC8B,MAAM,EAAED,OAAO,CAAC;EAC9E,CAAC;EAIH,qCAAC;AAAD,CAAC,CAtDmDzB,QAAQ","names":["GetCelebrityRecognitionRequest","GetCelebrityRecognitionResponse","deserializeAws_json1_1GetCelebrityRecognitionCommand","serializeAws_json1_1GetCelebrityRecognitionCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","GetCelebrityRecognitionCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-sdk/client-rekognition/commands/GetCelebrityRecognitionCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { GetCelebrityRecognitionRequest, GetCelebrityRecognitionResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1GetCelebrityRecognitionCommand,\n  serializeAws_json1_1GetCelebrityRecognitionCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type GetCelebrityRecognitionCommandInput = GetCelebrityRecognitionRequest;\nexport type GetCelebrityRecognitionCommandOutput = GetCelebrityRecognitionResponse & __MetadataBearer;\n\n/**\n * <p>Gets the celebrity recognition results for a Amazon Rekognition Video analysis started by\n *      <a>StartCelebrityRecognition</a>.</p>\n *          <p>Celebrity recognition in a video is an asynchronous operation. Analysis is started by a call\n *       to <a>StartCelebrityRecognition</a>  which returns a job identifier (<code>JobId</code>).\n *       When the celebrity recognition operation finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n *       topic registered in the initial call to <code>StartCelebrityRecognition</code>.\n *       To get the results of the celebrity recognition analysis, first check that the status value published to the Amazon SNS\n *       topic is <code>SUCCEEDED</code>. If so, call  <code>GetCelebrityDetection</code> and pass the job identifier\n *       (<code>JobId</code>) from the initial call to <code>StartCelebrityDetection</code>. </p>\n *\n *          <p>For more information, see Working With Stored Videos in the Amazon Rekognition Developer Guide.</p>\n *          <p>\n *             <code>GetCelebrityRecognition</code> returns detected celebrities and the time(s) they are detected in an array\n *       (<code>Celebrities</code>) of <a>CelebrityRecognition</a>\n *\n *       objects. Each <code>CelebrityRecognition</code> contains information about the celebrity in a <a>CelebrityDetail</a>\n *       object and the time, <code>Timestamp</code>, the celebrity was detected.\n *       </p>\n *          <note>\n *\n *             <p>\n *                <code>GetCelebrityRecognition</code> only returns the default\n *         facial attributes (<code>BoundingBox</code>, <code>Confidence</code>,\n *         <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The other facial attributes listed\n *         in the <code>Face</code> object of the following response syntax are not returned. For more information,\n *         see FaceDetail in the Amazon Rekognition Developer Guide. </p>\n *          </note>\n *          <p>By default, the <code>Celebrities</code> array is sorted by time (milliseconds from the start of the video).\n *       You can also sort the array by celebrity by specifying the value <code>ID</code> in the <code>SortBy</code> input parameter.</p>\n *          <p>The <code>CelebrityDetail</code> object includes the celebrity identifer and additional information urls. If you don't store\n *       the additional information urls, you can get them later by calling <a>GetCelebrityInfo</a> with the celebrity identifer.</p>\n *          <p>No information is returned for faces not recognized as celebrities.</p>\n *          <p>Use MaxResults parameter to limit the number of labels returned. If there are more results than\n *       specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a\n *       pagination token for getting the next set of results. To get the next page of results, call <code>GetCelebrityDetection</code>\n *       and populate the <code>NextToken</code> request parameter with the token\n *       value returned from the previous call to <code>GetCelebrityRecognition</code>.</p>\n */\nexport class GetCelebrityRecognitionCommand extends $Command<\n  GetCelebrityRecognitionCommandInput,\n  GetCelebrityRecognitionCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: GetCelebrityRecognitionCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<GetCelebrityRecognitionCommandInput, GetCelebrityRecognitionCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"GetCelebrityRecognitionCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: GetCelebrityRecognitionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetCelebrityRecognitionResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: GetCelebrityRecognitionCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1GetCelebrityRecognitionCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<GetCelebrityRecognitionCommandOutput> {\n    return deserializeAws_json1_1GetCelebrityRecognitionCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}