{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CreateLogGroupRequest } from \"../models/models_0\";\nimport { deserializeAws_json1_1CreateLogGroupCommand, serializeAws_json1_1CreateLogGroupCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Creates a log group with the specified name. You can create up to 20,000 log groups per account.</p>\n *          <p>You must use the following guidelines when naming a log group:</p>\n *          <ul>\n *             <li>\n *                <p>Log group names must be unique within a region for an AWS account.</p>\n *             </li>\n *             <li>\n *                <p>Log group names can be between 1 and 512 characters long.</p>\n *             </li>\n *             <li>\n *                <p>Log group names consist of the following characters: a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen),\n *           '/' (forward slash), '.' (period), and '#' (number sign)</p>\n *             </li>\n *          </ul>\n *          <p>When you create a log group, by default the log events in the log group never expire. To set\n *     a retention policy so that events expire and are deleted after a specified time, use\n *       <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutRetentionPolicy.html\">PutRetentionPolicy</a>.</p>\n *          <p>If you associate a AWS Key Management Service (AWS KMS) customer master key (CMK) with the log group, ingested data is encrypted using the CMK.\n *       This association is stored as long as the data encrypted with the CMK is still within Amazon CloudWatch Logs.\n *       This enables Amazon CloudWatch Logs to decrypt this data whenever it is requested.</p>\n *          <p>If you attempt to associate a CMK with the log group but the CMK does not exist or the\n *       CMK is disabled, you receive an <code>InvalidParameterException</code> error. </p>\n *          <important>\n *             <p> CloudWatch Logs supports only symmetric CMKs. Do not associate an asymmetric CMK with\n *         your log group. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html\">Using Symmetric and Asymmetric\n *           Keys</a>.</p>\n *          </important>\n */\nvar CreateLogGroupCommand = /** @class */function (_super) {\n  __extends(CreateLogGroupCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function CreateLogGroupCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  CreateLogGroupCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"CloudWatchLogsClient\";\n    var commandName = \"CreateLogGroupCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: CreateLogGroupRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  CreateLogGroupCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1CreateLogGroupCommand(input, context);\n  };\n  CreateLogGroupCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1CreateLogGroupCommand(output, context);\n  };\n  return CreateLogGroupCommand;\n}($Command);\nexport { CreateLogGroupCommand };","map":{"version":3,"mappings":";AACA,SAASA,qBAAqB,QAAQ,oBAAoB;AAC1D,SACEC,2CAA2C,EAC3CC,yCAAyC,QACpC,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;EAA2CC;EAKzC;EACA;EAEA,+BAAqBC,KAAiC;IAAtD;IACE;IACAC,iBAAO;IAFYC,WAAK,GAALF,KAAK;;IAGxB;EACF;EAEA;;;EAGAG,iDAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAAiD,EACjDC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACZ,cAAc,CAACS,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,UAAM,GAAKF,aAAa,OAAlB;IACd,IAAMQ,UAAU,GAAG,sBAAsB;IACzC,IAAMC,WAAW,GAAG,uBAAuB;IAC3C,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM;MACNH,UAAU;MACVC,WAAW;MACXG,uBAAuB,EAAExB,qBAAqB,CAACyB,kBAAkB;MACjEC,wBAAwB,EAAE,UAACC,MAAW;QAAK,aAAM;MAAN;KAC5C;IACO,kBAAc,GAAKf,aAAa,eAAlB;IACtB,OAAOM,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,qBAAc,CAACC,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxES,uBAAuB,CACxB;EACH,CAAC;EAEOZ,yCAAS,GAAjB,UAAkBH,KAAiC,EAAEwB,OAAuB;IAC1E,OAAO7B,yCAAyC,CAACK,KAAK,EAAEwB,OAAO,CAAC;EAClE,CAAC;EAEOrB,2CAAW,GAAnB,UAAoBiB,MAAsB,EAAEI,OAAuB;IACjE,OAAO9B,2CAA2C,CAAC0B,MAAM,EAAEI,OAAO,CAAC;EACrE,CAAC;EAIH,4BAAC;AAAD,CAAC,CAtD0C1B,QAAQ","names":["CreateLogGroupRequest","deserializeAws_json1_1CreateLogGroupCommand","serializeAws_json1_1CreateLogGroupCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","CreateLogGroupCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","output","resolve","request","handle","context"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-sdk/client-cloudwatch-logs/commands/CreateLogGroupCommand.ts"],"sourcesContent":["import { CloudWatchLogsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../CloudWatchLogsClient\";\nimport { CreateLogGroupRequest } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1CreateLogGroupCommand,\n  serializeAws_json1_1CreateLogGroupCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type CreateLogGroupCommandInput = CreateLogGroupRequest;\nexport type CreateLogGroupCommandOutput = __MetadataBearer;\n\n/**\n * <p>Creates a log group with the specified name. You can create up to 20,000 log groups per account.</p>\n *          <p>You must use the following guidelines when naming a log group:</p>\n *          <ul>\n *             <li>\n *                <p>Log group names must be unique within a region for an AWS account.</p>\n *             </li>\n *             <li>\n *                <p>Log group names can be between 1 and 512 characters long.</p>\n *             </li>\n *             <li>\n *                <p>Log group names consist of the following characters: a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen),\n *           '/' (forward slash), '.' (period), and '#' (number sign)</p>\n *             </li>\n *          </ul>\n *          <p>When you create a log group, by default the log events in the log group never expire. To set\n *     a retention policy so that events expire and are deleted after a specified time, use\n *       <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutRetentionPolicy.html\">PutRetentionPolicy</a>.</p>\n *          <p>If you associate a AWS Key Management Service (AWS KMS) customer master key (CMK) with the log group, ingested data is encrypted using the CMK.\n *       This association is stored as long as the data encrypted with the CMK is still within Amazon CloudWatch Logs.\n *       This enables Amazon CloudWatch Logs to decrypt this data whenever it is requested.</p>\n *          <p>If you attempt to associate a CMK with the log group but the CMK does not exist or the\n *       CMK is disabled, you receive an <code>InvalidParameterException</code> error. </p>\n *          <important>\n *             <p> CloudWatch Logs supports only symmetric CMKs. Do not associate an asymmetric CMK with\n *         your log group. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html\">Using Symmetric and Asymmetric\n *           Keys</a>.</p>\n *          </important>\n */\nexport class CreateLogGroupCommand extends $Command<\n  CreateLogGroupCommandInput,\n  CreateLogGroupCommandOutput,\n  CloudWatchLogsClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: CreateLogGroupCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: CloudWatchLogsClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<CreateLogGroupCommandInput, CreateLogGroupCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"CloudWatchLogsClient\";\n    const commandName = \"CreateLogGroupCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: CreateLogGroupRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: (output: any) => output,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: CreateLogGroupCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1CreateLogGroupCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<CreateLogGroupCommandOutput> {\n    return deserializeAws_json1_1CreateLogGroupCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}