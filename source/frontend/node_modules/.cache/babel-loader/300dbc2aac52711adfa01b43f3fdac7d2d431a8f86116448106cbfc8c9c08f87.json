{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spread, __values } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport { GraphQLAuthError } from '@aws-amplify/api';\nimport { Logger } from '@aws-amplify/core';\nimport { isEnumFieldType, isGraphQLScalarType, isPredicateObj, isSchemaModel, isSchemaModelWithAttributes, isTargetNameAssociation, isNonModelFieldType, OpType, ModelOperation, isPredicateGroup } from '../types';\nimport { extractPrimaryKeyFieldNames, establishRelationAndKeys, IDENTIFIER_KEY_SEPARATOR } from '../util';\nvar logger = new Logger('DataStore');\nvar GraphQLOperationType;\n(function (GraphQLOperationType) {\n  GraphQLOperationType[\"LIST\"] = \"query\";\n  GraphQLOperationType[\"CREATE\"] = \"mutation\";\n  GraphQLOperationType[\"UPDATE\"] = \"mutation\";\n  GraphQLOperationType[\"DELETE\"] = \"mutation\";\n  GraphQLOperationType[\"GET\"] = \"query\";\n})(GraphQLOperationType || (GraphQLOperationType = {}));\nexport var TransformerMutationType;\n(function (TransformerMutationType) {\n  TransformerMutationType[\"CREATE\"] = \"Create\";\n  TransformerMutationType[\"UPDATE\"] = \"Update\";\n  TransformerMutationType[\"DELETE\"] = \"Delete\";\n  TransformerMutationType[\"GET\"] = \"Get\";\n})(TransformerMutationType || (TransformerMutationType = {}));\nvar dummyMetadata = {\n  _version: undefined,\n  _lastChangedAt: undefined,\n  _deleted: undefined\n};\nvar metadataFields = Object.keys(dummyMetadata);\nexport function getMetadataFields() {\n  return metadataFields;\n}\nexport function generateSelectionSet(namespace, modelDefinition) {\n  var scalarFields = getScalarFields(modelDefinition);\n  var nonModelFields = getNonModelFields(namespace, modelDefinition);\n  var implicitOwnerField = getImplicitOwnerField(modelDefinition, scalarFields);\n  var scalarAndMetadataFields = Object.values(scalarFields).map(function (_a) {\n    var name = _a.name;\n    return name;\n  }).concat(implicitOwnerField).concat(nonModelFields);\n  if (isSchemaModel(modelDefinition)) {\n    scalarAndMetadataFields = scalarAndMetadataFields.concat(getMetadataFields()).concat(getConnectionFields(modelDefinition, namespace));\n  }\n  var result = scalarAndMetadataFields.join('\\n');\n  return result;\n}\nfunction getImplicitOwnerField(modelDefinition, scalarFields) {\n  var ownerFields = getOwnerFields(modelDefinition);\n  if (!scalarFields.owner && ownerFields.includes('owner')) {\n    return ['owner'];\n  }\n  return [];\n}\nfunction getOwnerFields(modelDefinition) {\n  var ownerFields = [];\n  if (isSchemaModelWithAttributes(modelDefinition)) {\n    modelDefinition.attributes.forEach(function (attr) {\n      if (attr.properties && attr.properties.rules) {\n        var rule = attr.properties.rules.find(function (rule) {\n          return rule.allow === 'owner';\n        });\n        if (rule && rule.ownerField) {\n          ownerFields.push(rule.ownerField);\n        }\n      }\n    });\n  }\n  return ownerFields;\n}\nfunction getScalarFields(modelDefinition) {\n  var fields = modelDefinition.fields;\n  var result = Object.values(fields).filter(function (field) {\n    if (isGraphQLScalarType(field.type) || isEnumFieldType(field.type)) {\n      return true;\n    }\n    return false;\n  }).reduce(function (acc, field) {\n    acc[field.name] = field;\n    return acc;\n  }, {});\n  return result;\n}\n// Used for generating the selection set for queries and mutations\nfunction getConnectionFields(modelDefinition, namespace) {\n  var result = [];\n  Object.values(modelDefinition.fields).filter(function (_a) {\n    var association = _a.association;\n    return association && Object.keys(association).length;\n  }).forEach(function (_a) {\n    var name = _a.name,\n      association = _a.association;\n    var connectionType = (association || {}).connectionType;\n    switch (connectionType) {\n      case 'HAS_ONE':\n      case 'HAS_MANY':\n        // Intentionally blank\n        break;\n      case 'BELONGS_TO':\n        if (isTargetNameAssociation(association)) {\n          // New codegen (CPK)\n          if (association.targetNames && association.targetNames.length > 0) {\n            // Need to retrieve relations in order to get connected model keys\n            var _b = __read(establishRelationAndKeys(namespace), 1),\n              relations = _b[0];\n            var connectedModelName = modelDefinition.fields[name].type['model'];\n            var byPkIndex = relations[connectedModelName].indexes.find(function (_a) {\n              var _b = __read(_a, 1),\n                name = _b[0];\n              return name === 'byPk';\n            });\n            var keyFields = byPkIndex && byPkIndex[1];\n            var keyFieldSelectionSet = keyFields === null || keyFields === void 0 ? void 0 : keyFields.join(' ');\n            // We rely on `_deleted` when we process the sync query (e.g. in batchSave in the adapters)\n            result.push(name + \" { \" + keyFieldSelectionSet + \" _deleted }\");\n          } else {\n            // backwards-compatability for schema generated prior to custom primary key support\n            result.push(name + \" { id _deleted }\");\n          }\n        }\n        break;\n      default:\n        throw new Error(\"Invalid connection type \" + connectionType);\n    }\n  });\n  return result;\n}\nfunction getNonModelFields(namespace, modelDefinition) {\n  var result = [];\n  Object.values(modelDefinition.fields).forEach(function (_a) {\n    var name = _a.name,\n      type = _a.type;\n    if (isNonModelFieldType(type)) {\n      var typeDefinition = namespace.nonModels[type.nonModel];\n      var scalarFields = Object.values(getScalarFields(typeDefinition)).map(function (_a) {\n        var name = _a.name;\n        return name;\n      });\n      var nested_1 = [];\n      Object.values(typeDefinition.fields).forEach(function (field) {\n        var type = field.type,\n          name = field.name;\n        if (isNonModelFieldType(type)) {\n          var typeDefinition_1 = namespace.nonModels[type.nonModel];\n          nested_1.push(name + \" { \" + generateSelectionSet(namespace, typeDefinition_1) + \" }\");\n        }\n      });\n      result.push(name + \" { \" + scalarFields.join(' ') + \" \" + nested_1.join(' ') + \" }\");\n    }\n  });\n  return result;\n}\nexport function getAuthorizationRules(modelDefinition) {\n  // Searching for owner authorization on attributes\n  var authConfig = [].concat(modelDefinition.attributes || []).find(function (attr) {\n    return attr && attr.type === 'auth';\n  });\n  var _a = (authConfig || {}).properties,\n    _b = (_a === void 0 ? {} : _a).rules,\n    rules = _b === void 0 ? [] : _b;\n  var resultRules = [];\n  // Multiple rules can be declared for allow: owner\n  rules.forEach(function (rule) {\n    // setting defaults for backwards compatibility with old cli\n    var _a = rule.identityClaim,\n      identityClaim = _a === void 0 ? 'cognito:username' : _a,\n      _b = rule.ownerField,\n      ownerField = _b === void 0 ? 'owner' : _b,\n      _c = rule.operations,\n      operations = _c === void 0 ? ['create', 'update', 'delete', 'read'] : _c,\n      _d = rule.provider,\n      provider = _d === void 0 ? 'userPools' : _d,\n      _e = rule.groupClaim,\n      groupClaim = _e === void 0 ? 'cognito:groups' : _e,\n      _f = rule.allow,\n      authStrategy = _f === void 0 ? 'iam' : _f,\n      _g = rule.groups,\n      groups = _g === void 0 ? [] : _g,\n      _h = rule.groupsField,\n      groupsField = _h === void 0 ? '' : _h;\n    var isReadAuthorized = operations.includes('read');\n    var isOwnerAuth = authStrategy === 'owner';\n    if (!isReadAuthorized && !isOwnerAuth) {\n      return;\n    }\n    var authRule = {\n      identityClaim: identityClaim,\n      ownerField: ownerField,\n      provider: provider,\n      groupClaim: groupClaim,\n      authStrategy: authStrategy,\n      groups: groups,\n      groupsField: groupsField,\n      areSubscriptionsPublic: false\n    };\n    if (isOwnerAuth) {\n      // look for the subscription level override\n      // only pay attention to the public level\n      var modelConfig = [].concat(modelDefinition.attributes || []).find(function (attr) {\n        return attr && attr.type === 'model';\n      });\n      // find the subscriptions level. ON is default\n      var _j = (modelConfig || {}).properties,\n        _k = (_j === void 0 ? {} : _j).subscriptions,\n        _l = (_k === void 0 ? {} : _k).level,\n        level = _l === void 0 ? 'on' : _l;\n      // treat subscriptions as public for owner auth with unprotected reads\n      // when `read` is omitted from `operations`\n      authRule.areSubscriptionsPublic = !operations.includes('read') || level === 'public';\n    }\n    if (isOwnerAuth) {\n      // owner rules has least priority\n      resultRules.push(authRule);\n      return;\n    }\n    resultRules.unshift(authRule);\n  });\n  return resultRules;\n}\nexport function buildSubscriptionGraphQLOperation(namespace, modelDefinition, transformerMutationType, isOwnerAuthorization, ownerField, filterArg) {\n  if (filterArg === void 0) {\n    filterArg = false;\n  }\n  var selectionSet = generateSelectionSet(namespace, modelDefinition);\n  var typeName = modelDefinition.name;\n  var opName = \"on\" + transformerMutationType + typeName;\n  var docArgs = [];\n  var opArgs = [];\n  if (filterArg) {\n    docArgs.push(\"$filter: ModelSubscription\" + typeName + \"FilterInput\");\n    opArgs.push('filter: $filter');\n  }\n  if (isOwnerAuthorization) {\n    docArgs.push(\"$\" + ownerField + \": String!\");\n    opArgs.push(ownerField + \": $\" + ownerField);\n  }\n  var docStr = docArgs.length ? \"(\" + docArgs.join(',') + \")\" : '';\n  var opStr = opArgs.length ? \"(\" + opArgs.join(',') + \")\" : '';\n  return [transformerMutationType, opName, \"subscription operation\" + docStr + \"{\\n\\t\\t\\t\" + opName + opStr + \"{\\n\\t\\t\\t\\t\" + selectionSet + \"\\n\\t\\t\\t}\\n\\t\\t}\"];\n}\nexport function buildGraphQLOperation(namespace, modelDefinition, graphQLOpType) {\n  var selectionSet = generateSelectionSet(namespace, modelDefinition);\n  var typeName = modelDefinition.name,\n    pluralTypeName = modelDefinition.pluralName;\n  var operation;\n  var documentArgs;\n  var operationArgs;\n  var transformerMutationType;\n  switch (graphQLOpType) {\n    case 'LIST':\n      operation = \"sync\" + pluralTypeName;\n      documentArgs = \"($limit: Int, $nextToken: String, $lastSync: AWSTimestamp, $filter: Model\" + typeName + \"FilterInput)\";\n      operationArgs = '(limit: $limit, nextToken: $nextToken, lastSync: $lastSync, filter: $filter)';\n      selectionSet = \"items {\\n\\t\\t\\t\\t\\t\\t\\t\" + selectionSet + \"\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tnextToken\\n\\t\\t\\t\\t\\t\\tstartedAt\";\n      break;\n    case 'CREATE':\n      operation = \"create\" + typeName;\n      documentArgs = \"($input: Create\" + typeName + \"Input!)\";\n      operationArgs = '(input: $input)';\n      transformerMutationType = TransformerMutationType.CREATE;\n      break;\n    case 'UPDATE':\n      operation = \"update\" + typeName;\n      documentArgs = \"($input: Update\" + typeName + \"Input!, $condition: Model\" + typeName + \"ConditionInput)\";\n      operationArgs = '(input: $input, condition: $condition)';\n      transformerMutationType = TransformerMutationType.UPDATE;\n      break;\n    case 'DELETE':\n      operation = \"delete\" + typeName;\n      documentArgs = \"($input: Delete\" + typeName + \"Input!, $condition: Model\" + typeName + \"ConditionInput)\";\n      operationArgs = '(input: $input, condition: $condition)';\n      transformerMutationType = TransformerMutationType.DELETE;\n      break;\n    case 'GET':\n      operation = \"get\" + typeName;\n      documentArgs = \"($id: ID!)\";\n      operationArgs = '(id: $id)';\n      transformerMutationType = TransformerMutationType.GET;\n      break;\n    default:\n      throw new Error(\"Invalid graphQlOpType \" + graphQLOpType);\n  }\n  return [[transformerMutationType, operation, GraphQLOperationType[graphQLOpType] + \" operation\" + documentArgs + \"{\\n\\t\\t\" + operation + operationArgs + \"{\\n\\t\\t\\t\" + selectionSet + \"\\n\\t\\t}\\n\\t}\"]];\n}\nexport function createMutationInstanceFromModelOperation(relationships, modelDefinition, opType, model, element, condition, MutationEventConstructor, modelInstanceCreator, id) {\n  var operation;\n  switch (opType) {\n    case OpType.INSERT:\n      operation = TransformerMutationType.CREATE;\n      break;\n    case OpType.UPDATE:\n      operation = TransformerMutationType.UPDATE;\n      break;\n    case OpType.DELETE:\n      operation = TransformerMutationType.DELETE;\n      break;\n    default:\n      throw new Error(\"Invalid opType \" + opType);\n  }\n  // stringify nested objects of type AWSJSON\n  // this allows us to return parsed JSON to users (see `castInstanceType()` in datastore.ts),\n  // but still send the object correctly over the wire\n  var replacer = function (k, v) {\n    var isAWSJSON = k && v !== null && typeof v === 'object' && modelDefinition.fields[k] && modelDefinition.fields[k].type === 'AWSJSON';\n    if (isAWSJSON) {\n      return JSON.stringify(v);\n    }\n    return v;\n  };\n  var modelId = getIdentifierValue(modelDefinition, element);\n  var optionalId = OpType.INSERT && id ? {\n    id: id\n  } : {};\n  var mutationEvent = modelInstanceCreator(MutationEventConstructor, __assign(__assign({}, optionalId), {\n    data: JSON.stringify(element, replacer),\n    modelId: modelId,\n    model: model.name,\n    operation: operation,\n    condition: JSON.stringify(condition)\n  }));\n  return mutationEvent;\n}\nexport function predicateToGraphQLCondition(predicate, modelDefinition) {\n  var result = {};\n  if (!predicate || !Array.isArray(predicate.predicates)) {\n    return result;\n  }\n  // This is compatible with how the GQL Transform currently generates the Condition Input,\n  // i.e. any PK and SK fields are omitted and can't be used as conditions.\n  // However, I think this limits usability.\n  // What if we want to delete all records where SK > some value\n  // Or all records where PK = some value but SKs are different values\n  // TODO: if the Transform gets updated we'll need to modify this logic to only omit\n  // key fields from the predicate/condition when ALL of the keyFields are present and using `eq` operators\n  var keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n  return predicateToGraphQLFilter(predicate, keyFields);\n}\n/**\n * @param predicatesGroup - Predicate Group\n    @returns GQL Filter Expression from Predicate Group\n    \n    @remarks Flattens redundant list predicates\n    @example\n\n    ```js\n    { and:[{ and:[{ username:  { eq: 'bob' }}] }] }\n    ```\n    Becomes\n    ```js\n    { and:[{ username: { eq: 'bob' }}] }\n    ```\n    */\nexport function predicateToGraphQLFilter(predicatesGroup, fieldsToOmit, root) {\n  if (fieldsToOmit === void 0) {\n    fieldsToOmit = [];\n  }\n  if (root === void 0) {\n    root = true;\n  }\n  var result = {};\n  if (!predicatesGroup || !Array.isArray(predicatesGroup.predicates)) {\n    return result;\n  }\n  var type = predicatesGroup.type,\n    predicates = predicatesGroup.predicates;\n  var isList = type === 'and' || type === 'or';\n  result[type] = isList ? [] : {};\n  var children = [];\n  predicates.forEach(function (predicate) {\n    var _a, _b;\n    if (isPredicateObj(predicate)) {\n      var field = predicate.field,\n        operator = predicate.operator,\n        operand = predicate.operand;\n      if (fieldsToOmit.includes(field)) return;\n      var gqlField = (_a = {}, _a[field] = (_b = {}, _b[operator] = operand, _b), _a);\n      children.push(gqlField);\n      return;\n    }\n    var child = predicateToGraphQLFilter(predicate, fieldsToOmit, false);\n    if (Object.keys(child).length > 0) {\n      children.push(child);\n    }\n  });\n  // flatten redundant list predicates\n  if (children.length === 1) {\n    var _a = __read(children, 1),\n      child = _a[0];\n    if (\n    // any nested list node\n    isList && !root ||\n    // root list node where the only child is also a list node\n    isList && root && ('and' in child || 'or' in child)) {\n      delete result[type];\n      Object.assign(result, child);\n      return result;\n    }\n  }\n  children.forEach(function (child) {\n    if (isList) {\n      result[type].push(child);\n    } else {\n      result[type] = child;\n    }\n  });\n  if (isList) {\n    if (result[type].length === 0) return {};\n  } else {\n    if (Object.keys(result[type]).length === 0) return {};\n  }\n  return result;\n}\n/**\n *\n * @param group - selective sync predicate group\n * @returns set of distinct field names in the filter group\n */\nexport function filterFields(group) {\n  var fields = new Set();\n  if (!group || !Array.isArray(group.predicates)) return fields;\n  var predicates = group.predicates;\n  var stack = __spread(predicates);\n  while (stack.length > 0) {\n    var current = stack.pop();\n    if (isPredicateObj(current)) {\n      fields.add(current.field);\n    } else if (isPredicateGroup(current)) {\n      stack.push.apply(stack, __spread(current.predicates));\n    }\n  }\n  return fields;\n}\n/**\n *\n * @param modelDefinition\n * @returns set of field names used with dynamic auth modes configured for the provided model definition\n */\nexport function dynamicAuthFields(modelDefinition) {\n  var e_1, _a;\n  var rules = getAuthorizationRules(modelDefinition);\n  var fields = new Set();\n  try {\n    for (var rules_1 = __values(rules), rules_1_1 = rules_1.next(); !rules_1_1.done; rules_1_1 = rules_1.next()) {\n      var rule = rules_1_1.value;\n      if (rule.groupsField && !rule.groups.length) {\n        // dynamic group rule will have no values in `rule.groups`\n        fields.add(rule.groupsField);\n      } else if (rule.ownerField) {\n        fields.add(rule.ownerField);\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (rules_1_1 && !rules_1_1.done && (_a = rules_1.return)) _a.call(rules_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return fields;\n}\n/**\n *\n * @param group - selective sync predicate group\n * @returns the total number of OR'd predicates in the filter group\n *\n * @example returns 2\n * ```js\n * { type: \"or\", predicates: [\n * { field: \"username\", operator: \"beginsWith\", operand: \"a\" },\n * { field: \"title\", operator: \"contains\", operand: \"abc\" },\n * ]}\n * ```\n */\nexport function countFilterCombinations(group) {\n  if (!group || !Array.isArray(group.predicates)) return 0;\n  var count = 0;\n  var stack = [group];\n  while (stack.length > 0) {\n    var current = stack.pop();\n    if (isPredicateGroup(current)) {\n      var predicates = current.predicates,\n        type = current.type;\n      // ignore length = 1; groups with 1 predicate will get flattened when converted to gqlFilter\n      if (type === 'or' && predicates.length > 1) {\n        count += predicates.length;\n      }\n      stack.push.apply(stack, __spread(predicates));\n    }\n  }\n  // if we didn't encounter any OR groups, default to 1\n  return count || 1;\n}\n/**\n *\n * @param group - selective sync predicate group\n * @returns name of repeated field | null\n *\n * @example returns \"username\"\n * ```js\n * { type: \"and\", predicates: [\n * \t\t{ field: \"username\", operator: \"beginsWith\", operand: \"a\" },\n * \t\t{ field: \"username\", operator: \"contains\", operand: \"abc\" },\n * ] }\n * ```\n */\nexport function repeatedFieldInGroup(group) {\n  if (!group || !Array.isArray(group.predicates)) return null;\n  // convert to filter in order to flatten redundant groups\n  var gqlFilter = predicateToGraphQLFilter(group);\n  var stack = [gqlFilter];\n  var hasGroupRepeatedFields = function (fields) {\n    var e_2, _a;\n    var seen = {};\n    try {\n      for (var fields_1 = __values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {\n        var f = fields_1_1.value;\n        var _b = __read(Object.keys(f), 1),\n          fieldName = _b[0];\n        if (seen[fieldName]) {\n          return fieldName;\n        }\n        seen[fieldName] = true;\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return)) _a.call(fields_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    return null;\n  };\n  while (stack.length > 0) {\n    var current = stack.pop();\n    var _a = __read(Object.keys(current), 1),\n      key = _a[0];\n    var values = current[key];\n    if (!Array.isArray(values)) {\n      return null;\n    }\n    // field value will be single object\n    var predicateObjects = values.filter(function (v) {\n      return !Array.isArray(Object.values(v)[0]);\n    });\n    // group value will be an array\n    var predicateGroups = values.filter(function (v) {\n      return Array.isArray(Object.values(v)[0]);\n    });\n    if (key === 'and') {\n      var repeatedField = hasGroupRepeatedFields(predicateObjects);\n      if (repeatedField) {\n        return repeatedField;\n      }\n    }\n    stack.push.apply(stack, __spread(predicateGroups));\n  }\n  return null;\n}\nexport var RTFError;\n(function (RTFError) {\n  RTFError[RTFError[\"UnknownField\"] = 0] = \"UnknownField\";\n  RTFError[RTFError[\"MaxAttributes\"] = 1] = \"MaxAttributes\";\n  RTFError[RTFError[\"MaxCombinations\"] = 2] = \"MaxCombinations\";\n  RTFError[RTFError[\"RepeatedFieldname\"] = 3] = \"RepeatedFieldname\";\n  RTFError[RTFError[\"NotGroup\"] = 4] = \"NotGroup\";\n  RTFError[RTFError[\"FieldNotInType\"] = 5] = \"FieldNotInType\";\n})(RTFError || (RTFError = {}));\nexport function generateRTFRemediation(errorType, modelDefinition, predicatesGroup) {\n  var selSyncFields = filterFields(predicatesGroup);\n  var selSyncFieldStr = __spread(selSyncFields).join(', ');\n  var dynamicAuthModeFields = dynamicAuthFields(modelDefinition);\n  var dynamicAuthFieldsStr = __spread(dynamicAuthModeFields).join(', ');\n  var filterCombinations = countFilterCombinations(predicatesGroup);\n  var repeatedField = repeatedFieldInGroup(predicatesGroup);\n  switch (errorType) {\n    case RTFError.UnknownField:\n      return \"Your API was generated with an older version of the CLI that doesn't support backend subscription filtering.\" + 'To enable backend subscription filtering, upgrade your Amplify CLI to the latest version and push your app by running `amplify upgrade` followed by `amplify push`';\n    case RTFError.MaxAttributes:\n      {\n        var message = \"Your selective sync expression for \" + modelDefinition.name + \" contains \" + selSyncFields.size + \" different model fields: \" + selSyncFieldStr + \".\\n\\n\";\n        if (dynamicAuthModeFields.size > 0) {\n          message += \"Note: the number of fields you can use with selective sync is affected by @auth rules configured on the model.\\n\\n\" + \"Dynamic auth modes, such as owner auth and dynamic group auth each utilize 1 field.\\n\" + (\"You currently have \" + dynamicAuthModeFields.size + \" dynamic auth mode(s) configured on this model: \" + dynamicAuthFieldsStr + \".\");\n        }\n        return message;\n      }\n    case RTFError.MaxCombinations:\n      {\n        var message = \"Your selective sync expression for \" + modelDefinition.name + \" contains \" + filterCombinations + \" field combinations (total number of predicates in an OR expression).\\n\\n\";\n        if (dynamicAuthModeFields.size > 0) {\n          message += \"Note: the number of fields you can use with selective sync is affected by @auth rules configured on the model.\\n\\n\" + \"Dynamic auth modes, such as owner auth and dynamic group auth factor in to the number of combinations you're using.\\n\" + (\"You currently have \" + dynamicAuthModeFields.size + \" dynamic auth mode(s) configured on this model: \" + dynamicAuthFieldsStr + \".\");\n        }\n        return message;\n      }\n    case RTFError.RepeatedFieldname:\n      return \"Your selective sync expression for \" + modelDefinition.name + \" contains multiple entries for \" + repeatedField + \" in the same AND group.\";\n    case RTFError.NotGroup:\n      return \"Your selective sync expression for \" + modelDefinition.name + \" uses a `not` group. If you'd like to filter subscriptions in the backend, \" + \"rewrite your expression using `ne` or `notContains` operators.\";\n    case RTFError.FieldNotInType:\n      // no remediation instructions. We'll surface the message directly\n      return '';\n  }\n}\nexport function getUserGroupsFromToken(token, rule) {\n  // validate token against groupClaim\n  var userGroups = token[rule.groupClaim] || [];\n  if (typeof userGroups === 'string') {\n    var parsedGroups = void 0;\n    try {\n      parsedGroups = JSON.parse(userGroups);\n    } catch (e) {\n      parsedGroups = userGroups;\n    }\n    userGroups = [].concat(parsedGroups);\n  }\n  return userGroups;\n}\nexport function getModelAuthModes(_a) {\n  var authModeStrategy = _a.authModeStrategy,\n    defaultAuthMode = _a.defaultAuthMode,\n    modelName = _a.modelName,\n    schema = _a.schema;\n  return __awaiter(this, void 0, void 0, function () {\n    var operations, modelAuthModes, error_1;\n    var _this = this;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          operations = Object.values(ModelOperation);\n          modelAuthModes = {\n            CREATE: [],\n            READ: [],\n            UPDATE: [],\n            DELETE: []\n          };\n          _b.label = 1;\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, Promise.all(operations.map(function (operation) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var authModes;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4 /*yield*/, authModeStrategy({\n                      schema: schema,\n                      modelName: modelName,\n                      operation: operation\n                    })];\n                  case 1:\n                    authModes = _a.sent();\n                    if (typeof authModes === 'string') {\n                      modelAuthModes[operation] = [authModes];\n                    } else if (Array.isArray(authModes) && authModes.length) {\n                      modelAuthModes[operation] = authModes;\n                    } else {\n                      // Use default auth mode if nothing is returned from authModeStrategy\n                      modelAuthModes[operation] = [defaultAuthMode];\n                    }\n                    return [2 /*return*/];\n                }\n              });\n            });\n          }))];\n\n        case 2:\n          _b.sent();\n          return [3 /*break*/, 4];\n        case 3:\n          error_1 = _b.sent();\n          logger.debug(\"Error getting auth modes for model: \" + modelName, error_1);\n          return [3 /*break*/, 4];\n        case 4:\n          return [2 /*return*/, modelAuthModes];\n      }\n    });\n  });\n}\nexport function getForbiddenError(error) {\n  var forbiddenErrorMessages = ['Request failed with status code 401', 'Request failed with status code 403'];\n  var forbiddenError;\n  if (error && error.errors) {\n    forbiddenError = error.errors.find(function (err) {\n      return forbiddenErrorMessages.includes(err.message);\n    });\n  } else if (error && error.message) {\n    forbiddenError = error;\n  }\n  if (forbiddenError) {\n    return forbiddenError.message;\n  }\n  return null;\n}\nexport function getClientSideAuthError(error) {\n  var clientSideAuthErrors = Object.values(GraphQLAuthError);\n  var clientSideError = error && error.message && clientSideAuthErrors.find(function (clientError) {\n    return error.message.includes(clientError);\n  });\n  return clientSideError || null;\n}\nexport function getTokenForCustomAuth(authMode, amplifyConfig) {\n  if (amplifyConfig === void 0) {\n    amplifyConfig = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var _a, functionAuthProvider, token, error_2;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          if (!(authMode === GRAPHQL_AUTH_MODE.AWS_LAMBDA)) return [3 /*break*/, 6];\n          _a = amplifyConfig.authProviders, functionAuthProvider = (_a === void 0 ? {\n            functionAuthProvider: null\n          } : _a).functionAuthProvider;\n          if (!(functionAuthProvider && typeof functionAuthProvider === 'function')) return [3 /*break*/, 5];\n          _b.label = 1;\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, functionAuthProvider()];\n        case 2:\n          token = _b.sent().token;\n          return [2 /*return*/, token];\n        case 3:\n          error_2 = _b.sent();\n          throw new Error(\"Error retrieving token from `functionAuthProvider`: \" + error_2);\n        case 4:\n          return [3 /*break*/, 6];\n        case 5:\n          // TODO: add docs link once available\n          throw new Error(\"You must provide a `functionAuthProvider` function to `DataStore.configure` when using \" + GRAPHQL_AUTH_MODE.AWS_LAMBDA);\n        case 6:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n// Util that takes a modelDefinition and model and returns either the id value(s) or the custom primary key value(s)\nexport function getIdentifierValue(modelDefinition, model) {\n  var pkFieldNames = extractPrimaryKeyFieldNames(modelDefinition);\n  var idOrPk = pkFieldNames.map(function (f) {\n    return model[f];\n  }).join(IDENTIFIER_KEY_SEPARATOR);\n  return idOrPk;\n}","map":{"version":3,"mappings":";AAAA;AACA;AACA,SAASA,iBAAiB,QAAQ,0BAA0B;AAC5D,SAASC,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,MAAM,QAAQ,mBAAmB;AAE1C,SAKCC,eAAe,EACfC,mBAAmB,EACnBC,cAAc,EACdC,aAAa,EACbC,2BAA2B,EAC3BC,uBAAuB,EACvBC,mBAAmB,EAGnBC,MAAM,EASNC,cAAc,EAIdC,gBAAgB,QACV,UAAU;AACjB,SACCC,2BAA2B,EAC3BC,wBAAwB,EACxBC,wBAAwB,QAClB,SAAS;AAGhB,IAAMC,MAAM,GAAG,IAAId,MAAM,CAAC,WAAW,CAAC;AAEtC,IAAKe,oBAMJ;AAND,WAAKA,oBAAoB;EACxBA,sCAAc;EACdA,2CAAmB;EACnBA,2CAAmB;EACnBA,2CAAmB;EACnBA,qCAAa;AACd,CAAC,EANIA,oBAAoB,KAApBA,oBAAoB;AAQzB,WAAYC,uBAKX;AALD,WAAYA,uBAAuB;EAClCA,4CAAiB;EACjBA,4CAAiB;EACjBA,4CAAiB;EACjBA,sCAAW;AACZ,CAAC,EALWA,uBAAuB,KAAvBA,uBAAuB;AAOnC,IAAMC,aAAa,GAA0B;EAC5CC,QAAQ,EAAEC,SAAU;EACpBC,cAAc,EAAED,SAAU;EAC1BE,QAAQ,EAAEF;CACV;AAED,IAAMG,cAAc,GACnBC,MAAM,CAACC,IAAI,CAACP,aAAa,CACzB;AACD,OAAM,SAAUQ,iBAAiBA;EAChC,OAAOH,cAAc;AACtB;AAEA,OAAM,SAAUI,oBAAoBA,CACnCC,SAA0B,EAC1BC,eAA6C;EAE7C,IAAMC,YAAY,GAAGC,eAAe,CAACF,eAAe,CAAC;EACrD,IAAMG,cAAc,GAAGC,iBAAiB,CAACL,SAAS,EAAEC,eAAe,CAAC;EACpE,IAAMK,kBAAkB,GAAGC,qBAAqB,CAC/CN,eAAe,EACfC,YAAY,CACZ;EAED,IAAIM,uBAAuB,GAAGZ,MAAM,CAACa,MAAM,CAACP,YAAY,CAAC,CACvDQ,GAAG,CAAC,UAACC,EAAQ;QAANC,cAAI;IAAO,WAAI;EAAJ,CAAI,CAAC,CACvBC,MAAM,CAACP,kBAAkB,CAAC,CAC1BO,MAAM,CAACT,cAAc,CAAC;EAExB,IAAI3B,aAAa,CAACwB,eAAe,CAAC,EAAE;IACnCO,uBAAuB,GAAGA,uBAAuB,CAC/CK,MAAM,CAACf,iBAAiB,EAAE,CAAC,CAC3Be,MAAM,CAACC,mBAAmB,CAACb,eAAe,EAAED,SAAS,CAAC,CAAC;;EAG1D,IAAMe,MAAM,GAAGP,uBAAuB,CAACQ,IAAI,CAAC,IAAI,CAAC;EAEjD,OAAOD,MAAM;AACd;AAEA,SAASR,qBAAqBA,CAC7BN,eAA6C,EAC7CC,YAAyB;EAEzB,IAAMe,WAAW,GAAGC,cAAc,CAACjB,eAAe,CAAC;EAEnD,IAAI,CAACC,YAAY,CAACiB,KAAK,IAAIF,WAAW,CAACG,QAAQ,CAAC,OAAO,CAAC,EAAE;IACzD,OAAO,CAAC,OAAO,CAAC;;EAEjB,OAAO,EAAE;AACV;AAEA,SAASF,cAAcA,CACtBjB,eAA6C;EAE7C,IAAMgB,WAAW,GAAa,EAAE;EAChC,IAAIvC,2BAA2B,CAACuB,eAAe,CAAC,EAAE;IACjDA,eAAe,CAACoB,UAAW,CAACC,OAAO,CAAC,cAAI;MACvC,IAAIC,IAAI,CAACC,UAAU,IAAID,IAAI,CAACC,UAAU,CAACC,KAAK,EAAE;QAC7C,IAAMC,IAAI,GAAGH,IAAI,CAACC,UAAU,CAACC,KAAK,CAACE,IAAI,CAAC,cAAI;UAAI,WAAI,CAACC,KAAK,KAAK,OAAO;QAAtB,CAAsB,CAAC;QACvE,IAAIF,IAAI,IAAIA,IAAI,CAACG,UAAU,EAAE;UAC5BZ,WAAW,CAACa,IAAI,CAACJ,IAAI,CAACG,UAAU,CAAC;;;IAGpC,CAAC,CAAC;;EAEH,OAAOZ,WAAW;AACnB;AAEA,SAASd,eAAeA,CACvBF,eAA6C;EAErC,mCAAM;EAEd,IAAMc,MAAM,GAAGnB,MAAM,CAACa,MAAM,CAACsB,MAAM,CAAC,CAClCC,MAAM,CAAC,eAAK;IACZ,IAAIzD,mBAAmB,CAAC0D,KAAK,CAACC,IAAI,CAAC,IAAI5D,eAAe,CAAC2D,KAAK,CAACC,IAAI,CAAC,EAAE;MACnE,OAAO,IAAI;;IAGZ,OAAO,KAAK;EACb,CAAC,CAAC,CACDC,MAAM,CAAC,UAACC,GAAG,EAAEH,KAAK;IAClBG,GAAG,CAACH,KAAK,CAACrB,IAAI,CAAC,GAAGqB,KAAK;IAEvB,OAAOG,GAAG;EACX,CAAC,EAAE,EAAiB,CAAC;EAEtB,OAAOrB,MAAM;AACd;AAEA;AACA,SAASD,mBAAmBA,CAC3Bb,eAA4B,EAC5BD,SAA0B;EAE1B,IAAMe,MAAM,GAAa,EAAE;EAE3BnB,MAAM,CAACa,MAAM,CAACR,eAAe,CAAC8B,MAAM,CAAC,CACnCC,MAAM,CAAC,UAACrB,EAAe;QAAb0B,4BAAW;IAAO,kBAAW,IAAIzC,MAAM,CAACC,IAAI,CAACwC,WAAW,CAAC,CAACC,MAAM;EAA9C,CAA8C,CAAC,CAC3EhB,OAAO,CAAC,UAACX,EAAqB;QAAnBC,cAAI;MAAEyB,4BAAW;IACpB,uDAAc;IAEtB,QAAQE,cAAc;MACrB,KAAK,SAAS;MACd,KAAK,UAAU;QACd;QACA;MACD,KAAK,YAAY;QAChB,IAAI5D,uBAAuB,CAAC0D,WAAW,CAAC,EAAE;UACzC;UACA,IAAIA,WAAW,CAACG,WAAW,IAAIH,WAAW,CAACG,WAAW,CAACF,MAAM,GAAG,CAAC,EAAE;YAClE;YACM,uDAAiD;cAAhDG,iBAAgD;YAEvD,IAAMC,kBAAkB,GACvBzC,eAAe,CAAC8B,MAAM,CAACnB,IAAI,CAAC,CAACsB,IAAI,CAAC,OAAO,CAAC;YAE3C,IAAMS,SAAS,GAAGF,SAAS,CAACC,kBAAkB,CAAC,CAACE,OAAO,CAACjB,IAAI,CAC3D,UAAChB,EAAM;kBAANkC,kBAAM;gBAALjC,YAAI;cAAM,WAAI,KAAK,MAAM;YAAf,CAAe,CAC3B;YACD,IAAMkC,SAAS,GAAGH,SAAS,IAAIA,SAAS,CAAC,CAAC,CAAC;YAC3C,IAAMI,oBAAoB,GAAGD,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAE9B,IAAI,CAAC,GAAG,CAAC;YAEjD;YACAD,MAAM,CAACe,IAAI,CAAIlB,IAAI,WAAMmC,oBAAoB,gBAAa,CAAC;WAC3D,MAAM;YACN;YACAhC,MAAM,CAACe,IAAI,CAAIlB,IAAI,qBAAkB,CAAC;;;QAGxC;MACD;QACC,MAAM,IAAIoC,KAAK,CAAC,6BAA2BT,cAAgB,CAAC;;EAE/D,CAAC,CAAC;EAEH,OAAOxB,MAAM;AACd;AAEA,SAASV,iBAAiBA,CACzBL,SAA0B,EAC1BC,eAA6C;EAE7C,IAAMc,MAAM,GAAa,EAAE;EAE3BnB,MAAM,CAACa,MAAM,CAACR,eAAe,CAAC8B,MAAM,CAAC,CAACT,OAAO,CAAC,UAACX,EAAc;QAAZC,cAAI;MAAEsB,cAAI;IAC1D,IAAItD,mBAAmB,CAACsD,IAAI,CAAC,EAAE;MAC9B,IAAMe,cAAc,GAAGjD,SAAS,CAACkD,SAAU,CAAChB,IAAI,CAACiB,QAAQ,CAAC;MAC1D,IAAMjD,YAAY,GAAGN,MAAM,CAACa,MAAM,CAACN,eAAe,CAAC8C,cAAc,CAAC,CAAC,CAACvC,GAAG,CACtE,UAACC,EAAQ;YAANC,cAAI;QAAO,WAAI;MAAJ,CAAI,CAClB;MAED,IAAMwC,QAAM,GAAa,EAAE;MAC3BxD,MAAM,CAACa,MAAM,CAACwC,cAAc,CAAClB,MAAM,CAAC,CAACT,OAAO,CAAC,eAAK;QACzC,qBAAI;UAAEV,iBAAI;QAElB,IAAIhC,mBAAmB,CAACsD,IAAI,CAAC,EAAE;UAC9B,IAAMmB,gBAAc,GAAGrD,SAAS,CAACkD,SAAU,CAAChB,IAAI,CAACiB,QAAQ,CAAC;UAC1DC,QAAM,CAACtB,IAAI,CACPlB,IAAI,WAAMb,oBAAoB,CAACC,SAAS,EAAEqD,gBAAc,CAAC,OAAI,CAChE;;MAEH,CAAC,CAAC;MAEFtC,MAAM,CAACe,IAAI,CAAIlB,IAAI,WAAMV,YAAY,CAACc,IAAI,CAAC,GAAG,CAAC,SAAIoC,QAAM,CAACpC,IAAI,CAAC,GAAG,CAAC,OAAI,CAAC;;EAE1E,CAAC,CAAC;EAEF,OAAOD,MAAM;AACd;AAEA,OAAM,SAAUuC,qBAAqBA,CACpCrD,eAA4B;EAE5B;EACA,IAAMsD,UAAU,GAAI,EAAsB,CACxC1C,MAAM,CAACZ,eAAe,CAACoB,UAAU,IAAI,EAAE,CAAC,CACxCM,IAAI,CAAC,cAAI;IAAI,WAAI,IAAIJ,IAAI,CAACW,IAAI,KAAK,MAAM;EAA5B,CAA4B,CAAC;EAEpC,sCAA+B;IAAjBW,oCAAU;IAAVpB,+BAAiB;EAEvC,IAAM+B,WAAW,GAAwB,EAAE;EAC3C;EACA/B,KAAK,CAACH,OAAO,CAAC,cAAI;IACjB;IAEC,2BAAkC;MAAlCmC,uDAAkC;MAClCZ,oBAAoB;MAApBhB,yCAAoB;MACpB6B,oBAAmD;MAAnDC,wEAAmD;MACnDC,kBAAsB;MAAtBC,2CAAsB;MACtBC,oBAA6B;MAA7BC,kDAA6B;MAC7BC,eAA2B;MAA3BC,yCAA2B;MAC3BC,gBAAW;MAAXC,gCAAW;MACXC,qBAAgB;MAAhBC,qCAAgB;IAGjB,IAAMC,gBAAgB,GAAGX,UAAU,CAACvC,QAAQ,CAAC,MAAM,CAAC;IACpD,IAAMmD,WAAW,GAAGN,YAAY,KAAK,OAAO;IAE5C,IAAI,CAACK,gBAAgB,IAAI,CAACC,WAAW,EAAE;MACtC;;IAGD,IAAMC,QAAQ,GAAsB;MACnCf,aAAa;MACb5B,UAAU;MACVgC,QAAQ;MACRE,UAAU;MACVE,YAAY;MACZE,MAAM;MACNE,WAAW;MACXI,sBAAsB,EAAE;KACxB;IAED,IAAIF,WAAW,EAAE;MAChB;MACA;MACA,IAAMG,WAAW,GAAI,EAAsB,CACzC7D,MAAM,CAACZ,eAAe,CAACoB,UAAU,IAAI,EAAE,CAAC,CACxCM,IAAI,CAAC,cAAI;QAAI,WAAI,IAAIJ,IAAI,CAACW,IAAI,KAAK,OAAO;MAA7B,CAA6B,CAAC;MAE7C;MACQ,uCAAyD;QAA3CyC,4CAAoC;QAAnBC,oCAAY;QAAZC,iCAA0B;MAGjE;MACA;MACAL,QAAQ,CAACC,sBAAsB,GAC9B,CAACd,UAAU,CAACvC,QAAQ,CAAC,MAAM,CAAC,IAAIyD,KAAK,KAAK,QAAQ;;IAGpD,IAAIN,WAAW,EAAE;MAChB;MACAf,WAAW,CAAC1B,IAAI,CAAC0C,QAAQ,CAAC;MAC1B;;IAGDhB,WAAW,CAACsB,OAAO,CAACN,QAAQ,CAAC;EAC9B,CAAC,CAAC;EAEF,OAAOhB,WAAW;AACnB;AAEA,OAAM,SAAUuB,iCAAiCA,CAChD/E,SAA0B,EAC1BC,eAA4B,EAC5B+E,uBAAgD,EAChDC,oBAA6B,EAC7BpD,UAAkB,EAClBqD,SAA0B;EAA1B;IAAAA,iBAA0B;EAAA;EAE1B,IAAMC,YAAY,GAAGpF,oBAAoB,CAACC,SAAS,EAAEC,eAAe,CAAC;EAE7D,mCAAc;EAEtB,IAAMmF,MAAM,GAAG,OAAKJ,uBAAuB,GAAGK,QAAU;EAExD,IAAMC,OAAO,GAAa,EAAE;EAC5B,IAAMC,MAAM,GAAa,EAAE;EAE3B,IAAIL,SAAS,EAAE;IACdI,OAAO,CAACxD,IAAI,CAAC,+BAA6BuD,QAAQ,gBAAa,CAAC;IAChEE,MAAM,CAACzD,IAAI,CAAC,iBAAiB,CAAC;;EAG/B,IAAImD,oBAAoB,EAAE;IACzBK,OAAO,CAACxD,IAAI,CAAC,MAAID,UAAU,cAAW,CAAC;IACvC0D,MAAM,CAACzD,IAAI,CAAID,UAAU,WAAMA,UAAY,CAAC;;EAG7C,IAAM2D,MAAM,GAAGF,OAAO,CAAChD,MAAM,GAAG,MAAIgD,OAAO,CAACtE,IAAI,CAAC,GAAG,CAAC,MAAG,GAAG,EAAE;EAC7D,IAAMyE,KAAK,GAAGF,MAAM,CAACjD,MAAM,GAAG,MAAIiD,MAAM,CAACvE,IAAI,CAAC,GAAG,CAAC,MAAG,GAAG,EAAE;EAE1D,OAAO,CACNgE,uBAAuB,EACvBI,MAAM,EACN,2BAAyBI,MAAM,iBAC5BJ,MAAM,GAAGK,KAAK,mBACbN,YAAY,qBAEd,CACF;AACF;AAEA,OAAM,SAAUO,qBAAqBA,CACpC1F,SAA0B,EAC1BC,eAA4B,EAC5B0F,aAAgD;EAEhD,IAAIR,YAAY,GAAGpF,oBAAoB,CAACC,SAAS,EAAEC,eAAe,CAAC;EAE3D,mCAAc;IAAE2F,2CAA0B;EAElD,IAAIC,SAAiB;EACrB,IAAIC,YAAoB;EACxB,IAAIC,aAAqB;EACzB,IAAIf,uBAAgD;EAEpD,QAAQW,aAAa;IACpB,KAAK,MAAM;MACVE,SAAS,GAAG,SAAOD,cAAgB;MACnCE,YAAY,GAAG,8EAA4ET,QAAQ,iBAAc;MACjHU,aAAa,GACZ,8EAA8E;MAC/EZ,YAAY,GAAG,4BACTA,YAAY,kEAGL;MACb;IACD,KAAK,QAAQ;MACZU,SAAS,GAAG,WAASR,QAAU;MAC/BS,YAAY,GAAG,oBAAkBT,QAAQ,YAAS;MAClDU,aAAa,GAAG,iBAAiB;MACjCf,uBAAuB,GAAG3F,uBAAuB,CAAC2G,MAAM;MACxD;IACD,KAAK,QAAQ;MACZH,SAAS,GAAG,WAASR,QAAU;MAC/BS,YAAY,GAAG,oBAAkBT,QAAQ,iCAA4BA,QAAQ,oBAAiB;MAC9FU,aAAa,GAAG,wCAAwC;MACxDf,uBAAuB,GAAG3F,uBAAuB,CAAC4G,MAAM;MACxD;IACD,KAAK,QAAQ;MACZJ,SAAS,GAAG,WAASR,QAAU;MAC/BS,YAAY,GAAG,oBAAkBT,QAAQ,iCAA4BA,QAAQ,oBAAiB;MAC9FU,aAAa,GAAG,wCAAwC;MACxDf,uBAAuB,GAAG3F,uBAAuB,CAAC6G,MAAM;MACxD;IACD,KAAK,KAAK;MACTL,SAAS,GAAG,QAAMR,QAAU;MAC5BS,YAAY,GAAG,YAAY;MAC3BC,aAAa,GAAG,WAAW;MAC3Bf,uBAAuB,GAAG3F,uBAAuB,CAAC8G,GAAG;MACrD;IACD;MACC,MAAM,IAAInD,KAAK,CAAC,2BAAyB2C,aAAe,CAAC;;EAG3D,OAAO,CACN,CACCX,uBAAwB,EACxBa,SAAU,EACPzG,oBAAoB,CAACuG,aAAa,CAAC,kBAAaG,YAAY,eAC9DD,SAAU,GAAGE,aAAa,iBACzBZ,YAAY,iBAEd,CACA,CACD;AACF;AAEA,OAAM,SAAUiB,wCAAwCA,CAGvDC,aAA+B,EAC/BpG,eAA4B,EAC5BqG,MAAc,EACdC,KAAoC,EACpCC,OAAU,EACVC,SAA2B,EAC3BC,wBAAmE,EACnEC,oBAA0C,EAC1CC,EAAW;EAEX,IAAIf,SAAkC;EAEtC,QAAQS,MAAM;IACb,KAAKzH,MAAM,CAACgI,MAAM;MACjBhB,SAAS,GAAGxG,uBAAuB,CAAC2G,MAAM;MAC1C;IACD,KAAKnH,MAAM,CAACoH,MAAM;MACjBJ,SAAS,GAAGxG,uBAAuB,CAAC4G,MAAM;MAC1C;IACD,KAAKpH,MAAM,CAACqH,MAAM;MACjBL,SAAS,GAAGxG,uBAAuB,CAAC6G,MAAM;MAC1C;IACD;MACC,MAAM,IAAIlD,KAAK,CAAC,oBAAkBsD,MAAQ,CAAC;;EAG7C;EACA;EACA;EACA,IAAMQ,QAAQ,GAAG,UAACC,CAAC,EAAEC,CAAC;IACrB,IAAMC,SAAS,GACdF,CAAC,IACDC,CAAC,KAAK,IAAI,IACV,OAAOA,CAAC,KAAK,QAAQ,IACrB/G,eAAe,CAAC8B,MAAM,CAACgF,CAAC,CAAC,IACzB9G,eAAe,CAAC8B,MAAM,CAACgF,CAAC,CAAC,CAAC7E,IAAI,KAAK,SAAS;IAE7C,IAAI+E,SAAS,EAAE;MACd,OAAOC,IAAI,CAACC,SAAS,CAACH,CAAC,CAAC;;IAEzB,OAAOA,CAAC;EACT,CAAC;EAED,IAAMI,OAAO,GAAGC,kBAAkB,CAACpH,eAAe,EAAEuG,OAAO,CAAC;EAC5D,IAAMc,UAAU,GAAGzI,MAAM,CAACgI,MAAM,IAAID,EAAE,GAAG;IAAEA,EAAE;EAAA,CAAE,GAAG,EAAE;EAEpD,IAAMW,aAAa,GAAGZ,oBAAoB,CAACD,wBAAwB,wBAC/DY,UAAU;IACbE,IAAI,EAAEN,IAAI,CAACC,SAAS,CAACX,OAAO,EAAEM,QAAQ,CAAC;IACvCM,OAAO;IACPb,KAAK,EAAEA,KAAK,CAAC3F,IAAI;IACjBiF,SAAS,EAAEA,SAAU;IACrBY,SAAS,EAAES,IAAI,CAACC,SAAS,CAACV,SAAS;EAAC,GACnC;EAEF,OAAOc,aAAa;AACrB;AAEA,OAAM,SAAUE,2BAA2BA,CAC1CC,SAA+B,EAC/BzH,eAA4B;EAE5B,IAAMc,MAAM,GAAG,EAAE;EAEjB,IAAI,CAAC2G,SAAS,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,SAAS,CAACG,UAAU,CAAC,EAAE;IACvD,OAAO9G,MAAM;;EAGd;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA,IAAM+B,SAAS,GAAG9D,2BAA2B,CAACiB,eAAe,CAAC;EAC9D,OAAO6H,wBAAwB,CAACJ,SAAS,EAAE5E,SAAS,CAAqB;AAC1E;AACA;;;;;;;;;;;;;;;AAeA,OAAM,SAAUgF,wBAAwBA,CACvCC,eAAqC,EACrCC,YAA2B,EAC3BC,IAAW;EADX;IAAAD,iBAA2B;EAAA;EAC3B;IAAAC,WAAW;EAAA;EAEX,IAAMlH,MAAM,GAAkB,EAAE;EAEhC,IAAI,CAACgH,eAAe,IAAI,CAACJ,KAAK,CAACC,OAAO,CAACG,eAAe,CAACF,UAAU,CAAC,EAAE;IACnE,OAAO9G,MAAM;;EAGN,+BAAI;IAAE8G,uCAAU;EACxB,IAAMK,MAAM,GAAGhG,IAAI,KAAK,KAAK,IAAIA,IAAI,KAAK,IAAI;EAE9CnB,MAAM,CAACmB,IAAI,CAAC,GAAGgG,MAAM,GAAG,EAAE,GAAG,EAAE;EAE/B,IAAMC,QAAQ,GAAoB,EAAE;EAEpCN,UAAU,CAACvG,OAAO,CAAC,mBAAS;;IAC3B,IAAI9C,cAAc,CAACkJ,SAAS,CAAC,EAAE;MACtB,2BAAK;QAAEU,6BAAQ;QAAEC,2BAAO;MAEhC,IAAIL,YAAY,CAAC5G,QAAQ,CAACa,KAAe,CAAC,EAAE;MAE5C,IAAMqG,QAAQ,aACb3H,GAACsB,KAAK,cAAKY,GAACuF,QAAQ,IAAGC,OAAO,KAAE,KAChC;MAEDF,QAAQ,CAACrG,IAAI,CAACwG,QAAQ,CAAC;MACvB;;IAGD,IAAMC,KAAK,GAAGT,wBAAwB,CAACJ,SAAS,EAAEM,YAAY,EAAE,KAAK,CAAC;IACtE,IAAIpI,MAAM,CAACC,IAAI,CAAC0I,KAAK,CAAC,CAACjG,MAAM,GAAG,CAAC,EAAE;MAClC6F,QAAQ,CAACrG,IAAI,CAACyG,KAAK,CAAC;;EAEtB,CAAC,CAAC;EAEF;EACA,IAAIJ,QAAQ,CAAC7F,MAAM,KAAK,CAAC,EAAE;IACpB,4BAAkB;MAAjBiG,aAAiB;IACxB;IACC;IACCL,MAAM,IAAI,CAACD,IAAI;IAChB;IACCC,MAAM,IAAID,IAAI,KAAK,KAAK,IAAIM,KAAK,IAAI,IAAI,IAAIA,KAAK,CAAE,EACpD;MACD,OAAOxH,MAAM,CAACmB,IAAI,CAAC;MACnBtC,MAAM,CAAC4I,MAAM,CAACzH,MAAM,EAAEwH,KAAK,CAAC;MAC5B,OAAOxH,MAAM;;;EAIfoH,QAAQ,CAAC7G,OAAO,CAAC,eAAK;IACrB,IAAI4G,MAAM,EAAE;MACXnH,MAAM,CAACmB,IAAI,CAAC,CAACJ,IAAI,CAACyG,KAAK,CAAC;KACxB,MAAM;MACNxH,MAAM,CAACmB,IAAI,CAAC,GAAGqG,KAAK;;EAEtB,CAAC,CAAC;EAEF,IAAIL,MAAM,EAAE;IACX,IAAInH,MAAM,CAACmB,IAAI,CAAC,CAACI,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;GACxC,MAAM;IACN,IAAI1C,MAAM,CAACC,IAAI,CAACkB,MAAM,CAACmB,IAAI,CAAC,CAAC,CAACI,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;;EAGtD,OAAOvB,MAAM;AACd;AAEA;;;;;AAKA,OAAM,SAAU0H,YAAYA,CAACC,KAA4B;EACxD,IAAM3G,MAAM,GAAG,IAAI4G,GAAG,EAAU;EAEhC,IAAI,CAACD,KAAK,IAAI,CAACf,KAAK,CAACC,OAAO,CAACc,KAAK,CAACb,UAAU,CAAC,EAAE,OAAO9F,MAAM;EAErD,iCAAU;EAClB,IAAM6G,KAAK,YAAOf,UAAU,CAAC;EAE7B,OAAOe,KAAK,CAACtG,MAAM,GAAG,CAAC,EAAE;IACxB,IAAMuG,OAAO,GAAGD,KAAK,CAACE,GAAG,EAAE;IAC3B,IAAItK,cAAc,CAACqK,OAAO,CAAC,EAAE;MAC5B9G,MAAM,CAACgH,GAAG,CAACF,OAAO,CAAC5G,KAAe,CAAC;KACnC,MAAM,IAAIlD,gBAAgB,CAAC8J,OAAO,CAAC,EAAE;MACrCD,KAAK,CAAC9G,IAAI,OAAV8G,KAAK,WAASC,OAAO,CAAChB,UAAU;;;EAIlC,OAAO9F,MAAM;AACd;AAEA;;;;;AAKA,OAAM,SAAUiH,iBAAiBA,CAAC/I,eAA4B;;EAC7D,IAAMwB,KAAK,GAAG6B,qBAAqB,CAACrD,eAAe,CAAC;EACpD,IAAM8B,MAAM,GAAG,IAAI4G,GAAG,EAAU;;IAEhC,KAAmB,4BAAK,4EAAE;MAArB,IAAMjH,IAAI;MACd,IAAIA,IAAI,CAAC2C,WAAW,IAAI,CAAC3C,IAAI,CAACyC,MAAM,CAAC7B,MAAM,EAAE;QAC5C;QACAP,MAAM,CAACgH,GAAG,CAAErH,IAA0B,CAAC2C,WAAW,CAAC;OACnD,MAAM,IAAI3C,IAAI,CAACG,UAAU,EAAE;QAC3BE,MAAM,CAACgH,GAAG,CAACrH,IAAI,CAACG,UAAU,CAAC;;;;;;;;;;;;;;EAI7B,OAAOE,MAAM;AACd;AAEA;;;;;;;;;;;;;AAaA,OAAM,SAAUkH,uBAAuBA,CAACP,KAA4B;EACnE,IAAI,CAACA,KAAK,IAAI,CAACf,KAAK,CAACC,OAAO,CAACc,KAAK,CAACb,UAAU,CAAC,EAAE,OAAO,CAAC;EAExD,IAAIqB,KAAK,GAAG,CAAC;EACb,IAAMN,KAAK,GAAoD,CAACF,KAAK,CAAC;EAEtE,OAAOE,KAAK,CAACtG,MAAM,GAAG,CAAC,EAAE;IACxB,IAAMuG,OAAO,GAAGD,KAAK,CAACE,GAAG,EAAE;IAE3B,IAAI/J,gBAAgB,CAAC8J,OAAO,CAAC,EAAE;MACtB,mCAAU;QAAE3G,mBAAI;MACxB;MACA,IAAIA,IAAI,KAAK,IAAI,IAAI2F,UAAU,CAACvF,MAAM,GAAG,CAAC,EAAE;QAC3C4G,KAAK,IAAIrB,UAAU,CAACvF,MAAM;;MAE3BsG,KAAK,CAAC9G,IAAI,OAAV8G,KAAK,WAASf,UAAU;;;EAI1B;EACA,OAAOqB,KAAK,IAAI,CAAC;AAClB;AAEA;;;;;;;;;;;;;AAaA,OAAM,SAAUC,oBAAoBA,CACnCT,KAA4B;EAE5B,IAAI,CAACA,KAAK,IAAI,CAACf,KAAK,CAACC,OAAO,CAACc,KAAK,CAACb,UAAU,CAAC,EAAE,OAAO,IAAI;EAE3D;EACA,IAAMuB,SAAS,GAAGtB,wBAAwB,CAACY,KAAK,CAAC;EAEjD,IAAME,KAAK,GAAoB,CAACQ,SAAS,CAAC;EAE1C,IAAMC,sBAAsB,GAAG,UAACtH,MAAuB;;IACtD,IAAMuH,IAAI,GAAG,EAAE;;MAEf,KAAgB,8BAAM,iFAAE;QAAnB,IAAMC,CAAC;QACL,kCAA4B;UAA3BC,iBAA2B;QAClC,IAAIF,IAAI,CAACE,SAAS,CAAC,EAAE;UACpB,OAAOA,SAAS;;QAEjBF,IAAI,CAACE,SAAS,CAAC,GAAG,IAAI;;;;;;;;;;;;;IAEvB,OAAO,IAAI;EACZ,CAAC;EAED,OAAOZ,KAAK,CAACtG,MAAM,GAAG,CAAC,EAAE;IACxB,IAAMuG,OAAO,GAAGD,KAAK,CAACE,GAAG,EAAE;IAErB,wCAA6B;MAA5BW,WAA4B;IACnC,IAAMhJ,MAAM,GAAGoI,OAAQ,CAACY,GAAG,CAAC;IAE5B,IAAI,CAAC9B,KAAK,CAACC,OAAO,CAACnH,MAAM,CAAC,EAAE;MAC3B,OAAO,IAAI;;IAGZ;IACA,IAAMiJ,gBAAgB,GAAGjJ,MAAM,CAACuB,MAAM,CACrC,WAAC;MAAI,QAAC2F,KAAK,CAACC,OAAO,CAAChI,MAAM,CAACa,MAAM,CAACuG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAAnC,CAAmC,CACxC;IAED;IACA,IAAM2C,eAAe,GAAGlJ,MAAM,CAACuB,MAAM,CAAC,WAAC;MACtC,YAAK,CAAC4F,OAAO,CAAChI,MAAM,CAACa,MAAM,CAACuG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAAlC,CAAkC,CAClC;IAED,IAAIyC,GAAG,KAAK,KAAK,EAAE;MAClB,IAAMG,aAAa,GAAGP,sBAAsB,CAACK,gBAAgB,CAAC;MAC9D,IAAIE,aAAa,EAAE;QAClB,OAAOA,aAAa;;;IAItBhB,KAAK,CAAC9G,IAAI,OAAV8G,KAAK,WAASe,eAAe;;EAG9B,OAAO,IAAI;AACZ;AAEA,WAAYE,QAOX;AAPD,WAAYA,QAAQ;EACnBA,uDAAY;EACZA,yDAAa;EACbA,6DAAe;EACfA,iEAAiB;EACjBA,+CAAQ;EACRA,2DAAc;AACf,CAAC,EAPWA,QAAQ,KAARA,QAAQ;AASpB,OAAM,SAAUC,sBAAsBA,CACrCC,SAAmB,EACnB9J,eAA4B,EAC5B8H,eAAiD;EAEjD,IAAMiC,aAAa,GAAGvB,YAAY,CAACV,eAAe,CAAC;EACnD,IAAMkC,eAAe,GAAGC,SAAIF,aAAa,EAAEhJ,IAAI,CAAC,IAAI,CAAC;EACrD,IAAMmJ,qBAAqB,GAAGnB,iBAAiB,CAAC/I,eAAe,CAAC;EAChE,IAAMmK,oBAAoB,GAAGF,SAAIC,qBAAqB,EAAEnJ,IAAI,CAAC,IAAI,CAAC;EAClE,IAAMqJ,kBAAkB,GAAGpB,uBAAuB,CAAClB,eAAe,CAAC;EACnE,IAAM6B,aAAa,GAAGT,oBAAoB,CAACpB,eAAe,CAAC;EAE3D,QAAQgC,SAAS;IAChB,KAAKF,QAAQ,CAACS,YAAY;MACzB,OACC,8GAA8G,GAC9G,oKAAoK;IAGtK,KAAKT,QAAQ,CAACU,aAAa;MAAE;QAC5B,IAAIC,OAAO,GAAG,wCAAsCvK,eAAe,CAACW,IAAI,kBAAaoJ,aAAa,CAACS,IAAI,iCAA4BR,eAAe,UAAO;QAEzJ,IAAIE,qBAAqB,CAACM,IAAI,GAAG,CAAC,EAAE;UACnCD,OAAO,IACN,oHAAoH,GACpH,uFAAuF,IACvF,wBAAsBL,qBAAqB,CAACM,IAAI,wDAAmDL,oBAAoB,MAAG;;QAG5H,OAAOI,OAAO;;IAGf,KAAKX,QAAQ,CAACa,eAAe;MAAE;QAC9B,IAAIF,OAAO,GAAG,wCAAsCvK,eAAe,CAACW,IAAI,kBAAayJ,kBAAkB,8EAA2E;QAElL,IAAIF,qBAAqB,CAACM,IAAI,GAAG,CAAC,EAAE;UACnCD,OAAO,IACN,oHAAoH,GACpH,uHAAuH,IACvH,wBAAsBL,qBAAqB,CAACM,IAAI,wDAAmDL,oBAAoB,MAAG;;QAE5H,OAAOI,OAAO;;IAGf,KAAKX,QAAQ,CAACc,iBAAiB;MAC9B,OAAO,wCAAsC1K,eAAe,CAACW,IAAI,uCAAkCgJ,aAAa,4BAAyB;IAC1I,KAAKC,QAAQ,CAACe,QAAQ;MACrB,OACC,wCAAsC3K,eAAe,CAACW,IAAI,gFAA+E,GACzI,gEAAoE;IAEtE,KAAKiJ,QAAQ,CAACgB,cAAc;MAC3B;MACA,OAAO,EAAE;;AAEZ;AAEA,OAAM,SAAUC,sBAAsBA,CACrCC,KAA+B,EAC/BrJ,IAAuB;EAEvB;EACA,IAAIsJ,UAAU,GAAsBD,KAAK,CAACrJ,IAAI,CAACqC,UAAU,CAAC,IAAI,EAAE;EAEhE,IAAI,OAAOiH,UAAU,KAAK,QAAQ,EAAE;IACnC,IAAIC,YAAY;IAChB,IAAI;MACHA,YAAY,GAAG/D,IAAI,CAACgE,KAAK,CAACF,UAAU,CAAC;KACrC,CAAC,OAAOG,CAAC,EAAE;MACXF,YAAY,GAAGD,UAAU;;IAE1BA,UAAU,GAAG,EAAE,CAACnK,MAAM,CAACoK,YAAY,CAAC;;EAGrC,OAAOD,UAAU;AAClB;AAEA,OAAM,SAAgBI,iBAAiBA,CAACzK,EAUvC;MATA0K,sCAAgB;IAChBC,oCAAe;IACfC,wBAAS;IACTC,kBAAM;;;;;;;UASA7H,UAAU,GAAG/D,MAAM,CAACa,MAAM,CAAC3B,cAAc,CAAC;UAE1C2M,cAAc,GAEhB;YACHzF,MAAM,EAAE,EAAE;YACV0F,IAAI,EAAE,EAAE;YACRzF,MAAM,EAAE,EAAE;YACVC,MAAM,EAAE;WACR;;;;UAGA,qBAAMyF,OAAO,CAACC,GAAG,CAChBjI,UAAU,CAACjD,GAAG,CAAC,UAAMmF,SAAS;YAAA;;;;;oBACX,qBAAMwF,gBAAgB,CAAC;sBACxCG,MAAM;sBACND,SAAS;sBACT1F,SAAS;qBACT,CAAC;;oBAJIgG,SAAS,GAAGlL,SAIhB;oBAEF,IAAI,OAAOkL,SAAS,KAAK,QAAQ,EAAE;sBAClCJ,cAAc,CAAC5F,SAAS,CAAC,GAAG,CAACgG,SAAS,CAAC;qBACvC,MAAM,IAAIlE,KAAK,CAACC,OAAO,CAACiE,SAAS,CAAC,IAAIA,SAAS,CAACvJ,MAAM,EAAE;sBACxDmJ,cAAc,CAAC5F,SAAS,CAAC,GAAGgG,SAAS;qBACrC,MAAM;sBACN;sBACAJ,cAAc,CAAC5F,SAAS,CAAC,GAAG,CAACyF,eAAe,CAAC;;;;;;WAE9C,CAAC,CACF;;;UAjBDzI,SAiBC;;;;UAED1D,MAAM,CAAC2M,KAAK,CAAC,yCAAuCP,SAAW,EAAEQ,OAAK,CAAC;;;UAExE,sBAAON,cAAc;;;;;AAGtB,OAAM,SAAUO,iBAAiBA,CAACC,KAAK;EACtC,IAAMC,sBAAsB,GAAG,CAC9B,qCAAqC,EACrC,qCAAqC,CACrC;EACD,IAAIC,cAAc;EAClB,IAAIF,KAAK,IAAIA,KAAK,CAACG,MAAM,EAAE;IAC1BD,cAAc,GAAIF,KAAK,CAACG,MAAgB,CAACzK,IAAI,CAAC,aAAG;MAChD,6BAAsB,CAACP,QAAQ,CAACiL,GAAG,CAAC7B,OAAO,CAAC;IAA5C,CAA4C,CAC5C;GACD,MAAM,IAAIyB,KAAK,IAAIA,KAAK,CAACzB,OAAO,EAAE;IAClC2B,cAAc,GAAGF,KAAK;;EAGvB,IAAIE,cAAc,EAAE;IACnB,OAAOA,cAAc,CAAC3B,OAAO;;EAE9B,OAAO,IAAI;AACZ;AAEA,OAAM,SAAU8B,sBAAsBA,CAACL,KAAK;EAC3C,IAAMM,oBAAoB,GAAG3M,MAAM,CAACa,MAAM,CAACrC,gBAAgB,CAAC;EAC5D,IAAMoO,eAAe,GACpBP,KAAK,IACLA,KAAK,CAACzB,OAAO,IACb+B,oBAAoB,CAAC5K,IAAI,CAAC,qBAAW;IACpC,YAAK,CAAC6I,OAAO,CAACpJ,QAAQ,CAACqL,WAAW,CAAC;EAAnC,CAAmC,CACnC;EACF,OAAOD,eAAe,IAAI,IAAI;AAC/B;AAEA,OAAM,SAAgBE,qBAAqBA,CAC1CC,QAA2B,EAC3BC,aAAuC;EAAvC;IAAAA,kBAAuC;EAAA;;;;;;gBAEnCD,QAAQ,KAAKxO,iBAAiB,CAAC0O,UAAU,GAAzC;UAEFlM,KACGiM,aAAa,cADwD,EAAvDE,oBAAoB,oBAAK;YAAEA,oBAAoB,EAAE;UAAI,CAAE,2BAAnC;gBAElCA,oBAAoB,IAAI,OAAOA,oBAAoB,KAAK,UAAU,GAAlE;;;;UAEgB,qBAAMA,oBAAoB,EAAE;;UAAtC/B,KAAK,GAAKlI,SAA4B,MAAjC;UACb,sBAAOkI,KAAK;;;UAEZ,MAAM,IAAI/H,KAAK,CACd,yDAAyD+J,OAAO,CAChE;;;;UAGF;UACA,MAAM,IAAI/J,KAAK,CACd,4FAA8F7E,iBAAiB,CAAC0O,UAAY,CAC5H;;;;;;;AAKJ;AACA,OAAM,SAAUxF,kBAAkBA,CACjCpH,eAA4B,EAC5BsG,KAA8C;EAE9C,IAAMyG,YAAY,GAAGhO,2BAA2B,CAACiB,eAAe,CAAC;EAEjE,IAAMgN,MAAM,GAAGD,YAAY,CAACtM,GAAG,CAAC,WAAC;IAAI,YAAK,CAAC6I,CAAC,CAAC;EAAR,CAAQ,CAAC,CAACvI,IAAI,CAAC9B,wBAAwB,CAAC;EAE7E,OAAO+N,MAAM;AACd","names":["GRAPHQL_AUTH_MODE","GraphQLAuthError","Logger","isEnumFieldType","isGraphQLScalarType","isPredicateObj","isSchemaModel","isSchemaModelWithAttributes","isTargetNameAssociation","isNonModelFieldType","OpType","ModelOperation","isPredicateGroup","extractPrimaryKeyFieldNames","establishRelationAndKeys","IDENTIFIER_KEY_SEPARATOR","logger","GraphQLOperationType","TransformerMutationType","dummyMetadata","_version","undefined","_lastChangedAt","_deleted","metadataFields","Object","keys","getMetadataFields","generateSelectionSet","namespace","modelDefinition","scalarFields","getScalarFields","nonModelFields","getNonModelFields","implicitOwnerField","getImplicitOwnerField","scalarAndMetadataFields","values","map","_a","name","concat","getConnectionFields","result","join","ownerFields","getOwnerFields","owner","includes","attributes","forEach","attr","properties","rules","rule","find","allow","ownerField","push","fields","filter","field","type","reduce","acc","association","length","connectionType","targetNames","relations","connectedModelName","byPkIndex","indexes","_b","keyFields","keyFieldSelectionSet","Error","typeDefinition","nonModels","nonModel","nested_1","typeDefinition_1","getAuthorizationRules","authConfig","resultRules","identityClaim","_c","operations","_d","provider","_e","groupClaim","_f","authStrategy","_g","groups","_h","groupsField","isReadAuthorized","isOwnerAuth","authRule","areSubscriptionsPublic","modelConfig","_k","_l","level","unshift","buildSubscriptionGraphQLOperation","transformerMutationType","isOwnerAuthorization","filterArg","selectionSet","opName","typeName","docArgs","opArgs","docStr","opStr","buildGraphQLOperation","graphQLOpType","pluralTypeName","operation","documentArgs","operationArgs","CREATE","UPDATE","DELETE","GET","createMutationInstanceFromModelOperation","relationships","opType","model","element","condition","MutationEventConstructor","modelInstanceCreator","id","INSERT","replacer","k","v","isAWSJSON","JSON","stringify","modelId","getIdentifierValue","optionalId","mutationEvent","data","predicateToGraphQLCondition","predicate","Array","isArray","predicates","predicateToGraphQLFilter","predicatesGroup","fieldsToOmit","root","isList","children","operator","operand","gqlField","child","assign","filterFields","group","Set","stack","current","pop","add","dynamicAuthFields","countFilterCombinations","count","repeatedFieldInGroup","gqlFilter","hasGroupRepeatedFields","seen","f","fieldName","key","predicateObjects","predicateGroups","repeatedField","RTFError","generateRTFRemediation","errorType","selSyncFields","selSyncFieldStr","__spread","dynamicAuthModeFields","dynamicAuthFieldsStr","filterCombinations","UnknownField","MaxAttributes","message","size","MaxCombinations","RepeatedFieldname","NotGroup","FieldNotInType","getUserGroupsFromToken","token","userGroups","parsedGroups","parse","e","getModelAuthModes","authModeStrategy","defaultAuthMode","modelName","schema","modelAuthModes","READ","Promise","all","authModes","debug","error_1","getForbiddenError","error","forbiddenErrorMessages","forbiddenError","errors","err","getClientSideAuthError","clientSideAuthErrors","clientSideError","clientError","getTokenForCustomAuth","authMode","amplifyConfig","AWS_LAMBDA","functionAuthProvider","error_2","pkFieldNames","idOrPk"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-amplify/datastore/src/sync/utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport { GraphQLAuthError } from '@aws-amplify/api';\nimport { Logger } from '@aws-amplify/core';\nimport { ModelInstanceCreator } from '../datastore/datastore';\nimport {\n\tAuthorizationRule,\n\tGraphQLCondition,\n\tGraphQLFilter,\n\tGraphQLField,\n\tisEnumFieldType,\n\tisGraphQLScalarType,\n\tisPredicateObj,\n\tisSchemaModel,\n\tisSchemaModelWithAttributes,\n\tisTargetNameAssociation,\n\tisNonModelFieldType,\n\tModelFields,\n\tModelInstanceMetadata,\n\tOpType,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tPredicatesGroup,\n\tPredicateObject,\n\tRelationshipType,\n\tSchemaModel,\n\tSchemaNamespace,\n\tSchemaNonModel,\n\tModelOperation,\n\tInternalSchema,\n\tAuthModeStrategy,\n\tModelAttributes,\n\tisPredicateGroup,\n} from '../types';\nimport {\n\textractPrimaryKeyFieldNames,\n\testablishRelationAndKeys,\n\tIDENTIFIER_KEY_SEPARATOR,\n} from '../util';\nimport { MutationEvent } from './';\n\nconst logger = new Logger('DataStore');\n\nenum GraphQLOperationType {\n\tLIST = 'query',\n\tCREATE = 'mutation',\n\tUPDATE = 'mutation',\n\tDELETE = 'mutation',\n\tGET = 'query',\n}\n\nexport enum TransformerMutationType {\n\tCREATE = 'Create',\n\tUPDATE = 'Update',\n\tDELETE = 'Delete',\n\tGET = 'Get',\n}\n\nconst dummyMetadata: ModelInstanceMetadata = {\n\t_version: undefined!,\n\t_lastChangedAt: undefined!,\n\t_deleted: undefined!,\n};\n\nconst metadataFields = <(keyof ModelInstanceMetadata)[]>(\n\tObject.keys(dummyMetadata)\n);\nexport function getMetadataFields(): ReadonlyArray<string> {\n\treturn metadataFields;\n}\n\nexport function generateSelectionSet(\n\tnamespace: SchemaNamespace,\n\tmodelDefinition: SchemaModel | SchemaNonModel\n): string {\n\tconst scalarFields = getScalarFields(modelDefinition);\n\tconst nonModelFields = getNonModelFields(namespace, modelDefinition);\n\tconst implicitOwnerField = getImplicitOwnerField(\n\t\tmodelDefinition,\n\t\tscalarFields\n\t);\n\n\tlet scalarAndMetadataFields = Object.values(scalarFields)\n\t\t.map(({ name }) => name)\n\t\t.concat(implicitOwnerField)\n\t\t.concat(nonModelFields);\n\n\tif (isSchemaModel(modelDefinition)) {\n\t\tscalarAndMetadataFields = scalarAndMetadataFields\n\t\t\t.concat(getMetadataFields())\n\t\t\t.concat(getConnectionFields(modelDefinition, namespace));\n\t}\n\n\tconst result = scalarAndMetadataFields.join('\\n');\n\n\treturn result;\n}\n\nfunction getImplicitOwnerField(\n\tmodelDefinition: SchemaModel | SchemaNonModel,\n\tscalarFields: ModelFields\n) {\n\tconst ownerFields = getOwnerFields(modelDefinition);\n\n\tif (!scalarFields.owner && ownerFields.includes('owner')) {\n\t\treturn ['owner'];\n\t}\n\treturn [];\n}\n\nfunction getOwnerFields(\n\tmodelDefinition: SchemaModel | SchemaNonModel\n): string[] {\n\tconst ownerFields: string[] = [];\n\tif (isSchemaModelWithAttributes(modelDefinition)) {\n\t\tmodelDefinition.attributes!.forEach(attr => {\n\t\t\tif (attr.properties && attr.properties.rules) {\n\t\t\t\tconst rule = attr.properties.rules.find(rule => rule.allow === 'owner');\n\t\t\t\tif (rule && rule.ownerField) {\n\t\t\t\t\townerFields.push(rule.ownerField);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\treturn ownerFields;\n}\n\nfunction getScalarFields(\n\tmodelDefinition: SchemaModel | SchemaNonModel\n): ModelFields {\n\tconst { fields } = modelDefinition;\n\n\tconst result = Object.values(fields)\n\t\t.filter(field => {\n\t\t\tif (isGraphQLScalarType(field.type) || isEnumFieldType(field.type)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t})\n\t\t.reduce((acc, field) => {\n\t\t\tacc[field.name] = field;\n\n\t\t\treturn acc;\n\t\t}, {} as ModelFields);\n\n\treturn result;\n}\n\n// Used for generating the selection set for queries and mutations\nfunction getConnectionFields(\n\tmodelDefinition: SchemaModel,\n\tnamespace: SchemaNamespace\n): string[] {\n\tconst result: string[] = [];\n\n\tObject.values(modelDefinition.fields)\n\t\t.filter(({ association }) => association && Object.keys(association).length)\n\t\t.forEach(({ name, association }) => {\n\t\t\tconst { connectionType } = association || {};\n\n\t\t\tswitch (connectionType) {\n\t\t\t\tcase 'HAS_ONE':\n\t\t\t\tcase 'HAS_MANY':\n\t\t\t\t\t// Intentionally blank\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BELONGS_TO':\n\t\t\t\t\tif (isTargetNameAssociation(association)) {\n\t\t\t\t\t\t// New codegen (CPK)\n\t\t\t\t\t\tif (association.targetNames && association.targetNames.length > 0) {\n\t\t\t\t\t\t\t// Need to retrieve relations in order to get connected model keys\n\t\t\t\t\t\t\tconst [relations] = establishRelationAndKeys(namespace);\n\n\t\t\t\t\t\t\tconst connectedModelName =\n\t\t\t\t\t\t\t\tmodelDefinition.fields[name].type['model'];\n\n\t\t\t\t\t\t\tconst byPkIndex = relations[connectedModelName].indexes.find(\n\t\t\t\t\t\t\t\t([name]) => name === 'byPk'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst keyFields = byPkIndex && byPkIndex[1];\n\t\t\t\t\t\t\tconst keyFieldSelectionSet = keyFields?.join(' ');\n\n\t\t\t\t\t\t\t// We rely on `_deleted` when we process the sync query (e.g. in batchSave in the adapters)\n\t\t\t\t\t\t\tresult.push(`${name} { ${keyFieldSelectionSet} _deleted }`);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// backwards-compatability for schema generated prior to custom primary key support\n\t\t\t\t\t\t\tresult.push(`${name} { id _deleted }`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Invalid connection type ${connectionType}`);\n\t\t\t}\n\t\t});\n\n\treturn result;\n}\n\nfunction getNonModelFields(\n\tnamespace: SchemaNamespace,\n\tmodelDefinition: SchemaModel | SchemaNonModel\n): string[] {\n\tconst result: string[] = [];\n\n\tObject.values(modelDefinition.fields).forEach(({ name, type }) => {\n\t\tif (isNonModelFieldType(type)) {\n\t\t\tconst typeDefinition = namespace.nonModels![type.nonModel];\n\t\t\tconst scalarFields = Object.values(getScalarFields(typeDefinition)).map(\n\t\t\t\t({ name }) => name\n\t\t\t);\n\n\t\t\tconst nested: string[] = [];\n\t\t\tObject.values(typeDefinition.fields).forEach(field => {\n\t\t\t\tconst { type, name } = field;\n\n\t\t\t\tif (isNonModelFieldType(type)) {\n\t\t\t\t\tconst typeDefinition = namespace.nonModels![type.nonModel];\n\t\t\t\t\tnested.push(\n\t\t\t\t\t\t`${name} { ${generateSelectionSet(namespace, typeDefinition)} }`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tresult.push(`${name} { ${scalarFields.join(' ')} ${nested.join(' ')} }`);\n\t\t}\n\t});\n\n\treturn result;\n}\n\nexport function getAuthorizationRules(\n\tmodelDefinition: SchemaModel\n): AuthorizationRule[] {\n\t// Searching for owner authorization on attributes\n\tconst authConfig = ([] as ModelAttributes)\n\t\t.concat(modelDefinition.attributes || [])\n\t\t.find(attr => attr && attr.type === 'auth');\n\n\tconst { properties: { rules = [] } = {} } = authConfig || {};\n\n\tconst resultRules: AuthorizationRule[] = [];\n\t// Multiple rules can be declared for allow: owner\n\trules.forEach(rule => {\n\t\t// setting defaults for backwards compatibility with old cli\n\t\tconst {\n\t\t\tidentityClaim = 'cognito:username',\n\t\t\townerField = 'owner',\n\t\t\toperations = ['create', 'update', 'delete', 'read'],\n\t\t\tprovider = 'userPools',\n\t\t\tgroupClaim = 'cognito:groups',\n\t\t\tallow: authStrategy = 'iam',\n\t\t\tgroups = [],\n\t\t\tgroupsField = '',\n\t\t} = rule;\n\n\t\tconst isReadAuthorized = operations.includes('read');\n\t\tconst isOwnerAuth = authStrategy === 'owner';\n\n\t\tif (!isReadAuthorized && !isOwnerAuth) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst authRule: AuthorizationRule = {\n\t\t\tidentityClaim,\n\t\t\townerField,\n\t\t\tprovider,\n\t\t\tgroupClaim,\n\t\t\tauthStrategy,\n\t\t\tgroups,\n\t\t\tgroupsField,\n\t\t\tareSubscriptionsPublic: false,\n\t\t};\n\n\t\tif (isOwnerAuth) {\n\t\t\t// look for the subscription level override\n\t\t\t// only pay attention to the public level\n\t\t\tconst modelConfig = ([] as ModelAttributes)\n\t\t\t\t.concat(modelDefinition.attributes || [])\n\t\t\t\t.find(attr => attr && attr.type === 'model');\n\n\t\t\t// find the subscriptions level. ON is default\n\t\t\tconst { properties: { subscriptions: { level = 'on' } = {} } = {} } =\n\t\t\t\tmodelConfig || {};\n\n\t\t\t// treat subscriptions as public for owner auth with unprotected reads\n\t\t\t// when `read` is omitted from `operations`\n\t\t\tauthRule.areSubscriptionsPublic =\n\t\t\t\t!operations.includes('read') || level === 'public';\n\t\t}\n\n\t\tif (isOwnerAuth) {\n\t\t\t// owner rules has least priority\n\t\t\tresultRules.push(authRule);\n\t\t\treturn;\n\t\t}\n\n\t\tresultRules.unshift(authRule);\n\t});\n\n\treturn resultRules;\n}\n\nexport function buildSubscriptionGraphQLOperation(\n\tnamespace: SchemaNamespace,\n\tmodelDefinition: SchemaModel,\n\ttransformerMutationType: TransformerMutationType,\n\tisOwnerAuthorization: boolean,\n\townerField: string,\n\tfilterArg: boolean = false\n): [TransformerMutationType, string, string] {\n\tconst selectionSet = generateSelectionSet(namespace, modelDefinition);\n\n\tconst { name: typeName } = modelDefinition;\n\n\tconst opName = `on${transformerMutationType}${typeName}`;\n\n\tconst docArgs: string[] = [];\n\tconst opArgs: string[] = [];\n\n\tif (filterArg) {\n\t\tdocArgs.push(`$filter: ModelSubscription${typeName}FilterInput`);\n\t\topArgs.push('filter: $filter');\n\t}\n\n\tif (isOwnerAuthorization) {\n\t\tdocArgs.push(`$${ownerField}: String!`);\n\t\topArgs.push(`${ownerField}: $${ownerField}`);\n\t}\n\n\tconst docStr = docArgs.length ? `(${docArgs.join(',')})` : '';\n\tconst opStr = opArgs.length ? `(${opArgs.join(',')})` : '';\n\n\treturn [\n\t\ttransformerMutationType,\n\t\topName,\n\t\t`subscription operation${docStr}{\n\t\t\t${opName}${opStr}{\n\t\t\t\t${selectionSet}\n\t\t\t}\n\t\t}`,\n\t];\n}\n\nexport function buildGraphQLOperation(\n\tnamespace: SchemaNamespace,\n\tmodelDefinition: SchemaModel,\n\tgraphQLOpType: keyof typeof GraphQLOperationType\n): [TransformerMutationType, string, string][] {\n\tlet selectionSet = generateSelectionSet(namespace, modelDefinition);\n\n\tconst { name: typeName, pluralName: pluralTypeName } = modelDefinition;\n\n\tlet operation: string;\n\tlet documentArgs: string;\n\tlet operationArgs: string;\n\tlet transformerMutationType: TransformerMutationType;\n\n\tswitch (graphQLOpType) {\n\t\tcase 'LIST':\n\t\t\toperation = `sync${pluralTypeName}`;\n\t\t\tdocumentArgs = `($limit: Int, $nextToken: String, $lastSync: AWSTimestamp, $filter: Model${typeName}FilterInput)`;\n\t\t\toperationArgs =\n\t\t\t\t'(limit: $limit, nextToken: $nextToken, lastSync: $lastSync, filter: $filter)';\n\t\t\tselectionSet = `items {\n\t\t\t\t\t\t\t${selectionSet}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnextToken\n\t\t\t\t\t\tstartedAt`;\n\t\t\tbreak;\n\t\tcase 'CREATE':\n\t\t\toperation = `create${typeName}`;\n\t\t\tdocumentArgs = `($input: Create${typeName}Input!)`;\n\t\t\toperationArgs = '(input: $input)';\n\t\t\ttransformerMutationType = TransformerMutationType.CREATE;\n\t\t\tbreak;\n\t\tcase 'UPDATE':\n\t\t\toperation = `update${typeName}`;\n\t\t\tdocumentArgs = `($input: Update${typeName}Input!, $condition: Model${typeName}ConditionInput)`;\n\t\t\toperationArgs = '(input: $input, condition: $condition)';\n\t\t\ttransformerMutationType = TransformerMutationType.UPDATE;\n\t\t\tbreak;\n\t\tcase 'DELETE':\n\t\t\toperation = `delete${typeName}`;\n\t\t\tdocumentArgs = `($input: Delete${typeName}Input!, $condition: Model${typeName}ConditionInput)`;\n\t\t\toperationArgs = '(input: $input, condition: $condition)';\n\t\t\ttransformerMutationType = TransformerMutationType.DELETE;\n\t\t\tbreak;\n\t\tcase 'GET':\n\t\t\toperation = `get${typeName}`;\n\t\t\tdocumentArgs = `($id: ID!)`;\n\t\t\toperationArgs = '(id: $id)';\n\t\t\ttransformerMutationType = TransformerMutationType.GET;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error(`Invalid graphQlOpType ${graphQLOpType}`);\n\t}\n\n\treturn [\n\t\t[\n\t\t\ttransformerMutationType!,\n\t\t\toperation!,\n\t\t\t`${GraphQLOperationType[graphQLOpType]} operation${documentArgs}{\n\t\t${operation!}${operationArgs}{\n\t\t\t${selectionSet}\n\t\t}\n\t}`,\n\t\t],\n\t];\n}\n\nexport function createMutationInstanceFromModelOperation<\n\tT extends PersistentModel\n>(\n\trelationships: RelationshipType,\n\tmodelDefinition: SchemaModel,\n\topType: OpType,\n\tmodel: PersistentModelConstructor<T>,\n\telement: T,\n\tcondition: GraphQLCondition,\n\tMutationEventConstructor: PersistentModelConstructor<MutationEvent>,\n\tmodelInstanceCreator: ModelInstanceCreator,\n\tid?: string\n): MutationEvent {\n\tlet operation: TransformerMutationType;\n\n\tswitch (opType) {\n\t\tcase OpType.INSERT:\n\t\t\toperation = TransformerMutationType.CREATE;\n\t\t\tbreak;\n\t\tcase OpType.UPDATE:\n\t\t\toperation = TransformerMutationType.UPDATE;\n\t\t\tbreak;\n\t\tcase OpType.DELETE:\n\t\t\toperation = TransformerMutationType.DELETE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error(`Invalid opType ${opType}`);\n\t}\n\n\t// stringify nested objects of type AWSJSON\n\t// this allows us to return parsed JSON to users (see `castInstanceType()` in datastore.ts),\n\t// but still send the object correctly over the wire\n\tconst replacer = (k, v) => {\n\t\tconst isAWSJSON =\n\t\t\tk &&\n\t\t\tv !== null &&\n\t\t\ttypeof v === 'object' &&\n\t\t\tmodelDefinition.fields[k] &&\n\t\t\tmodelDefinition.fields[k].type === 'AWSJSON';\n\n\t\tif (isAWSJSON) {\n\t\t\treturn JSON.stringify(v);\n\t\t}\n\t\treturn v;\n\t};\n\n\tconst modelId = getIdentifierValue(modelDefinition, element);\n\tconst optionalId = OpType.INSERT && id ? { id } : {};\n\n\tconst mutationEvent = modelInstanceCreator(MutationEventConstructor, {\n\t\t...optionalId,\n\t\tdata: JSON.stringify(element, replacer),\n\t\tmodelId,\n\t\tmodel: model.name,\n\t\toperation: operation!,\n\t\tcondition: JSON.stringify(condition),\n\t});\n\n\treturn mutationEvent;\n}\n\nexport function predicateToGraphQLCondition(\n\tpredicate: PredicatesGroup<any>,\n\tmodelDefinition: SchemaModel\n): GraphQLCondition {\n\tconst result = {};\n\n\tif (!predicate || !Array.isArray(predicate.predicates)) {\n\t\treturn result;\n\t}\n\n\t// This is compatible with how the GQL Transform currently generates the Condition Input,\n\t// i.e. any PK and SK fields are omitted and can't be used as conditions.\n\t// However, I think this limits usability.\n\t// What if we want to delete all records where SK > some value\n\t// Or all records where PK = some value but SKs are different values\n\n\t// TODO: if the Transform gets updated we'll need to modify this logic to only omit\n\t// key fields from the predicate/condition when ALL of the keyFields are present and using `eq` operators\n\n\tconst keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n\treturn predicateToGraphQLFilter(predicate, keyFields) as GraphQLCondition;\n}\n/**\n * @param predicatesGroup - Predicate Group\n\t@returns GQL Filter Expression from Predicate Group\n\t\n\t@remarks Flattens redundant list predicates\n\t@example\n\n\t```js\n\t{ and:[{ and:[{ username:  { eq: 'bob' }}] }] }\n\t```\n\tBecomes\n\t```js\n\t{ and:[{ username: { eq: 'bob' }}] }\n\t```\n\t*/\nexport function predicateToGraphQLFilter(\n\tpredicatesGroup: PredicatesGroup<any>,\n\tfieldsToOmit: string[] = [],\n\troot = true\n): GraphQLFilter {\n\tconst result: GraphQLFilter = {};\n\n\tif (!predicatesGroup || !Array.isArray(predicatesGroup.predicates)) {\n\t\treturn result;\n\t}\n\n\tconst { type, predicates } = predicatesGroup;\n\tconst isList = type === 'and' || type === 'or';\n\n\tresult[type] = isList ? [] : {};\n\n\tconst children: GraphQLFilter[] = [];\n\n\tpredicates.forEach(predicate => {\n\t\tif (isPredicateObj(predicate)) {\n\t\t\tconst { field, operator, operand } = predicate;\n\n\t\t\tif (fieldsToOmit.includes(field as string)) return;\n\n\t\t\tconst gqlField: GraphQLField = {\n\t\t\t\t[field]: { [operator]: operand },\n\t\t\t};\n\n\t\t\tchildren.push(gqlField);\n\t\t\treturn;\n\t\t}\n\n\t\tconst child = predicateToGraphQLFilter(predicate, fieldsToOmit, false);\n\t\tif (Object.keys(child).length > 0) {\n\t\t\tchildren.push(child);\n\t\t}\n\t});\n\n\t// flatten redundant list predicates\n\tif (children.length === 1) {\n\t\tconst [child] = children;\n\t\tif (\n\t\t\t// any nested list node\n\t\t\t(isList && !root) ||\n\t\t\t// root list node where the only child is also a list node\n\t\t\t(isList && root && ('and' in child || 'or' in child))\n\t\t) {\n\t\t\tdelete result[type];\n\t\t\tObject.assign(result, child);\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tchildren.forEach(child => {\n\t\tif (isList) {\n\t\t\tresult[type].push(child);\n\t\t} else {\n\t\t\tresult[type] = child;\n\t\t}\n\t});\n\n\tif (isList) {\n\t\tif (result[type].length === 0) return {};\n\t} else {\n\t\tif (Object.keys(result[type]).length === 0) return {};\n\t}\n\n\treturn result;\n}\n\n/**\n *\n * @param group - selective sync predicate group\n * @returns set of distinct field names in the filter group\n */\nexport function filterFields(group?: PredicatesGroup<any>): Set<string> {\n\tconst fields = new Set<string>();\n\n\tif (!group || !Array.isArray(group.predicates)) return fields;\n\n\tconst { predicates } = group;\n\tconst stack = [...predicates];\n\n\twhile (stack.length > 0) {\n\t\tconst current = stack.pop();\n\t\tif (isPredicateObj(current)) {\n\t\t\tfields.add(current.field as string);\n\t\t} else if (isPredicateGroup(current)) {\n\t\t\tstack.push(...current.predicates);\n\t\t}\n\t}\n\n\treturn fields;\n}\n\n/**\n *\n * @param modelDefinition\n * @returns set of field names used with dynamic auth modes configured for the provided model definition\n */\nexport function dynamicAuthFields(modelDefinition: SchemaModel): Set<string> {\n\tconst rules = getAuthorizationRules(modelDefinition);\n\tconst fields = new Set<string>();\n\n\tfor (const rule of rules) {\n\t\tif (rule.groupsField && !rule.groups.length) {\n\t\t\t// dynamic group rule will have no values in `rule.groups`\n\t\t\tfields.add((rule as AuthorizationRule).groupsField);\n\t\t} else if (rule.ownerField) {\n\t\t\tfields.add(rule.ownerField);\n\t\t}\n\t}\n\n\treturn fields;\n}\n\n/**\n *\n * @param group - selective sync predicate group\n * @returns the total number of OR'd predicates in the filter group\n *\n * @example returns 2\n * ```js\n * { type: \"or\", predicates: [\n * { field: \"username\", operator: \"beginsWith\", operand: \"a\" },\n * { field: \"title\", operator: \"contains\", operand: \"abc\" },\n * ]}\n * ```\n */\nexport function countFilterCombinations(group?: PredicatesGroup<any>): number {\n\tif (!group || !Array.isArray(group.predicates)) return 0;\n\n\tlet count = 0;\n\tconst stack: (PredicatesGroup<any> | PredicateObject<any>)[] = [group];\n\n\twhile (stack.length > 0) {\n\t\tconst current = stack.pop();\n\n\t\tif (isPredicateGroup(current)) {\n\t\t\tconst { predicates, type } = current;\n\t\t\t// ignore length = 1; groups with 1 predicate will get flattened when converted to gqlFilter\n\t\t\tif (type === 'or' && predicates.length > 1) {\n\t\t\t\tcount += predicates.length;\n\t\t\t}\n\t\t\tstack.push(...predicates);\n\t\t}\n\t}\n\n\t// if we didn't encounter any OR groups, default to 1\n\treturn count || 1;\n}\n\n/**\n *\n * @param group - selective sync predicate group\n * @returns name of repeated field | null\n *\n * @example returns \"username\"\n * ```js\n * { type: \"and\", predicates: [\n * \t\t{ field: \"username\", operator: \"beginsWith\", operand: \"a\" },\n * \t\t{ field: \"username\", operator: \"contains\", operand: \"abc\" },\n * ] }\n * ```\n */\nexport function repeatedFieldInGroup(\n\tgroup?: PredicatesGroup<any>\n): string | null {\n\tif (!group || !Array.isArray(group.predicates)) return null;\n\n\t// convert to filter in order to flatten redundant groups\n\tconst gqlFilter = predicateToGraphQLFilter(group);\n\n\tconst stack: GraphQLFilter[] = [gqlFilter];\n\n\tconst hasGroupRepeatedFields = (fields: GraphQLFilter[]): string | null => {\n\t\tconst seen = {};\n\n\t\tfor (const f of fields) {\n\t\t\tconst [fieldName] = Object.keys(f);\n\t\t\tif (seen[fieldName]) {\n\t\t\t\treturn fieldName;\n\t\t\t}\n\t\t\tseen[fieldName] = true;\n\t\t}\n\t\treturn null;\n\t};\n\n\twhile (stack.length > 0) {\n\t\tconst current = stack.pop();\n\n\t\tconst [key] = Object.keys(current!);\n\t\tconst values = current![key];\n\n\t\tif (!Array.isArray(values)) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// field value will be single object\n\t\tconst predicateObjects = values.filter(\n\t\t\tv => !Array.isArray(Object.values(v)[0])\n\t\t);\n\n\t\t// group value will be an array\n\t\tconst predicateGroups = values.filter(v =>\n\t\t\tArray.isArray(Object.values(v)[0])\n\t\t);\n\n\t\tif (key === 'and') {\n\t\t\tconst repeatedField = hasGroupRepeatedFields(predicateObjects);\n\t\t\tif (repeatedField) {\n\t\t\t\treturn repeatedField;\n\t\t\t}\n\t\t}\n\n\t\tstack.push(...predicateGroups);\n\t}\n\n\treturn null;\n}\n\nexport enum RTFError {\n\tUnknownField,\n\tMaxAttributes,\n\tMaxCombinations,\n\tRepeatedFieldname,\n\tNotGroup,\n\tFieldNotInType,\n}\n\nexport function generateRTFRemediation(\n\terrorType: RTFError,\n\tmodelDefinition: SchemaModel,\n\tpredicatesGroup: PredicatesGroup<any> | undefined\n): string {\n\tconst selSyncFields = filterFields(predicatesGroup);\n\tconst selSyncFieldStr = [...selSyncFields].join(', ');\n\tconst dynamicAuthModeFields = dynamicAuthFields(modelDefinition);\n\tconst dynamicAuthFieldsStr = [...dynamicAuthModeFields].join(', ');\n\tconst filterCombinations = countFilterCombinations(predicatesGroup);\n\tconst repeatedField = repeatedFieldInGroup(predicatesGroup);\n\n\tswitch (errorType) {\n\t\tcase RTFError.UnknownField:\n\t\t\treturn (\n\t\t\t\t`Your API was generated with an older version of the CLI that doesn't support backend subscription filtering.` +\n\t\t\t\t'To enable backend subscription filtering, upgrade your Amplify CLI to the latest version and push your app by running `amplify upgrade` followed by `amplify push`'\n\t\t\t);\n\n\t\tcase RTFError.MaxAttributes: {\n\t\t\tlet message = `Your selective sync expression for ${modelDefinition.name} contains ${selSyncFields.size} different model fields: ${selSyncFieldStr}.\\n\\n`;\n\n\t\t\tif (dynamicAuthModeFields.size > 0) {\n\t\t\t\tmessage +=\n\t\t\t\t\t`Note: the number of fields you can use with selective sync is affected by @auth rules configured on the model.\\n\\n` +\n\t\t\t\t\t`Dynamic auth modes, such as owner auth and dynamic group auth each utilize 1 field.\\n` +\n\t\t\t\t\t`You currently have ${dynamicAuthModeFields.size} dynamic auth mode(s) configured on this model: ${dynamicAuthFieldsStr}.`;\n\t\t\t}\n\n\t\t\treturn message;\n\t\t}\n\n\t\tcase RTFError.MaxCombinations: {\n\t\t\tlet message = `Your selective sync expression for ${modelDefinition.name} contains ${filterCombinations} field combinations (total number of predicates in an OR expression).\\n\\n`;\n\n\t\t\tif (dynamicAuthModeFields.size > 0) {\n\t\t\t\tmessage +=\n\t\t\t\t\t`Note: the number of fields you can use with selective sync is affected by @auth rules configured on the model.\\n\\n` +\n\t\t\t\t\t`Dynamic auth modes, such as owner auth and dynamic group auth factor in to the number of combinations you're using.\\n` +\n\t\t\t\t\t`You currently have ${dynamicAuthModeFields.size} dynamic auth mode(s) configured on this model: ${dynamicAuthFieldsStr}.`;\n\t\t\t}\n\t\t\treturn message;\n\t\t}\n\n\t\tcase RTFError.RepeatedFieldname:\n\t\t\treturn `Your selective sync expression for ${modelDefinition.name} contains multiple entries for ${repeatedField} in the same AND group.`;\n\t\tcase RTFError.NotGroup:\n\t\t\treturn (\n\t\t\t\t`Your selective sync expression for ${modelDefinition.name} uses a \\`not\\` group. If you'd like to filter subscriptions in the backend, ` +\n\t\t\t\t`rewrite your expression using \\`ne\\` or \\`notContains\\` operators.`\n\t\t\t);\n\t\tcase RTFError.FieldNotInType:\n\t\t\t// no remediation instructions. We'll surface the message directly\n\t\t\treturn '';\n\t}\n}\n\nexport function getUserGroupsFromToken(\n\ttoken: { [field: string]: any },\n\trule: AuthorizationRule\n): string[] {\n\t// validate token against groupClaim\n\tlet userGroups: string[] | string = token[rule.groupClaim] || [];\n\n\tif (typeof userGroups === 'string') {\n\t\tlet parsedGroups;\n\t\ttry {\n\t\t\tparsedGroups = JSON.parse(userGroups);\n\t\t} catch (e) {\n\t\t\tparsedGroups = userGroups;\n\t\t}\n\t\tuserGroups = [].concat(parsedGroups);\n\t}\n\n\treturn userGroups;\n}\n\nexport async function getModelAuthModes({\n\tauthModeStrategy,\n\tdefaultAuthMode,\n\tmodelName,\n\tschema,\n}: {\n\tauthModeStrategy: AuthModeStrategy;\n\tdefaultAuthMode: GRAPHQL_AUTH_MODE;\n\tmodelName: string;\n\tschema: InternalSchema;\n}): Promise<{\n\t[key in ModelOperation]: GRAPHQL_AUTH_MODE[];\n}> {\n\tconst operations = Object.values(ModelOperation);\n\n\tconst modelAuthModes: {\n\t\t[key in ModelOperation]: GRAPHQL_AUTH_MODE[];\n\t} = {\n\t\tCREATE: [],\n\t\tREAD: [],\n\t\tUPDATE: [],\n\t\tDELETE: [],\n\t};\n\n\ttry {\n\t\tawait Promise.all(\n\t\t\toperations.map(async operation => {\n\t\t\t\tconst authModes = await authModeStrategy({\n\t\t\t\t\tschema,\n\t\t\t\t\tmodelName,\n\t\t\t\t\toperation,\n\t\t\t\t});\n\n\t\t\t\tif (typeof authModes === 'string') {\n\t\t\t\t\tmodelAuthModes[operation] = [authModes];\n\t\t\t\t} else if (Array.isArray(authModes) && authModes.length) {\n\t\t\t\t\tmodelAuthModes[operation] = authModes;\n\t\t\t\t} else {\n\t\t\t\t\t// Use default auth mode if nothing is returned from authModeStrategy\n\t\t\t\t\tmodelAuthModes[operation] = [defaultAuthMode];\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t} catch (error) {\n\t\tlogger.debug(`Error getting auth modes for model: ${modelName}`, error);\n\t}\n\treturn modelAuthModes;\n}\n\nexport function getForbiddenError(error) {\n\tconst forbiddenErrorMessages = [\n\t\t'Request failed with status code 401',\n\t\t'Request failed with status code 403',\n\t];\n\tlet forbiddenError;\n\tif (error && error.errors) {\n\t\tforbiddenError = (error.errors as [any]).find(err =>\n\t\t\tforbiddenErrorMessages.includes(err.message)\n\t\t);\n\t} else if (error && error.message) {\n\t\tforbiddenError = error;\n\t}\n\n\tif (forbiddenError) {\n\t\treturn forbiddenError.message;\n\t}\n\treturn null;\n}\n\nexport function getClientSideAuthError(error) {\n\tconst clientSideAuthErrors = Object.values(GraphQLAuthError);\n\tconst clientSideError =\n\t\terror &&\n\t\terror.message &&\n\t\tclientSideAuthErrors.find(clientError =>\n\t\t\terror.message.includes(clientError)\n\t\t);\n\treturn clientSideError || null;\n}\n\nexport async function getTokenForCustomAuth(\n\tauthMode: GRAPHQL_AUTH_MODE,\n\tamplifyConfig: Record<string, any> = {}\n): Promise<string | undefined> {\n\tif (authMode === GRAPHQL_AUTH_MODE.AWS_LAMBDA) {\n\t\tconst {\n\t\t\tauthProviders: { functionAuthProvider } = { functionAuthProvider: null },\n\t\t} = amplifyConfig;\n\t\tif (functionAuthProvider && typeof functionAuthProvider === 'function') {\n\t\t\ttry {\n\t\t\t\tconst { token } = await functionAuthProvider();\n\t\t\t\treturn token;\n\t\t\t} catch (error) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Error retrieving token from \\`functionAuthProvider\\`: ${error}`\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t// TODO: add docs link once available\n\t\t\tthrow new Error(\n\t\t\t\t`You must provide a \\`functionAuthProvider\\` function to \\`DataStore.configure\\` when using ${GRAPHQL_AUTH_MODE.AWS_LAMBDA}`\n\t\t\t);\n\t\t}\n\t}\n}\n\n// Util that takes a modelDefinition and model and returns either the id value(s) or the custom primary key value(s)\nexport function getIdentifierValue(\n\tmodelDefinition: SchemaModel,\n\tmodel: ModelInstanceMetadata | PersistentModel\n): string {\n\tconst pkFieldNames = extractPrimaryKeyFieldNames(modelDefinition);\n\n\tconst idOrPk = pkFieldNames.map(f => model[f]).join(IDENTIFIER_KEY_SEPARATOR);\n\n\treturn idOrPk;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}