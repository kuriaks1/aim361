{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DeleteStreamInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1DeleteStreamCommand, serializeAws_json1_1DeleteStreamCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Deletes a Kinesis data stream and all its shards and data. You must shut down any\n *             applications that are operating on the stream before you delete the stream. If an\n *             application attempts to operate on a deleted stream, it receives the exception\n *                 <code>ResourceNotFoundException</code>.</p>\n *         <p>If the stream is in the <code>ACTIVE</code> state, you can delete it. After a\n *                 <code>DeleteStream</code> request, the specified stream is in the\n *                 <code>DELETING</code> state until Kinesis Data Streams completes the\n *             deletion.</p>\n *         <p>\n *             <b>Note:</b> Kinesis Data Streams might continue to accept\n *             data read and write operations, such as <a>PutRecord</a>, <a>PutRecords</a>, and <a>GetRecords</a>, on a stream in the\n *                 <code>DELETING</code> state until the stream deletion is complete.</p>\n *         <p>When you delete a stream, any shards in that stream are also deleted, and any tags\n *             are dissociated from the stream.</p>\n *         <p>You can use the <a>DescribeStream</a> operation to check the state of\n *             the stream, which is returned in <code>StreamStatus</code>.</p>\n *         <p>\n *             <a>DeleteStream</a> has a limit of five transactions per second per\n *             account.</p>\n */\nvar DeleteStreamCommand = /** @class */function (_super) {\n  __extends(DeleteStreamCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function DeleteStreamCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  DeleteStreamCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"DeleteStreamCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: DeleteStreamInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  DeleteStreamCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1DeleteStreamCommand(input, context);\n  };\n  DeleteStreamCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1DeleteStreamCommand(output, context);\n  };\n  return DeleteStreamCommand;\n}($Command);\nexport { DeleteStreamCommand };","map":{"version":3,"mappings":";AACA,SAASA,iBAAiB,QAAQ,oBAAoB;AACtD,SACEC,yCAAyC,EACzCC,uCAAuC,QAClC,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;AAqBA;EAAyCC;EAKvC;EACA;EAEA,6BAAqBC,KAA+B;IAApD;IACE;IACAC,iBAAO;IAFYC,WAAK,GAALF,KAAK;;IAGxB;EACF;EAEA;;;EAGAG,+CAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA0C,EAC1CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACZ,cAAc,CAACS,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,UAAM,GAAKF,aAAa,OAAlB;IACd,IAAMQ,UAAU,GAAG,eAAe;IAClC,IAAMC,WAAW,GAAG,qBAAqB;IACzC,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM;MACNH,UAAU;MACVC,WAAW;MACXG,uBAAuB,EAAExB,iBAAiB,CAACyB,kBAAkB;MAC7DC,wBAAwB,EAAE,UAACC,MAAW;QAAK,aAAM;MAAN;KAC5C;IACO,kBAAc,GAAKf,aAAa,eAAlB;IACtB,OAAOM,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,qBAAc,CAACC,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxES,uBAAuB,CACxB;EACH,CAAC;EAEOZ,uCAAS,GAAjB,UAAkBH,KAA+B,EAAEwB,OAAuB;IACxE,OAAO7B,uCAAuC,CAACK,KAAK,EAAEwB,OAAO,CAAC;EAChE,CAAC;EAEOrB,yCAAW,GAAnB,UAAoBiB,MAAsB,EAAEI,OAAuB;IACjE,OAAO9B,yCAAyC,CAAC0B,MAAM,EAAEI,OAAO,CAAC;EACnE,CAAC;EAIH,0BAAC;AAAD,CAAC,CAtDwC1B,QAAQ","names":["DeleteStreamInput","deserializeAws_json1_1DeleteStreamCommand","serializeAws_json1_1DeleteStreamCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","DeleteStreamCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","output","resolve","request","handle","context"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-sdk/client-kinesis/commands/DeleteStreamCommand.ts"],"sourcesContent":["import { KinesisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../KinesisClient\";\nimport { DeleteStreamInput } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1DeleteStreamCommand,\n  serializeAws_json1_1DeleteStreamCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type DeleteStreamCommandInput = DeleteStreamInput;\nexport type DeleteStreamCommandOutput = __MetadataBearer;\n\n/**\n * <p>Deletes a Kinesis data stream and all its shards and data. You must shut down any\n *             applications that are operating on the stream before you delete the stream. If an\n *             application attempts to operate on a deleted stream, it receives the exception\n *                 <code>ResourceNotFoundException</code>.</p>\n *         <p>If the stream is in the <code>ACTIVE</code> state, you can delete it. After a\n *                 <code>DeleteStream</code> request, the specified stream is in the\n *                 <code>DELETING</code> state until Kinesis Data Streams completes the\n *             deletion.</p>\n *         <p>\n *             <b>Note:</b> Kinesis Data Streams might continue to accept\n *             data read and write operations, such as <a>PutRecord</a>, <a>PutRecords</a>, and <a>GetRecords</a>, on a stream in the\n *                 <code>DELETING</code> state until the stream deletion is complete.</p>\n *         <p>When you delete a stream, any shards in that stream are also deleted, and any tags\n *             are dissociated from the stream.</p>\n *         <p>You can use the <a>DescribeStream</a> operation to check the state of\n *             the stream, which is returned in <code>StreamStatus</code>.</p>\n *         <p>\n *             <a>DeleteStream</a> has a limit of five transactions per second per\n *             account.</p>\n */\nexport class DeleteStreamCommand extends $Command<\n  DeleteStreamCommandInput,\n  DeleteStreamCommandOutput,\n  KinesisClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: DeleteStreamCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: KinesisClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<DeleteStreamCommandInput, DeleteStreamCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"KinesisClient\";\n    const commandName = \"DeleteStreamCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: DeleteStreamInput.filterSensitiveLog,\n      outputFilterSensitiveLog: (output: any) => output,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: DeleteStreamCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1DeleteStreamCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<DeleteStreamCommandOutput> {\n    return deserializeAws_json1_1DeleteStreamCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}