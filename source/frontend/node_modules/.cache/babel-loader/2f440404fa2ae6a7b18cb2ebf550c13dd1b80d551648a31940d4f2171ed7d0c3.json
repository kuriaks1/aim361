{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nvar isClockSkewed = function (newServerTime, systemClockOffset) {\n  return Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >= 300000;\n};\nvar getSkewCorrectedDate = function (systemClockOffset) {\n  return new Date(Date.now() + systemClockOffset);\n};\nexport function awsAuthMiddleware(options) {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(this, void 0, void 0, function () {\n        var signer, _a, output, _b, _c, headers, dateHeader, serverTime;\n        var _d;\n        return __generator(this, function (_e) {\n          switch (_e.label) {\n            case 0:\n              if (!HttpRequest.isInstance(args.request)) return [2 /*return*/, next(args)];\n              if (!(typeof options.signer === \"function\")) return [3 /*break*/, 2];\n              return [4 /*yield*/, options.signer()];\n            case 1:\n              _a = _e.sent();\n              return [3 /*break*/, 3];\n            case 2:\n              _a = options.signer;\n              _e.label = 3;\n            case 3:\n              signer = _a;\n              _b = next;\n              _c = [__assign({}, args)];\n              _d = {};\n              return [4 /*yield*/, signer.sign(args.request, {\n                signingDate: new Date(Date.now() + options.systemClockOffset),\n                signingRegion: context[\"signing_region\"],\n                signingService: context[\"signing_service\"]\n              })];\n            case 4:\n              return [4 /*yield*/, _b.apply(void 0, [__assign.apply(void 0, _c.concat([(_d.request = _e.sent(), _d)]))])];\n            case 5:\n              output = _e.sent();\n              headers = output.response.headers;\n              dateHeader = headers && (headers.date || headers.Date);\n              if (dateHeader) {\n                serverTime = Date.parse(dateHeader);\n                if (isClockSkewed(serverTime, options.systemClockOffset)) {\n                  options.systemClockOffset = serverTime - Date.now();\n                }\n              }\n              return [2 /*return*/, output];\n          }\n        });\n      });\n    };\n  };\n}\nexport var awsAuthMiddlewareOptions = {\n  name: \"awsAuthMiddleware\",\n  tags: [\"SIGNATURE\", \"AWSAUTH\"],\n  relation: \"after\",\n  toMiddleware: \"retryMiddleware\",\n  override: true\n};\nexport var getAwsAuthPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":";AAAA,SAASA,WAAW,QAAQ,wBAAwB;AAapD,IAAMC,aAAa,GAAG,UAACC,aAAqB,EAAEC,iBAAyB;EACrE,WAAI,CAACC,GAAG,CAACC,oBAAoB,CAACF,iBAAiB,CAAC,CAACG,OAAO,EAAE,GAAGJ,aAAa,CAAC,IAAI,MAAM;AAArF,CAAqF;AAEvF,IAAMG,oBAAoB,GAAG,UAACF,iBAAyB;EAAK,WAAII,IAAI,CAACA,IAAI,CAACC,GAAG,EAAE,GAAGL,iBAAiB,CAAC;AAAxC,CAAwC;AAEpG,OAAM,SAAUM,iBAAiBA,CAC/BC,OAA8B;EAE9B,OAAO,UAACC,IAAoC,EAAEC,OAAgC;IAC5E,iBAAgBC,IAAqC;;;;;;;cACnD,IAAI,CAACb,WAAW,CAACc,UAAU,CAACD,IAAI,CAACE,OAAO,CAAC,EAAE,sBAAOJ,IAAI,CAACE,IAAI,CAAC;oBAC7C,OAAOH,OAAO,CAACM,MAAM,KAAK,UAAU,GAApC;cAAuC,qBAAMN,OAAO,CAACM,MAAM,EAAE;;cAAtBC,cAAsB;;;cAAGA,YAAO,CAACD,MAAM;;;cAAvFA,MAAM,KAAiF;cACxEE,SAAI;iCACpBL,IAAI;;cACE,qBAAMG,MAAM,CAACG,IAAI,CAACN,IAAI,CAACE,OAAO,EAAE;gBACvCK,WAAW,EAAE,IAAIb,IAAI,CAACA,IAAI,CAACC,GAAG,EAAE,GAAGE,OAAO,CAACP,iBAAiB,CAAC;gBAC7DkB,aAAa,EAAET,OAAO,CAAC,gBAAgB,CAAC;gBACxCU,cAAc,EAAEV,OAAO,CAAC,iBAAiB;eAC1C,CAAC;;cANW,qBAAMM,qDAEnBK,UAAO,GAAEC,SAIP,UACF;;cAPIC,MAAM,GAAGD,SAOb;cAEME,OAAO,GAAKD,MAAM,CAACE,QAAe,QAA3B;cACTC,UAAU,GAAGF,OAAO,KAAKA,OAAO,CAACG,IAAI,IAAIH,OAAO,CAACnB,IAAI,CAAC;cAC5D,IAAIqB,UAAU,EAAE;gBACRE,UAAU,GAAGvB,IAAI,CAACwB,KAAK,CAACH,UAAU,CAAC;gBACzC,IAAI3B,aAAa,CAAC6B,UAAU,EAAEpB,OAAO,CAACP,iBAAiB,CAAC,EAAE;kBACxDO,OAAO,CAACP,iBAAiB,GAAG2B,UAAU,GAAGvB,IAAI,CAACC,GAAG,EAAE;;;cAIvD,sBAAOiB,MAAM;;;;KACd;EAtBD,CAsBC;AACL;AAEA,OAAO,IAAMO,wBAAwB,GAA8B;EACjEC,IAAI,EAAE,mBAAmB;EACzBC,IAAI,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC;EAC9BC,QAAQ,EAAE,OAAO;EACjBC,YAAY,EAAE,iBAAiB;EAC/BC,QAAQ,EAAE;CACX;AAED,OAAO,IAAMC,gBAAgB,GAAG,UAAC5B,OAA8B;EAA0B,OAAC;IACxF6B,YAAY,EAAE,UAACC,WAAW;MACxBA,WAAW,CAACC,aAAa,CAAChC,iBAAiB,CAACC,OAAO,CAAC,EAAEsB,wBAAwB,CAAC;IACjF;GACD;AAJwF,CAIvF","names":["HttpRequest","isClockSkewed","newServerTime","systemClockOffset","abs","getSkewCorrectedDate","getTime","Date","now","awsAuthMiddleware","options","next","context","args","isInstance","request","signer","_a","_b","sign","signingDate","signingRegion","signingService","_d","_e","output","headers","response","dateHeader","date","serverTime","parse","awsAuthMiddlewareOptions","name","tags","relation","toMiddleware","override","getAwsAuthPlugin","applyToStack","clientStack","addRelativeTo"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-sdk/middleware-signing/src/middleware.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  FinalizeHandler,\n  FinalizeHandlerArguments,\n  FinalizeHandlerOutput,\n  FinalizeRequestMiddleware,\n  HandlerExecutionContext,\n  Pluggable,\n  RelativeMiddlewareOptions,\n} from \"@aws-sdk/types\";\n\nimport { AwsAuthResolvedConfig } from \"./configurations\";\n\nconst isClockSkewed = (newServerTime: number, systemClockOffset: number) =>\n  Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >= 300000;\n\nconst getSkewCorrectedDate = (systemClockOffset: number) => new Date(Date.now() + systemClockOffset);\n\nexport function awsAuthMiddleware<Input extends object, Output extends object>(\n  options: AwsAuthResolvedConfig\n): FinalizeRequestMiddleware<Input, Output> {\n  return (next: FinalizeHandler<Input, Output>, context: HandlerExecutionContext): FinalizeHandler<Input, Output> =>\n    async function (args: FinalizeHandlerArguments<Input>): Promise<FinalizeHandlerOutput<Output>> {\n      if (!HttpRequest.isInstance(args.request)) return next(args);\n      const signer = typeof options.signer === \"function\" ? await options.signer() : options.signer;\n      const output = await next({\n        ...args,\n        request: await signer.sign(args.request, {\n          signingDate: new Date(Date.now() + options.systemClockOffset),\n          signingRegion: context[\"signing_region\"],\n          signingService: context[\"signing_service\"],\n        }),\n      });\n\n      const { headers } = output.response as any;\n      const dateHeader = headers && (headers.date || headers.Date);\n      if (dateHeader) {\n        const serverTime = Date.parse(dateHeader);\n        if (isClockSkewed(serverTime, options.systemClockOffset)) {\n          options.systemClockOffset = serverTime - Date.now();\n        }\n      }\n\n      return output;\n    };\n}\n\nexport const awsAuthMiddlewareOptions: RelativeMiddlewareOptions = {\n  name: \"awsAuthMiddleware\",\n  tags: [\"SIGNATURE\", \"AWSAUTH\"],\n  relation: \"after\",\n  toMiddleware: \"retryMiddleware\",\n  override: true,\n};\n\nexport const getAwsAuthPlugin = (options: AwsAuthResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}