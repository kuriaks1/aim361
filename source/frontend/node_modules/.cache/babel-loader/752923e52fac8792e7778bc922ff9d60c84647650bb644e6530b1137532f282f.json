{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, browserOrNode, Category, ConsoleLogger as Logger, INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER, PubSubAction } from '@aws-amplify/core';\nimport { AWSAppSyncRealTimeProvider } from '../Providers';\nimport Observable from 'zen-observable-ts';\nvar isNode = browserOrNode().isNode;\nvar logger = new Logger('PubSub');\nvar InternalPubSubClass = /** @class */function () {\n  /**\n   * Initialize PubSub with AWS configurations\n   *\n   * @param {PubSubOptions} options - Configuration object for PubSub\n   */\n  function InternalPubSubClass(options) {\n    this._options = options !== null && options !== void 0 ? options : {};\n    logger.debug('PubSub Options', this._options);\n    this._pluggables = [];\n    this.subscribe = this.subscribe.bind(this);\n  }\n  Object.defineProperty(InternalPubSubClass.prototype, \"awsAppSyncRealTimeProvider\", {\n    /**\n     * Lazy instantiate AWSAppSyncRealTimeProvider when it is required by the API category\n     */\n    get: function () {\n      if (!this._awsAppSyncRealTimeProvider) {\n        this._awsAppSyncRealTimeProvider = new AWSAppSyncRealTimeProvider(this._options);\n      }\n      return this._awsAppSyncRealTimeProvider;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  InternalPubSubClass.prototype.getModuleName = function () {\n    return 'InternalPubSub';\n  };\n  /**\n   * Configure PubSub part with configurations\n   *\n   * @param {PubSubOptions} config - Configuration for PubSub\n   * @return {Object} - The current configuration\n   */\n  InternalPubSubClass.prototype.configure = function (options) {\n    var _this = this;\n    var opt = options ? options.PubSub || options : {};\n    logger.debug('configure PubSub', {\n      opt: opt\n    });\n    this._options = Object.assign({}, this._options, opt);\n    this._pluggables.map(function (pluggable) {\n      return pluggable.configure(_this._options);\n    });\n    return this._options;\n  };\n  /**\n   * add plugin into Analytics category\n   * @param {Object} pluggable - an instance of the plugin\n   */\n  InternalPubSubClass.prototype.addPluggable = function (pluggable) {\n    return __awaiter(this, void 0, void 0, function () {\n      var config;\n      return __generator(this, function (_a) {\n        if (pluggable && pluggable.getCategory() === 'PubSub') {\n          this._pluggables.push(pluggable);\n          config = pluggable.configure(this._options);\n          return [2 /*return*/, config];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n  /**\n   * remove plugin from PubSub category\n   * @param providerName - the name of the plugin\n   */\n  InternalPubSubClass.prototype.removePluggable = function (providerName) {\n    this._pluggables = this._pluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n  };\n  InternalPubSubClass.prototype.getProviderByName = function (providerName) {\n    if (providerName === INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER) {\n      return this.awsAppSyncRealTimeProvider;\n    }\n    return this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === providerName;\n    });\n  };\n  InternalPubSubClass.prototype.getProviders = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var providerName = options.provider;\n    if (!providerName) {\n      return this._pluggables;\n    }\n    var provider = this.getProviderByName(providerName);\n    if (!provider) {\n      throw new Error(\"Could not find provider named \" + String(providerName));\n    }\n    return [provider];\n  };\n  InternalPubSubClass.prototype.publish = function (topics, msg, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, Promise.all(this.getProviders(options).map(function (provider) {\n          return provider.publish(topics, msg, options);\n        }))];\n      });\n    });\n  };\n  InternalPubSubClass.prototype.subscribe = function (topics, options, customUserAgentDetails) {\n    if (isNode && this._options && this._options.ssr) {\n      throw new Error('Subscriptions are not supported for Server-Side Rendering (SSR)');\n    }\n    logger.debug('subscribe options', options);\n    var providers = this.getProviders(options);\n    var pubSubUserAgentDetails = __assign({\n      category: Category.PubSub,\n      action: PubSubAction.Subscribe\n    }, customUserAgentDetails);\n    return new Observable(function (observer) {\n      var observables = providers.map(function (provider) {\n        return {\n          provider: provider,\n          observable: provider.subscribe(topics, options, pubSubUserAgentDetails)\n        };\n      });\n      var subscriptions = observables.map(function (_a) {\n        var provider = _a.provider,\n          observable = _a.observable;\n        return observable.subscribe({\n          start: console.error,\n          next: function (value) {\n            return observer.next({\n              provider: provider,\n              value: value\n            });\n          },\n          error: function (error) {\n            return observer.error({\n              provider: provider,\n              error: error\n            });\n          }\n        });\n      });\n      return function () {\n        return subscriptions.forEach(function (subscription) {\n          return subscription.unsubscribe();\n        });\n      };\n    });\n  };\n  return InternalPubSubClass;\n}();\nexport { InternalPubSubClass };\nexport var InternalPubSub = new InternalPubSubClass();\nAmplify.register(InternalPubSub);","map":{"version":3,"mappings":"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","names":["Amplify","browserOrNode","Category","ConsoleLogger","Logger","INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER","PubSubAction","AWSAppSyncRealTimeProvider","Observable","logger","options","_options","debug","_pluggables","subscribe","bind","Object","InternalPubSubClass","_awsAppSyncRealTimeProvider","opt","PubSub","assign","map","configure","_this","pluggable","getCategory","push","config","providerName","filter","getProviderName","awsAppSyncRealTimeProvider","find","provider","getProviderByName","Error","String","topics","msg","Promise","all","getProviders","publish","customUserAgentDetails","isNode","ssr","providers","pubSubUserAgentDetails","category","action","Subscribe","observables","observable","subscriptions","_a","start","console","error","next","value","forEach","unsubscribe","InternalPubSub","register"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-amplify/pubsub/src/internals/InternalPubSub.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport {\n\tAmplify,\n\tbrowserOrNode,\n\tCategory,\n\tConsoleLogger as Logger,\n\tCustomUserAgentDetails,\n\tINTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER,\n\tPubSubAction,\n} from '@aws-amplify/core';\nimport { PubSubProvider, PubSubOptions, ProviderOptions } from '../types';\nimport { AWSAppSyncRealTimeProvider } from '../Providers';\nimport { PubSubContent } from '../types/PubSub';\nimport Observable from 'zen-observable-ts';\n\nconst { isNode } = browserOrNode();\nconst logger = new Logger('PubSub');\n\ntype PubSubObservable = {\n\tprovider: PubSubProvider;\n\tvalue: string | Record<string, unknown>;\n};\n\nexport class InternalPubSubClass {\n\tprivate _options: PubSubOptions;\n\n\tprivate _pluggables: PubSubProvider[];\n\n\t/**\n\t * Internal instance of AWSAppSyncRealTimeProvider used by the API category to subscribe to AppSync\n\t */\n\tprivate _awsAppSyncRealTimeProvider?: AWSAppSyncRealTimeProvider;\n\n\t/**\n\t * Lazy instantiate AWSAppSyncRealTimeProvider when it is required by the API category\n\t */\n\tprivate get awsAppSyncRealTimeProvider() {\n\t\tif (!this._awsAppSyncRealTimeProvider) {\n\t\t\tthis._awsAppSyncRealTimeProvider = new AWSAppSyncRealTimeProvider(\n\t\t\t\tthis._options\n\t\t\t);\n\t\t}\n\t\treturn this._awsAppSyncRealTimeProvider;\n\t}\n\n\t/**\n\t * Initialize PubSub with AWS configurations\n\t *\n\t * @param {PubSubOptions} options - Configuration object for PubSub\n\t */\n\tconstructor(options?: PubSubOptions) {\n\t\tthis._options = options ?? {};\n\t\tlogger.debug('PubSub Options', this._options);\n\t\tthis._pluggables = [];\n\t\tthis.subscribe = this.subscribe.bind(this);\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'InternalPubSub';\n\t}\n\n\t/**\n\t * Configure PubSub part with configurations\n\t *\n\t * @param {PubSubOptions} config - Configuration for PubSub\n\t * @return {Object} - The current configuration\n\t */\n\tconfigure(options: PubSubOptions) {\n\t\tconst opt: Record<string, unknown> = options\n\t\t\t? options.PubSub || options\n\t\t\t: {};\n\t\tlogger.debug('configure PubSub', { opt });\n\n\t\tthis._options = Object.assign({}, this._options, opt);\n\n\t\tthis._pluggables.map(pluggable => pluggable.configure(this._options));\n\n\t\treturn this._options;\n\t}\n\n\t/**\n\t * add plugin into Analytics category\n\t * @param {Object} pluggable - an instance of the plugin\n\t */\n\tpublic async addPluggable(pluggable: PubSubProvider) {\n\t\tif (pluggable && pluggable.getCategory() === 'PubSub') {\n\t\t\tthis._pluggables.push(pluggable);\n\n\t\t\tconst config = pluggable.configure(this._options);\n\n\t\t\treturn config;\n\t\t}\n\t}\n\n\t/**\n\t * remove plugin from PubSub category\n\t * @param providerName - the name of the plugin\n\t */\n\tremovePluggable(providerName: string): void {\n\t\tthis._pluggables = this._pluggables.filter(\n\t\t\tpluggable => pluggable.getProviderName() !== providerName\n\t\t);\n\t}\n\n\tprivate getProviderByName(providerName: string | symbol) {\n\t\tif (providerName === INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER) {\n\t\t\treturn this.awsAppSyncRealTimeProvider;\n\t\t}\n\n\t\treturn this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === providerName\n\t\t);\n\t}\n\n\tprivate getProviders(options: ProviderOptions = {}) {\n\t\tconst providerName = options.provider;\n\t\tif (!providerName) {\n\t\t\treturn this._pluggables;\n\t\t}\n\n\t\tconst provider = this.getProviderByName(providerName);\n\t\tif (!provider) {\n\t\t\tthrow new Error(`Could not find provider named ${String(providerName)}`);\n\t\t}\n\n\t\treturn [provider];\n\t}\n\n\tasync publish(\n\t\ttopics: string[] | string,\n\t\tmsg: PubSubContent,\n\t\toptions?: ProviderOptions\n\t) {\n\t\treturn Promise.all(\n\t\t\tthis.getProviders(options).map(provider =>\n\t\t\t\tprovider.publish(topics, msg, options)\n\t\t\t)\n\t\t);\n\t}\n\n\tsubscribe(\n\t\ttopics: string[] | string,\n\t\toptions?: ProviderOptions,\n\t\tcustomUserAgentDetails?: CustomUserAgentDetails\n\t): Observable<PubSubObservable> {\n\t\tif (isNode && this._options && this._options.ssr) {\n\t\t\tthrow new Error(\n\t\t\t\t'Subscriptions are not supported for Server-Side Rendering (SSR)'\n\t\t\t);\n\t\t}\n\n\t\tlogger.debug('subscribe options', options);\n\n\t\tconst providers = this.getProviders(options);\n\n\t\tconst pubSubUserAgentDetails: CustomUserAgentDetails = {\n\t\t\tcategory: Category.PubSub,\n\t\t\taction: PubSubAction.Subscribe,\n\t\t\t...customUserAgentDetails,\n\t\t};\n\n\t\treturn new Observable<PubSubObservable>(observer => {\n\t\t\tconst observables = providers.map(provider => ({\n\t\t\t\tprovider,\n\t\t\t\tobservable: provider.subscribe(topics, options, pubSubUserAgentDetails),\n\t\t\t}));\n\n\t\t\tconst subscriptions = observables.map(({ provider, observable }) =>\n\t\t\t\tobservable.subscribe({\n\t\t\t\t\tstart: console.error,\n\t\t\t\t\tnext: (value: PubSubContent) => observer.next({ provider, value }),\n\t\t\t\t\terror: (error: unknown) => observer.error({ provider, error }),\n\t\t\t\t\t// complete: observer.complete, // TODO: when all completed, complete the outer one\n\t\t\t\t})\n\t\t\t);\n\n\t\t\treturn () =>\n\t\t\t\tsubscriptions.forEach(subscription => subscription.unsubscribe());\n\t\t});\n\t}\n}\n\nexport const InternalPubSub = new InternalPubSubClass();\nAmplify.register(InternalPubSub);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}