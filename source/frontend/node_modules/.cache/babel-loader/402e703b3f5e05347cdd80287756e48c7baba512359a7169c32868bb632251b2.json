{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetContentModerationRequest, GetContentModerationResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetContentModerationCommand, serializeAws_json1_1GetContentModerationCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the unsafe content analysis results for a Amazon Rekognition Video analysis started by\n *        <a>StartContentModeration</a>.</p>\n *\n *          <p>Unsafe content analysis of a video is an asynchronous operation. You start analysis by calling\n *        <a>StartContentModeration</a> which returns a job identifier (<code>JobId</code>).\n *        When analysis finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n *        topic registered in the initial call to <code>StartContentModeration</code>.\n *        To get the results of the unsafe content analysis, first check that the status value published to the Amazon SNS\n *        topic is <code>SUCCEEDED</code>. If so, call  <code>GetContentModeration</code> and pass the job identifier\n *        (<code>JobId</code>) from the initial call to <code>StartContentModeration</code>. </p>\n *\n *          <p>For more information, see Working with Stored Videos in the\n *      Amazon Rekognition Devlopers Guide.</p>\n *          <p>\n *             <code>GetContentModeration</code> returns detected unsafe content labels,\n *       and the time they are detected, in an array, <code>ModerationLabels</code>, of\n *       <a>ContentModerationDetection</a> objects.\n *      </p>\n *          <p>By default, the moderated labels are returned sorted by time, in milliseconds from the start of the\n *        video. You can also sort them by moderated label by specifying <code>NAME</code> for the <code>SortBy</code>\n *        input parameter. </p>\n *          <p>Since video analysis can return a large number of results, use the <code>MaxResults</code> parameter to limit\n *       the number of labels returned in a single call to <code>GetContentModeration</code>. If there are more results than\n *        specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a\n *        pagination token for getting the next set of results. To get the next page of results, call <code>GetContentModeration</code>\n *        and populate the <code>NextToken</code> request parameter with the value of <code>NextToken</code>\n *        returned from the previous call to <code>GetContentModeration</code>.</p>\n *\n *          <p>For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>\n */\nvar GetContentModerationCommand = /** @class */function (_super) {\n  __extends(GetContentModerationCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function GetContentModerationCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  GetContentModerationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"GetContentModerationCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetContentModerationRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetContentModerationResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  GetContentModerationCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetContentModerationCommand(input, context);\n  };\n  GetContentModerationCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetContentModerationCommand(output, context);\n  };\n  return GetContentModerationCommand;\n}($Command);\nexport { GetContentModerationCommand };","map":{"version":3,"mappings":";AACA,SAASA,2BAA2B,EAAEC,4BAA4B,QAAQ,oBAAoB;AAC9F,SACEC,iDAAiD,EACjDC,+CAA+C,QAC1C,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;EAAiDC;EAK/C;EACA;EAEA,qCAAqBC,KAAuC;IAA5D;IACE;IACAC,iBAAO;IAFYC,WAAK,GAALF,KAAK;;IAGxB;EACF;EAEA;;;EAGAG,uDAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA8C,EAC9CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACZ,cAAc,CAACS,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,UAAM,GAAKF,aAAa,OAAlB;IACd,IAAMQ,UAAU,GAAG,mBAAmB;IACtC,IAAMC,WAAW,GAAG,6BAA6B;IACjD,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM;MACNH,UAAU;MACVC,WAAW;MACXG,uBAAuB,EAAEzB,2BAA2B,CAAC0B,kBAAkB;MACvEC,wBAAwB,EAAE1B,4BAA4B,CAACyB;KACxD;IACO,kBAAc,GAAKb,aAAa,eAAlB;IACtB,OAAOM,KAAK,CAACS,OAAO,CAClB,UAACC,OAAsC;MACrC,qBAAc,CAACC,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEf,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxES,uBAAuB,CACxB;EACH,CAAC;EAEOZ,+CAAS,GAAjB,UAAkBH,KAAuC,EAAEuB,OAAuB;IAChF,OAAO5B,+CAA+C,CAACK,KAAK,EAAEuB,OAAO,CAAC;EACxE,CAAC;EAEOpB,iDAAW,GAAnB,UAAoBqB,MAAsB,EAAED,OAAuB;IACjE,OAAO7B,iDAAiD,CAAC8B,MAAM,EAAED,OAAO,CAAC;EAC3E,CAAC;EAIH,kCAAC;AAAD,CAAC,CAtDgDzB,QAAQ","names":["GetContentModerationRequest","GetContentModerationResponse","deserializeAws_json1_1GetContentModerationCommand","serializeAws_json1_1GetContentModerationCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","GetContentModerationCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-sdk/client-rekognition/commands/GetContentModerationCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { GetContentModerationRequest, GetContentModerationResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1GetContentModerationCommand,\n  serializeAws_json1_1GetContentModerationCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type GetContentModerationCommandInput = GetContentModerationRequest;\nexport type GetContentModerationCommandOutput = GetContentModerationResponse & __MetadataBearer;\n\n/**\n * <p>Gets the unsafe content analysis results for a Amazon Rekognition Video analysis started by\n *        <a>StartContentModeration</a>.</p>\n *\n *          <p>Unsafe content analysis of a video is an asynchronous operation. You start analysis by calling\n *        <a>StartContentModeration</a> which returns a job identifier (<code>JobId</code>).\n *        When analysis finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n *        topic registered in the initial call to <code>StartContentModeration</code>.\n *        To get the results of the unsafe content analysis, first check that the status value published to the Amazon SNS\n *        topic is <code>SUCCEEDED</code>. If so, call  <code>GetContentModeration</code> and pass the job identifier\n *        (<code>JobId</code>) from the initial call to <code>StartContentModeration</code>. </p>\n *\n *          <p>For more information, see Working with Stored Videos in the\n *      Amazon Rekognition Devlopers Guide.</p>\n *          <p>\n *             <code>GetContentModeration</code> returns detected unsafe content labels,\n *       and the time they are detected, in an array, <code>ModerationLabels</code>, of\n *       <a>ContentModerationDetection</a> objects.\n *      </p>\n *          <p>By default, the moderated labels are returned sorted by time, in milliseconds from the start of the\n *        video. You can also sort them by moderated label by specifying <code>NAME</code> for the <code>SortBy</code>\n *        input parameter. </p>\n *          <p>Since video analysis can return a large number of results, use the <code>MaxResults</code> parameter to limit\n *       the number of labels returned in a single call to <code>GetContentModeration</code>. If there are more results than\n *        specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a\n *        pagination token for getting the next set of results. To get the next page of results, call <code>GetContentModeration</code>\n *        and populate the <code>NextToken</code> request parameter with the value of <code>NextToken</code>\n *        returned from the previous call to <code>GetContentModeration</code>.</p>\n *\n *          <p>For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>\n */\nexport class GetContentModerationCommand extends $Command<\n  GetContentModerationCommandInput,\n  GetContentModerationCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: GetContentModerationCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<GetContentModerationCommandInput, GetContentModerationCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"GetContentModerationCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: GetContentModerationRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetContentModerationResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: GetContentModerationCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1GetContentModerationCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<GetContentModerationCommandOutput> {\n    return deserializeAws_json1_1GetContentModerationCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}