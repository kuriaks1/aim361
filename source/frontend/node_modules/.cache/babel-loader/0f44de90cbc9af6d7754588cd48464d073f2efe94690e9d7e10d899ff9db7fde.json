{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SplitShardInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1SplitShardCommand, serializeAws_json1_1SplitShardCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Splits a shard into two new shards in the Kinesis data stream, to increase the\n *             stream's capacity to ingest and transport data. <code>SplitShard</code> is called when\n *             there is a need to increase the overall capacity of a stream because of an expected\n *             increase in the volume of data records being ingested. </p>\n *         <p>You can also use <code>SplitShard</code> when a shard appears to be approaching its\n *             maximum utilization; for example, the producers sending data into the specific shard are\n *             suddenly sending more than previously anticipated. You can also call\n *                 <code>SplitShard</code> to increase stream capacity, so that more Kinesis Data\n *             Streams applications can simultaneously read data from the stream for real-time\n *             processing. </p>\n *         <p>You must specify the shard to be split and the new hash key, which is the position\n *             in the shard where the shard gets split in two. In many cases, the new hash key might be\n *             the average of the beginning and ending hash key, but it can be any hash key value in\n *             the range being mapped into the shard. For more information, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-resharding-split.html\">Split a\n *                 Shard</a> in the <i>Amazon Kinesis Data Streams Developer\n *                 Guide</i>.</p>\n *         <p>You can use <a>DescribeStream</a> to determine the shard ID and hash key\n *             values for the <code>ShardToSplit</code> and <code>NewStartingHashKey</code> parameters\n *             that are specified in the <code>SplitShard</code> request.</p>\n *         <p>\n *             <code>SplitShard</code> is an asynchronous operation. Upon receiving a\n *                 <code>SplitShard</code> request, Kinesis Data Streams immediately returns a response\n *             and sets the stream status to <code>UPDATING</code>. After the operation is completed,\n *             Kinesis Data Streams sets the stream status to <code>ACTIVE</code>. Read and write\n *             operations continue to work while the stream is in the <code>UPDATING</code> state. </p>\n *         <p>You can use <code>DescribeStream</code> to check the status of the stream, which is\n *             returned in <code>StreamStatus</code>. If the stream is in the <code>ACTIVE</code>\n *             state, you can call <code>SplitShard</code>. If a stream is in <code>CREATING</code> or\n *                 <code>UPDATING</code> or <code>DELETING</code> states, <code>DescribeStream</code>\n *             returns a <code>ResourceInUseException</code>.</p>\n *         <p>If the specified stream does not exist, <code>DescribeStream</code> returns a\n *                 <code>ResourceNotFoundException</code>. If you try to create more shards than are\n *             authorized for your account, you receive a <code>LimitExceededException</code>. </p>\n *         <p>For the default shard limit for an AWS account, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html\">Kinesis Data Streams\n *                 Limits</a> in the <i>Amazon Kinesis Data Streams Developer\n *                 Guide</i>. To increase this limit, <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\">contact AWS\n *             Support</a>.</p>\n *         <p>If you try to operate on too many streams simultaneously using <a>CreateStream</a>, <a>DeleteStream</a>, <a>MergeShards</a>, and/or <a>SplitShard</a>, you receive a\n *                 <code>LimitExceededException</code>. </p>\n *         <p>\n *             <code>SplitShard</code> has a limit of five transactions per second per\n *             account.</p>\n */\nvar SplitShardCommand = /** @class */function (_super) {\n  __extends(SplitShardCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function SplitShardCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  SplitShardCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"SplitShardCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: SplitShardInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  SplitShardCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1SplitShardCommand(input, context);\n  };\n  SplitShardCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1SplitShardCommand(output, context);\n  };\n  return SplitShardCommand;\n}($Command);\nexport { SplitShardCommand };","map":{"version":3,"mappings":";AACA,SAASA,eAAe,QAAQ,oBAAoB;AACpD,SACEC,uCAAuC,EACvCC,qCAAqC,QAChC,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;EAAuCC;EAKrC;EACA;EAEA,2BAAqBC,KAA6B;IAAlD;IACE;IACAC,iBAAO;IAFYC,WAAK,GAALF,KAAK;;IAGxB;EACF;EAEA;;;EAGAG,6CAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA0C,EAC1CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACZ,cAAc,CAACS,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,UAAM,GAAKF,aAAa,OAAlB;IACd,IAAMQ,UAAU,GAAG,eAAe;IAClC,IAAMC,WAAW,GAAG,mBAAmB;IACvC,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM;MACNH,UAAU;MACVC,WAAW;MACXG,uBAAuB,EAAExB,eAAe,CAACyB,kBAAkB;MAC3DC,wBAAwB,EAAE,UAACC,MAAW;QAAK,aAAM;MAAN;KAC5C;IACO,kBAAc,GAAKf,aAAa,eAAlB;IACtB,OAAOM,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,qBAAc,CAACC,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxES,uBAAuB,CACxB;EACH,CAAC;EAEOZ,qCAAS,GAAjB,UAAkBH,KAA6B,EAAEwB,OAAuB;IACtE,OAAO7B,qCAAqC,CAACK,KAAK,EAAEwB,OAAO,CAAC;EAC9D,CAAC;EAEOrB,uCAAW,GAAnB,UAAoBiB,MAAsB,EAAEI,OAAuB;IACjE,OAAO9B,uCAAuC,CAAC0B,MAAM,EAAEI,OAAO,CAAC;EACjE,CAAC;EAIH,wBAAC;AAAD,CAAC,CAtDsC1B,QAAQ","names":["SplitShardInput","deserializeAws_json1_1SplitShardCommand","serializeAws_json1_1SplitShardCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","SplitShardCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","output","resolve","request","handle","context"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-sdk/client-kinesis/commands/SplitShardCommand.ts"],"sourcesContent":["import { KinesisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../KinesisClient\";\nimport { SplitShardInput } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1SplitShardCommand,\n  serializeAws_json1_1SplitShardCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type SplitShardCommandInput = SplitShardInput;\nexport type SplitShardCommandOutput = __MetadataBearer;\n\n/**\n * <p>Splits a shard into two new shards in the Kinesis data stream, to increase the\n *             stream's capacity to ingest and transport data. <code>SplitShard</code> is called when\n *             there is a need to increase the overall capacity of a stream because of an expected\n *             increase in the volume of data records being ingested. </p>\n *         <p>You can also use <code>SplitShard</code> when a shard appears to be approaching its\n *             maximum utilization; for example, the producers sending data into the specific shard are\n *             suddenly sending more than previously anticipated. You can also call\n *                 <code>SplitShard</code> to increase stream capacity, so that more Kinesis Data\n *             Streams applications can simultaneously read data from the stream for real-time\n *             processing. </p>\n *         <p>You must specify the shard to be split and the new hash key, which is the position\n *             in the shard where the shard gets split in two. In many cases, the new hash key might be\n *             the average of the beginning and ending hash key, but it can be any hash key value in\n *             the range being mapped into the shard. For more information, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-resharding-split.html\">Split a\n *                 Shard</a> in the <i>Amazon Kinesis Data Streams Developer\n *                 Guide</i>.</p>\n *         <p>You can use <a>DescribeStream</a> to determine the shard ID and hash key\n *             values for the <code>ShardToSplit</code> and <code>NewStartingHashKey</code> parameters\n *             that are specified in the <code>SplitShard</code> request.</p>\n *         <p>\n *             <code>SplitShard</code> is an asynchronous operation. Upon receiving a\n *                 <code>SplitShard</code> request, Kinesis Data Streams immediately returns a response\n *             and sets the stream status to <code>UPDATING</code>. After the operation is completed,\n *             Kinesis Data Streams sets the stream status to <code>ACTIVE</code>. Read and write\n *             operations continue to work while the stream is in the <code>UPDATING</code> state. </p>\n *         <p>You can use <code>DescribeStream</code> to check the status of the stream, which is\n *             returned in <code>StreamStatus</code>. If the stream is in the <code>ACTIVE</code>\n *             state, you can call <code>SplitShard</code>. If a stream is in <code>CREATING</code> or\n *                 <code>UPDATING</code> or <code>DELETING</code> states, <code>DescribeStream</code>\n *             returns a <code>ResourceInUseException</code>.</p>\n *         <p>If the specified stream does not exist, <code>DescribeStream</code> returns a\n *                 <code>ResourceNotFoundException</code>. If you try to create more shards than are\n *             authorized for your account, you receive a <code>LimitExceededException</code>. </p>\n *         <p>For the default shard limit for an AWS account, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html\">Kinesis Data Streams\n *                 Limits</a> in the <i>Amazon Kinesis Data Streams Developer\n *                 Guide</i>. To increase this limit, <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\">contact AWS\n *             Support</a>.</p>\n *         <p>If you try to operate on too many streams simultaneously using <a>CreateStream</a>, <a>DeleteStream</a>, <a>MergeShards</a>, and/or <a>SplitShard</a>, you receive a\n *                 <code>LimitExceededException</code>. </p>\n *         <p>\n *             <code>SplitShard</code> has a limit of five transactions per second per\n *             account.</p>\n */\nexport class SplitShardCommand extends $Command<\n  SplitShardCommandInput,\n  SplitShardCommandOutput,\n  KinesisClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: SplitShardCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: KinesisClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<SplitShardCommandInput, SplitShardCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"KinesisClient\";\n    const commandName = \"SplitShardCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: SplitShardInput.filterSensitiveLog,\n      outputFilterSensitiveLog: (output: any) => output,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: SplitShardCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1SplitShardCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<SplitShardCommandOutput> {\n    return deserializeAws_json1_1SplitShardCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}