{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DescribeDeliveryStreamInput, DescribeDeliveryStreamOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1DescribeDeliveryStreamCommand, serializeAws_json1_1DescribeDeliveryStreamCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Describes the specified delivery stream and its status. For example, after your\n *          delivery stream is created, call <code>DescribeDeliveryStream</code> to see whether the\n *          delivery stream is <code>ACTIVE</code> and therefore ready for data to be sent to it. </p>\n *          <p>If the status of a delivery stream is <code>CREATING_FAILED</code>, this status\n *          doesn't change, and you can't invoke <a>CreateDeliveryStream</a> again on it.\n *          However, you can invoke the <a>DeleteDeliveryStream</a> operation to delete it.\n *          If the status is <code>DELETING_FAILED</code>, you can force deletion by invoking <a>DeleteDeliveryStream</a> again but with <a>DeleteDeliveryStreamInput$AllowForceDelete</a> set to true.</p>\n */\nvar DescribeDeliveryStreamCommand = /** @class */function (_super) {\n  __extends(DescribeDeliveryStreamCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function DescribeDeliveryStreamCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  DescribeDeliveryStreamCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"FirehoseClient\";\n    var commandName = \"DescribeDeliveryStreamCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: DescribeDeliveryStreamInput.filterSensitiveLog,\n      outputFilterSensitiveLog: DescribeDeliveryStreamOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  DescribeDeliveryStreamCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1DescribeDeliveryStreamCommand(input, context);\n  };\n  DescribeDeliveryStreamCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1DescribeDeliveryStreamCommand(output, context);\n  };\n  return DescribeDeliveryStreamCommand;\n}($Command);\nexport { DescribeDeliveryStreamCommand };","map":{"version":3,"mappings":";AACA,SAASA,2BAA2B,EAAEC,4BAA4B,QAAQ,oBAAoB;AAC9F,SACEC,mDAAmD,EACnDC,iDAAiD,QAC5C,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;AASA;EAAmDC;EAKjD;EACA;EAEA,uCAAqBC,KAAyC;IAA9D;IACE;IACAC,iBAAO;IAFYC,WAAK,GAALF,KAAK;;IAGxB;EACF;EAEA;;;EAGAG,yDAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA2C,EAC3CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACZ,cAAc,CAACS,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,UAAM,GAAKF,aAAa,OAAlB;IACd,IAAMQ,UAAU,GAAG,gBAAgB;IACnC,IAAMC,WAAW,GAAG,+BAA+B;IACnD,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM;MACNH,UAAU;MACVC,WAAW;MACXG,uBAAuB,EAAEzB,2BAA2B,CAAC0B,kBAAkB;MACvEC,wBAAwB,EAAE1B,4BAA4B,CAACyB;KACxD;IACO,kBAAc,GAAKb,aAAa,eAAlB;IACtB,OAAOM,KAAK,CAACS,OAAO,CAClB,UAACC,OAAsC;MACrC,qBAAc,CAACC,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEf,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxES,uBAAuB,CACxB;EACH,CAAC;EAEOZ,iDAAS,GAAjB,UAAkBH,KAAyC,EAAEuB,OAAuB;IAClF,OAAO5B,iDAAiD,CAACK,KAAK,EAAEuB,OAAO,CAAC;EAC1E,CAAC;EAEOpB,mDAAW,GAAnB,UAAoBqB,MAAsB,EAAED,OAAuB;IACjE,OAAO7B,mDAAmD,CAAC8B,MAAM,EAAED,OAAO,CAAC;EAC7E,CAAC;EAIH,oCAAC;AAAD,CAAC,CAtDkDzB,QAAQ","names":["DescribeDeliveryStreamInput","DescribeDeliveryStreamOutput","deserializeAws_json1_1DescribeDeliveryStreamCommand","serializeAws_json1_1DescribeDeliveryStreamCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","DescribeDeliveryStreamCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-sdk/client-firehose/commands/DescribeDeliveryStreamCommand.ts"],"sourcesContent":["import { FirehoseClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../FirehoseClient\";\nimport { DescribeDeliveryStreamInput, DescribeDeliveryStreamOutput } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1DescribeDeliveryStreamCommand,\n  serializeAws_json1_1DescribeDeliveryStreamCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type DescribeDeliveryStreamCommandInput = DescribeDeliveryStreamInput;\nexport type DescribeDeliveryStreamCommandOutput = DescribeDeliveryStreamOutput & __MetadataBearer;\n\n/**\n * <p>Describes the specified delivery stream and its status. For example, after your\n *          delivery stream is created, call <code>DescribeDeliveryStream</code> to see whether the\n *          delivery stream is <code>ACTIVE</code> and therefore ready for data to be sent to it. </p>\n *          <p>If the status of a delivery stream is <code>CREATING_FAILED</code>, this status\n *          doesn't change, and you can't invoke <a>CreateDeliveryStream</a> again on it.\n *          However, you can invoke the <a>DeleteDeliveryStream</a> operation to delete it.\n *          If the status is <code>DELETING_FAILED</code>, you can force deletion by invoking <a>DeleteDeliveryStream</a> again but with <a>DeleteDeliveryStreamInput$AllowForceDelete</a> set to true.</p>\n */\nexport class DescribeDeliveryStreamCommand extends $Command<\n  DescribeDeliveryStreamCommandInput,\n  DescribeDeliveryStreamCommandOutput,\n  FirehoseClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: DescribeDeliveryStreamCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: FirehoseClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<DescribeDeliveryStreamCommandInput, DescribeDeliveryStreamCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"FirehoseClient\";\n    const commandName = \"DescribeDeliveryStreamCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: DescribeDeliveryStreamInput.filterSensitiveLog,\n      outputFilterSensitiveLog: DescribeDeliveryStreamOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: DescribeDeliveryStreamCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1DescribeDeliveryStreamCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<DescribeDeliveryStreamCommandOutput> {\n    return deserializeAws_json1_1DescribeDeliveryStreamCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}