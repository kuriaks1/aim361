{"ast":null,"code":"import { __awaiter, __generator, __read, __values } from \"tslib\";\nimport { InternalAPI } from '@aws-amplify/api/internals';\nimport Observable from 'zen-observable-ts';\nimport { ProcessName } from '../../types';\nimport { buildGraphQLOperation, getModelAuthModes, getClientSideAuthError, getForbiddenError, predicateToGraphQLFilter, getTokenForCustomAuth } from '../utils';\nimport { jitteredExponentialRetry, Category, ConsoleLogger as Logger, DataStoreAction, Hub, NonRetryableError, BackgroundProcessManager } from '@aws-amplify/core';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { getSyncErrorType } from './errorMaps';\nvar opResultDefaults = {\n  items: [],\n  nextToken: null,\n  startedAt: null\n};\nvar logger = new Logger('DataStore');\nvar SyncProcessor = /** @class */function () {\n  function SyncProcessor(schema, syncPredicates, amplifyConfig, authModeStrategy, errorHandler, amplifyContext) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n    this.schema = schema;\n    this.syncPredicates = syncPredicates;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.errorHandler = errorHandler;\n    this.amplifyContext = amplifyContext;\n    this.typeQuery = new WeakMap();\n    this.runningProcesses = new BackgroundProcessManager();\n    amplifyContext.InternalAPI = amplifyContext.InternalAPI || InternalAPI;\n    this.generateQueries();\n  }\n  SyncProcessor.prototype.generateQueries = function () {\n    var _this = this;\n    Object.values(this.schema.namespaces).forEach(function (namespace) {\n      Object.values(namespace.models).filter(function (_a) {\n        var syncable = _a.syncable;\n        return syncable;\n      }).forEach(function (model) {\n        var _a = __read(buildGraphQLOperation(namespace, model, 'LIST'), 1),\n          _b = __read(_a[0]),\n          opNameQuery = _b.slice(1);\n        _this.typeQuery.set(model, opNameQuery);\n      });\n    });\n  };\n  SyncProcessor.prototype.graphqlFilterFromPredicate = function (model) {\n    if (!this.syncPredicates) {\n      return null;\n    }\n    var predicatesGroup = ModelPredicateCreator.getPredicates(this.syncPredicates.get(model), false);\n    if (!predicatesGroup) {\n      return null;\n    }\n    return predicateToGraphQLFilter(predicatesGroup);\n  };\n  SyncProcessor.prototype.retrievePage = function (modelDefinition, lastSync, nextToken, limit, filter, onTerminate) {\n    if (limit === void 0) {\n      limit = null;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, opName, query, variables, modelAuthModes, readAuthModes, authModeAttempts, authModeRetry, data, _b, _c, opResult, items, newNextToken, startedAt;\n      var _this = this;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = __read(this.typeQuery.get(modelDefinition), 2), opName = _a[0], query = _a[1];\n            variables = {\n              limit: limit,\n              nextToken: nextToken,\n              lastSync: lastSync,\n              filter: filter\n            };\n            return [4 /*yield*/, getModelAuthModes({\n              authModeStrategy: this.authModeStrategy,\n              defaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n              modelName: modelDefinition.name,\n              schema: this.schema\n            })];\n          case 1:\n            modelAuthModes = _d.sent();\n            readAuthModes = modelAuthModes.READ;\n            authModeAttempts = 0;\n            authModeRetry = function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_1, authMode;\n                var _a;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      if (!this.runningProcesses.isOpen) {\n                        throw new Error('sync.retreievePage termination was requested. Exiting.');\n                      }\n                      _b.label = 1;\n                    case 1:\n                      _b.trys.push([1, 3,, 5]);\n                      logger.debug(\"Attempting sync with authMode: \" + readAuthModes[authModeAttempts]);\n                      return [4 /*yield*/, this.jitteredRetry({\n                        query: query,\n                        variables: variables,\n                        opName: opName,\n                        modelDefinition: modelDefinition,\n                        authMode: readAuthModes[authModeAttempts],\n                        onTerminate: onTerminate\n                      })];\n                    case 2:\n                      response = _b.sent();\n                      logger.debug(\"Sync successful with authMode: \" + readAuthModes[authModeAttempts]);\n                      return [2 /*return*/, response];\n                    case 3:\n                      error_1 = _b.sent();\n                      authModeAttempts++;\n                      if (authModeAttempts >= readAuthModes.length) {\n                        authMode = readAuthModes[authModeAttempts - 1];\n                        logger.debug(\"Sync failed with authMode: \" + authMode, error_1);\n                        if (getClientSideAuthError(error_1) || getForbiddenError(error_1)) {\n                          // return empty list of data so DataStore will continue to sync other models\n                          logger.warn(\"User is unauthorized to query \" + opName + \" with auth mode \" + authMode + \". No data could be returned.\");\n                          return [2 /*return*/, {\n                            data: (_a = {}, _a[opName] = opResultDefaults, _a)\n                          }];\n                        }\n                        throw error_1;\n                      }\n                      logger.debug(\"Sync failed with authMode: \" + readAuthModes[authModeAttempts - 1] + \". Retrying with authMode: \" + readAuthModes[authModeAttempts]);\n                      return [4 /*yield*/, authModeRetry()];\n                    case 4:\n                      return [2 /*return*/, _b.sent()];\n                    case 5:\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            };\n\n            return [4 /*yield*/, authModeRetry()];\n          case 2:\n            data = _d.sent().data;\n            _b = data, _c = opName, opResult = _b[_c];\n            items = opResult.items, newNextToken = opResult.nextToken, startedAt = opResult.startedAt;\n            return [2 /*return*/, {\n              nextToken: newNextToken,\n              startedAt: startedAt,\n              items: items\n            }];\n        }\n      });\n    });\n  };\n  SyncProcessor.prototype.jitteredRetry = function (_a) {\n    var query = _a.query,\n      variables = _a.variables,\n      opName = _a.opName,\n      modelDefinition = _a.modelDefinition,\n      authMode = _a.authMode,\n      onTerminate = _a.onTerminate;\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, jitteredExponentialRetry(function (query, variables) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var authToken, customUserAgentDetails, error_2, clientOrForbiddenErrorMessage, hasItems, unauthorized, otherErrors, result;\n                var _this = this;\n                var _a, _b, _c, _d;\n                return __generator(this, function (_e) {\n                  switch (_e.label) {\n                    case 0:\n                      _e.trys.push([0, 3,, 6]);\n                      return [4 /*yield*/, getTokenForCustomAuth(authMode, this.amplifyConfig)];\n                    case 1:\n                      authToken = _e.sent();\n                      customUserAgentDetails = {\n                        category: Category.DataStore,\n                        action: DataStoreAction.GraphQl\n                      };\n                      return [4 /*yield*/, this.amplifyContext.InternalAPI.graphql({\n                        query: query,\n                        variables: variables,\n                        authMode: authMode,\n                        authToken: authToken\n                      }, undefined, customUserAgentDetails)];\n                    case 2:\n                      return [2 /*return*/, _e.sent()];\n                    case 3:\n                      error_2 = _e.sent();\n                      clientOrForbiddenErrorMessage = getClientSideAuthError(error_2) || getForbiddenError(error_2);\n                      if (clientOrForbiddenErrorMessage) {\n                        logger.error('Sync processor retry error:', error_2);\n                        throw new NonRetryableError(clientOrForbiddenErrorMessage);\n                      }\n                      hasItems = Boolean((_b = (_a = error_2 === null || error_2 === void 0 ? void 0 : error_2.data) === null || _a === void 0 ? void 0 : _a[opName]) === null || _b === void 0 ? void 0 : _b.items);\n                      unauthorized = (error_2 === null || error_2 === void 0 ? void 0 : error_2.errors) && error_2.errors.some(function (err) {\n                        return err.errorType === 'Unauthorized';\n                      });\n                      otherErrors = (error_2 === null || error_2 === void 0 ? void 0 : error_2.errors) && error_2.errors.filter(function (err) {\n                        return err.errorType !== 'Unauthorized';\n                      });\n                      result = error_2;\n                      if (hasItems) {\n                        result.data[opName].items = result.data[opName].items.filter(function (item) {\n                          return item !== null;\n                        });\n                      }\n                      if (!(hasItems && (otherErrors === null || otherErrors === void 0 ? void 0 : otherErrors.length))) return [3 /*break*/, 5];\n                      return [4 /*yield*/, Promise.all(otherErrors.map(function (err) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var e_1;\n                          return __generator(this, function (_a) {\n                            switch (_a.label) {\n                              case 0:\n                                _a.trys.push([0, 2,, 3]);\n                                return [4 /*yield*/, this.errorHandler({\n                                  recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                  localModel: null,\n                                  message: err.message,\n                                  model: modelDefinition.name,\n                                  operation: opName,\n                                  errorType: getSyncErrorType(err),\n                                  process: ProcessName.sync,\n                                  remoteModel: null,\n                                  cause: err\n                                })];\n                              case 1:\n                                _a.sent();\n                                return [3 /*break*/, 3];\n                              case 2:\n                                e_1 = _a.sent();\n                                logger.error('Sync error handler failed with:', e_1);\n                                return [3 /*break*/, 3];\n                              case 3:\n                                return [2 /*return*/];\n                            }\n                          });\n                        });\n                      }))];\n\n                    case 4:\n                      _e.sent();\n                      Hub.dispatch('datastore', {\n                        event: 'nonApplicableDataReceived',\n                        data: {\n                          errors: otherErrors,\n                          modelName: modelDefinition.name\n                        }\n                      });\n                      _e.label = 5;\n                    case 5:\n                      /**\n                       * Handle $util.unauthorized() in resolver request mapper, which responses with something\n                       * like this:\n                       *\n                       * ```\n                       * {\n                       * \tdata: { syncYourModel: null },\n                       * \terrors: [\n                       * \t\t{\n                       * \t\t\tpath: ['syncLegacyJSONComments'],\n                       * \t\t\tdata: null,\n                       * \t\t\terrorType: 'Unauthorized',\n                       * \t\t\terrorInfo: null,\n                       * \t\t\tlocations: [{ line: 2, column: 3, sourceName: null }],\n                       * \t\t\tmessage:\n                       * \t\t\t\t'Not Authorized to access syncYourModel on type Query',\n                       * \t\t\t},\n                       * \t\t],\n                       * \t}\n                       * ```\n                       *\n                       * The correct handling for this is to signal that we've encountered a non-retryable error,\n                       * since the server has responded with an auth error and *NO DATA* at this point.\n                       */\n                      if (unauthorized) {\n                        this.errorHandler({\n                          recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                          localModel: null,\n                          message: error_2.message,\n                          model: modelDefinition.name,\n                          operation: opName,\n                          errorType: getSyncErrorType(error_2.errors[0]),\n                          process: ProcessName.sync,\n                          remoteModel: null,\n                          cause: error_2\n                        });\n                        throw new NonRetryableError(error_2);\n                      }\n                      if ((_d = (_c = result.data) === null || _c === void 0 ? void 0 : _c[opName].items) === null || _d === void 0 ? void 0 : _d.length) {\n                        return [2 /*return*/, result];\n                      }\n                      throw error_2;\n                    case 6:\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            }, [query, variables], undefined, onTerminate)];\n          case 1:\n            return [2 /*return*/, _b.sent()];\n        }\n      });\n    });\n  };\n  SyncProcessor.prototype.start = function (typesLastSync) {\n    var _this = this;\n    var _a = this.amplifyConfig,\n      maxRecordsToSync = _a.maxRecordsToSync,\n      syncPageSize = _a.syncPageSize;\n    var parentPromises = new Map();\n    var observable = new Observable(function (observer) {\n      var sortedTypesLastSyncs = Object.values(_this.schema.namespaces).reduce(function (map, namespace) {\n        var e_2, _a;\n        try {\n          for (var _b = __values(Array.from(namespace.modelTopologicalOrdering.keys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var modelName = _c.value;\n            var typeLastSync = typesLastSync.get(namespace.models[modelName]);\n            map.set(namespace.models[modelName], typeLastSync);\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n        return map;\n      }, new Map());\n      var allModelsReady = Array.from(sortedTypesLastSyncs.entries()).filter(function (_a) {\n        var _b = __read(_a, 1),\n          syncable = _b[0].syncable;\n        return syncable;\n      }).map(function (_a) {\n        var _b = __read(_a, 2),\n          modelDefinition = _b[0],\n          _c = __read(_b[1], 2),\n          namespace = _c[0],\n          lastSync = _c[1];\n        return _this.runningProcesses.isOpen && _this.runningProcesses.add(function (onTerminate) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var done, nextToken, startedAt, items, recordsReceived, filter, parents, promises, promise;\n            var _this = this;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  done = false;\n                  nextToken = null;\n                  startedAt = null;\n                  items = null;\n                  recordsReceived = 0;\n                  filter = this.graphqlFilterFromPredicate(modelDefinition);\n                  parents = this.schema.namespaces[namespace].modelTopologicalOrdering.get(modelDefinition.name);\n                  promises = parents.map(function (parent) {\n                    return parentPromises.get(namespace + \"_\" + parent);\n                  });\n                  promise = new Promise(function (res) {\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var limit, error_3, e_3;\n                      var _a;\n                      return __generator(this, function (_b) {\n                        switch (_b.label) {\n                          case 0:\n                            return [4 /*yield*/, Promise.all(promises)];\n                          case 1:\n                            _b.sent();\n                            _b.label = 2;\n                          case 2:\n                            /**\n                             * If `runningProcesses` is not open, it means that the sync processor has been\n                             * stopped (for example by calling `DataStore.clear()` upstream) and has not yet\n                             * finished terminating and/or waiting for its background processes to complete.\n                             */\n                            if (!this.runningProcesses.isOpen) {\n                              logger.debug(\"Sync processor has been stopped, terminating sync for \" + modelDefinition.name);\n                              return [2 /*return*/, res()];\n                            }\n                            limit = Math.min(maxRecordsToSync - recordsReceived, syncPageSize);\n                            _b.label = 3;\n                          case 3:\n                            _b.trys.push([3, 5,, 10]);\n                            return [4 /*yield*/, this.retrievePage(modelDefinition, lastSync, nextToken, limit, filter, onTerminate)];\n                          case 4:\n                            _a = _b.sent(), items = _a.items, nextToken = _a.nextToken, startedAt = _a.startedAt;\n                            return [3 /*break*/, 10];\n                          case 5:\n                            error_3 = _b.sent();\n                            _b.label = 6;\n                          case 6:\n                            _b.trys.push([6, 8,, 9]);\n                            return [4 /*yield*/, this.errorHandler({\n                              recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                              localModel: null,\n                              message: error_3.message,\n                              model: modelDefinition.name,\n                              operation: null,\n                              errorType: getSyncErrorType(error_3),\n                              process: ProcessName.sync,\n                              remoteModel: null,\n                              cause: error_3\n                            })];\n                          case 7:\n                            _b.sent();\n                            return [3 /*break*/, 9];\n                          case 8:\n                            e_3 = _b.sent();\n                            logger.error('Sync error handler failed with:', e_3);\n                            return [3 /*break*/, 9];\n                          case 9:\n                            /**\n                             * If there's an error, this model fails, but the rest of the sync should\n                             * continue. To facilitate this, we explicitly mark this model as `done`\n                             * with no items and allow the loop to continue organically. This ensures\n                             * all callbacks (subscription messages) happen as normal, so anything\n                             * waiting on them knows the model is as done as it can be.\n                             */\n                            done = true;\n                            items = [];\n                            return [3 /*break*/, 10];\n                          case 10:\n                            recordsReceived += items.length;\n                            done = nextToken === null || recordsReceived >= maxRecordsToSync;\n                            observer.next({\n                              namespace: namespace,\n                              modelDefinition: modelDefinition,\n                              items: items,\n                              done: done,\n                              startedAt: startedAt,\n                              isFullSync: !lastSync\n                            });\n                            _b.label = 11;\n                          case 11:\n                            if (!done) return [3 /*break*/, 2];\n                            _b.label = 12;\n                          case 12:\n                            res();\n                            return [2 /*return*/];\n                        }\n                      });\n                    });\n                  });\n\n                  parentPromises.set(namespace + \"_\" + modelDefinition.name, promise);\n                  return [4 /*yield*/, promise];\n                case 1:\n                  _a.sent();\n                  return [2 /*return*/];\n              }\n            });\n          });\n        }, \"adding model \" + modelDefinition.name);\n      });\n      Promise.all(allModelsReady).then(function () {\n        observer.complete();\n      });\n    });\n    return observable;\n  };\n  SyncProcessor.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('stopping sync processor');\n            return [4 /*yield*/, this.runningProcesses.close()];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.runningProcesses.open()];\n          case 2:\n            _a.sent();\n            logger.debug('sync processor stopped');\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return SyncProcessor;\n}();\nexport { SyncProcessor };","map":{"version":3,"mappings":"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","names":["InternalAPI","Observable","ProcessName","buildGraphQLOperation","getModelAuthModes","getClientSideAuthError","getForbiddenError","predicateToGraphQLFilter","getTokenForCustomAuth","jitteredExponentialRetry","Category","ConsoleLogger","Logger","DataStoreAction","Hub","NonRetryableError","BackgroundProcessManager","ModelPredicateCreator","getSyncErrorType","opResultDefaults","items","nextToken","startedAt","logger","schema","syncPredicates","amplifyConfig","authModeStrategy","errorHandler","amplifyContext","WeakMap","generateQueries","SyncProcessor","Object","values","namespaces","forEach","namespace","models","filter","_a","syncable","_b","opNameQuery","_this","typeQuery","set","model","predicatesGroup","getPredicates","get","modelDefinition","lastSync","limit","onTerminate","opName","query","variables","defaultAuthMode","aws_appsync_authenticationType","modelName","name","modelAuthModes","_d","readAuthModes","READ","authModeAttempts","authModeRetry","runningProcesses","isOpen","Error","debug","jitteredRetry","authMode","response","length","error_1","warn","data","_c","opResult","newNextToken","authToken","_e","customUserAgentDetails","category","DataStore","action","GraphQl","graphql","undefined","clientOrForbiddenErrorMessage","error_2","error","hasItems","Boolean","unauthorized","errors","some","errorType","otherErrors","result","Promise","all","map","err","recoverySuggestion","localModel","message","operation","process","sync","remoteModel","cause","e_1","dispatch","event","typesLastSync","maxRecordsToSync","syncPageSize","parentPromises","Map","observable","sortedTypesLastSyncs","reduce","from","modelTopologicalOrdering","keys","typeLastSync","allModelsReady","Array","entries","add","done","recordsReceived","graphqlFilterFromPredicate","parents","promises","parent","promise","res","Math","min","retrievePage","error_3","e_3","observer","next","isFullSync","then","complete","close","open"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-amplify/datastore/src/sync/processors/sync.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { GraphQLResult, GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport { InternalAPI } from '@aws-amplify/api/internals';\nimport Observable from 'zen-observable-ts';\nimport {\n\tInternalSchema,\n\tModelInstanceMetadata,\n\tSchemaModel,\n\tModelPredicate,\n\tPredicatesGroup,\n\tGraphQLFilter,\n\tAuthModeStrategy,\n\tErrorHandler,\n\tProcessName,\n\tAmplifyContext,\n} from '../../types';\nimport {\n\tbuildGraphQLOperation,\n\tgetModelAuthModes,\n\tgetClientSideAuthError,\n\tgetForbiddenError,\n\tpredicateToGraphQLFilter,\n\tgetTokenForCustomAuth,\n} from '../utils';\nimport {\n\tjitteredExponentialRetry,\n\tCategory,\n\tConsoleLogger as Logger,\n\tCustomUserAgentDetails,\n\tDataStoreAction,\n\tHub,\n\tNonRetryableError,\n\tBackgroundProcessManager,\n} from '@aws-amplify/core';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { getSyncErrorType } from './errorMaps';\nconst opResultDefaults = {\n\titems: [],\n\tnextToken: null,\n\tstartedAt: null,\n};\n\nconst logger = new Logger('DataStore');\n\nclass SyncProcessor {\n\tprivate readonly typeQuery = new WeakMap<SchemaModel, [string, string]>();\n\n\tprivate runningProcesses = new BackgroundProcessManager();\n\n\tconstructor(\n\t\tprivate readonly schema: InternalSchema,\n\t\tprivate readonly syncPredicates: WeakMap<\n\t\t\tSchemaModel,\n\t\t\tModelPredicate<any> | null\n\t\t>,\n\t\tprivate readonly amplifyConfig: Record<string, any> = {},\n\t\tprivate readonly authModeStrategy: AuthModeStrategy,\n\t\tprivate readonly errorHandler: ErrorHandler,\n\t\tprivate readonly amplifyContext: AmplifyContext\n\t) {\n\t\tamplifyContext.InternalAPI = amplifyContext.InternalAPI || InternalAPI;\n\t\tthis.generateQueries();\n\t}\n\n\tprivate generateQueries() {\n\t\tObject.values(this.schema.namespaces).forEach(namespace => {\n\t\t\tObject.values(namespace.models)\n\t\t\t\t.filter(({ syncable }) => syncable)\n\t\t\t\t.forEach(model => {\n\t\t\t\t\tconst [[, ...opNameQuery]] = buildGraphQLOperation(\n\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t'LIST'\n\t\t\t\t\t);\n\n\t\t\t\t\tthis.typeQuery.set(model, opNameQuery);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tprivate graphqlFilterFromPredicate(model: SchemaModel): GraphQLFilter {\n\t\tif (!this.syncPredicates) {\n\t\t\treturn null!;\n\t\t}\n\t\tconst predicatesGroup: PredicatesGroup<any> =\n\t\t\tModelPredicateCreator.getPredicates(\n\t\t\t\tthis.syncPredicates.get(model)!,\n\t\t\t\tfalse\n\t\t\t)!;\n\n\t\tif (!predicatesGroup) {\n\t\t\treturn null!;\n\t\t}\n\n\t\treturn predicateToGraphQLFilter(predicatesGroup);\n\t}\n\n\tprivate async retrievePage<T extends ModelInstanceMetadata>(\n\t\tmodelDefinition: SchemaModel,\n\t\tlastSync: number,\n\t\tnextToken: string,\n\t\tlimit: number = null!,\n\t\tfilter: GraphQLFilter,\n\t\tonTerminate: Promise<void>\n\t): Promise<{ nextToken: string; startedAt: number; items: T[] }> {\n\t\tconst [opName, query] = this.typeQuery.get(modelDefinition)!;\n\n\t\tconst variables = {\n\t\t\tlimit,\n\t\t\tnextToken,\n\t\t\tlastSync,\n\t\t\tfilter,\n\t\t};\n\n\t\tconst modelAuthModes = await getModelAuthModes({\n\t\t\tauthModeStrategy: this.authModeStrategy,\n\t\t\tdefaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n\t\t\tmodelName: modelDefinition.name,\n\t\t\tschema: this.schema,\n\t\t});\n\n\t\t// sync only needs the READ auth mode(s)\n\t\tconst readAuthModes = modelAuthModes.READ;\n\n\t\tlet authModeAttempts = 0;\n\t\tconst authModeRetry = async () => {\n\t\t\tif (!this.runningProcesses.isOpen) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'sync.retreievePage termination was requested. Exiting.'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`Attempting sync with authMode: ${readAuthModes[authModeAttempts]}`\n\t\t\t\t);\n\t\t\t\tconst response = await this.jitteredRetry<T>({\n\t\t\t\t\tquery,\n\t\t\t\t\tvariables,\n\t\t\t\t\topName,\n\t\t\t\t\tmodelDefinition,\n\t\t\t\t\tauthMode: readAuthModes[authModeAttempts],\n\t\t\t\t\tonTerminate,\n\t\t\t\t});\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`Sync successful with authMode: ${readAuthModes[authModeAttempts]}`\n\t\t\t\t);\n\t\t\t\treturn response;\n\t\t\t} catch (error) {\n\t\t\t\tauthModeAttempts++;\n\t\t\t\tif (authModeAttempts >= readAuthModes.length) {\n\t\t\t\t\tconst authMode = readAuthModes[authModeAttempts - 1];\n\t\t\t\t\tlogger.debug(`Sync failed with authMode: ${authMode}`, error);\n\t\t\t\t\tif (getClientSideAuthError(error) || getForbiddenError(error)) {\n\t\t\t\t\t\t// return empty list of data so DataStore will continue to sync other models\n\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t`User is unauthorized to query ${opName} with auth mode ${authMode}. No data could be returned.`\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t[opName]: opResultDefaults,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`Sync failed with authMode: ${\n\t\t\t\t\t\treadAuthModes[authModeAttempts - 1]\n\t\t\t\t\t}. Retrying with authMode: ${readAuthModes[authModeAttempts]}`\n\t\t\t\t);\n\t\t\t\treturn await authModeRetry();\n\t\t\t}\n\t\t};\n\n\t\tconst { data } = await authModeRetry();\n\n\t\tconst { [opName]: opResult } = data;\n\n\t\tconst { items, nextToken: newNextToken, startedAt } = opResult;\n\n\t\treturn {\n\t\t\tnextToken: newNextToken,\n\t\t\tstartedAt,\n\t\t\titems,\n\t\t};\n\t}\n\n\tprivate async jitteredRetry<T>({\n\t\tquery,\n\t\tvariables,\n\t\topName,\n\t\tmodelDefinition,\n\t\tauthMode,\n\t\tonTerminate,\n\t}: {\n\t\tquery: string;\n\t\tvariables: { limit: number; lastSync: number; nextToken: string };\n\t\topName: string;\n\t\tmodelDefinition: SchemaModel;\n\t\tauthMode: GRAPHQL_AUTH_MODE;\n\t\tonTerminate: Promise<void>;\n\t}): Promise<\n\t\tGraphQLResult<{\n\t\t\t[opName: string]: {\n\t\t\t\titems: T[];\n\t\t\t\tnextToken: string;\n\t\t\t\tstartedAt: number;\n\t\t\t};\n\t\t}>\n\t> {\n\t\treturn await jitteredExponentialRetry(\n\t\t\tasync (query, variables) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst authToken = await getTokenForCustomAuth(\n\t\t\t\t\t\tauthMode,\n\t\t\t\t\t\tthis.amplifyConfig\n\t\t\t\t\t);\n\n\t\t\t\t\tconst customUserAgentDetails: CustomUserAgentDetails = {\n\t\t\t\t\t\tcategory: Category.DataStore,\n\t\t\t\t\t\taction: DataStoreAction.GraphQl,\n\t\t\t\t\t};\n\n\t\t\t\t\treturn await this.amplifyContext.InternalAPI.graphql(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\tvariables,\n\t\t\t\t\t\t\tauthMode,\n\t\t\t\t\t\t\tauthToken,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tcustomUserAgentDetails\n\t\t\t\t\t);\n\n\t\t\t\t\t// TODO: onTerminate.then(() => API.cancel(...))\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Catch client-side (GraphQLAuthError) & 401/403 errors here so that we don't continue to retry\n\t\t\t\t\tconst clientOrForbiddenErrorMessage =\n\t\t\t\t\t\tgetClientSideAuthError(error) || getForbiddenError(error);\n\n\t\t\t\t\tif (clientOrForbiddenErrorMessage) {\n\t\t\t\t\t\tlogger.error('Sync processor retry error:', error);\n\t\t\t\t\t\tthrow new NonRetryableError(clientOrForbiddenErrorMessage);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst hasItems = Boolean(error?.data?.[opName]?.items);\n\n\t\t\t\t\tconst unauthorized =\n\t\t\t\t\t\terror?.errors &&\n\t\t\t\t\t\t(error.errors as [any]).some(\n\t\t\t\t\t\t\terr => err.errorType === 'Unauthorized'\n\t\t\t\t\t\t);\n\n\t\t\t\t\tconst otherErrors =\n\t\t\t\t\t\terror?.errors &&\n\t\t\t\t\t\t(error.errors as [any]).filter(\n\t\t\t\t\t\t\terr => err.errorType !== 'Unauthorized'\n\t\t\t\t\t\t);\n\n\t\t\t\t\tconst result = error;\n\n\t\t\t\t\tif (hasItems) {\n\t\t\t\t\t\tresult.data[opName].items = result.data[opName].items.filter(\n\t\t\t\t\t\t\titem => item !== null\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (hasItems && otherErrors?.length) {\n\t\t\t\t\t\tawait Promise.all(\n\t\t\t\t\t\t\totherErrors.map(async err => {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tawait this.errorHandler({\n\t\t\t\t\t\t\t\t\t\trecoverySuggestion:\n\t\t\t\t\t\t\t\t\t\t\t'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n\t\t\t\t\t\t\t\t\t\tlocalModel: null!,\n\t\t\t\t\t\t\t\t\t\tmessage: err.message,\n\t\t\t\t\t\t\t\t\t\tmodel: modelDefinition.name,\n\t\t\t\t\t\t\t\t\t\toperation: opName,\n\t\t\t\t\t\t\t\t\t\terrorType: getSyncErrorType(err),\n\t\t\t\t\t\t\t\t\t\tprocess: ProcessName.sync,\n\t\t\t\t\t\t\t\t\t\tremoteModel: null!,\n\t\t\t\t\t\t\t\t\t\tcause: err,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\tlogger.error('Sync error handler failed with:', e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t\tHub.dispatch('datastore', {\n\t\t\t\t\t\t\tevent: 'nonApplicableDataReceived',\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\terrors: otherErrors,\n\t\t\t\t\t\t\t\tmodelName: modelDefinition.name,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Handle $util.unauthorized() in resolver request mapper, which responses with something\n\t\t\t\t\t * like this:\n\t\t\t\t\t *\n\t\t\t\t\t * ```\n\t\t\t\t\t * {\n\t\t\t\t\t * \tdata: { syncYourModel: null },\n\t\t\t\t\t * \terrors: [\n\t\t\t\t\t * \t\t{\n\t\t\t\t\t * \t\t\tpath: ['syncLegacyJSONComments'],\n\t\t\t\t\t * \t\t\tdata: null,\n\t\t\t\t\t * \t\t\terrorType: 'Unauthorized',\n\t\t\t\t\t * \t\t\terrorInfo: null,\n\t\t\t\t\t * \t\t\tlocations: [{ line: 2, column: 3, sourceName: null }],\n\t\t\t\t\t * \t\t\tmessage:\n\t\t\t\t\t * \t\t\t\t'Not Authorized to access syncYourModel on type Query',\n\t\t\t\t\t * \t\t\t},\n\t\t\t\t\t * \t\t],\n\t\t\t\t\t * \t}\n\t\t\t\t\t * ```\n\t\t\t\t\t *\n\t\t\t\t\t * The correct handling for this is to signal that we've encountered a non-retryable error,\n\t\t\t\t\t * since the server has responded with an auth error and *NO DATA* at this point.\n\t\t\t\t\t */\n\t\t\t\t\tif (unauthorized) {\n\t\t\t\t\t\tthis.errorHandler({\n\t\t\t\t\t\t\trecoverySuggestion:\n\t\t\t\t\t\t\t\t'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n\t\t\t\t\t\t\tlocalModel: null!,\n\t\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\t\tmodel: modelDefinition.name,\n\t\t\t\t\t\t\toperation: opName,\n\t\t\t\t\t\t\terrorType: getSyncErrorType(error.errors[0]),\n\t\t\t\t\t\t\tprocess: ProcessName.sync,\n\t\t\t\t\t\t\tremoteModel: null!,\n\t\t\t\t\t\t\tcause: error,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthrow new NonRetryableError(error);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (result.data?.[opName].items?.length) {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t},\n\t\t\t[query, variables],\n\t\t\tundefined,\n\t\t\tonTerminate\n\t\t);\n\t}\n\n\tstart(\n\t\ttypesLastSync: Map<SchemaModel, [string, number]>\n\t): Observable<SyncModelPage> {\n\t\tconst { maxRecordsToSync, syncPageSize } = this.amplifyConfig;\n\t\tconst parentPromises = new Map<string, Promise<void>>();\n\t\tconst observable = new Observable<SyncModelPage>(observer => {\n\t\t\tconst sortedTypesLastSyncs = Object.values(this.schema.namespaces).reduce(\n\t\t\t\t(map, namespace) => {\n\t\t\t\t\tfor (const modelName of Array.from(\n\t\t\t\t\t\tnamespace.modelTopologicalOrdering!.keys()\n\t\t\t\t\t)) {\n\t\t\t\t\t\tconst typeLastSync = typesLastSync.get(namespace.models[modelName]);\n\t\t\t\t\t\tmap.set(namespace.models[modelName], typeLastSync!);\n\t\t\t\t\t}\n\t\t\t\t\treturn map;\n\t\t\t\t},\n\t\t\t\tnew Map<SchemaModel, [string, number]>()\n\t\t\t);\n\n\t\t\tconst allModelsReady = Array.from(sortedTypesLastSyncs.entries())\n\t\t\t\t.filter(([{ syncable }]) => syncable)\n\t\t\t\t.map(\n\t\t\t\t\t([modelDefinition, [namespace, lastSync]]) =>\n\t\t\t\t\t\tthis.runningProcesses.isOpen &&\n\t\t\t\t\t\tthis.runningProcesses.add(async onTerminate => {\n\t\t\t\t\t\t\tlet done = false;\n\t\t\t\t\t\t\tlet nextToken: string = null!;\n\t\t\t\t\t\t\tlet startedAt: number = null!;\n\t\t\t\t\t\t\tlet items: ModelInstanceMetadata[] = null!;\n\n\t\t\t\t\t\t\tlet recordsReceived = 0;\n\t\t\t\t\t\t\tconst filter = this.graphqlFilterFromPredicate(modelDefinition);\n\n\t\t\t\t\t\t\tconst parents = this.schema.namespaces[\n\t\t\t\t\t\t\t\tnamespace\n\t\t\t\t\t\t\t].modelTopologicalOrdering!.get(modelDefinition.name);\n\t\t\t\t\t\t\tconst promises = parents!.map(parent =>\n\t\t\t\t\t\t\t\tparentPromises.get(`${namespace}_${parent}`)\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tconst promise = new Promise<void>(async res => {\n\t\t\t\t\t\t\t\tawait Promise.all(promises);\n\n\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t\t\t * If `runningProcesses` is not open, it means that the sync processor has been\n\t\t\t\t\t\t\t\t\t * stopped (for example by calling `DataStore.clear()` upstream) and has not yet\n\t\t\t\t\t\t\t\t\t * finished terminating and/or waiting for its background processes to complete.\n\t\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\t\tif (!this.runningProcesses.isOpen) {\n\t\t\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t\t\t`Sync processor has been stopped, terminating sync for ${modelDefinition.name}`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\treturn res();\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tconst limit = Math.min(\n\t\t\t\t\t\t\t\t\t\tmaxRecordsToSync - recordsReceived,\n\t\t\t\t\t\t\t\t\t\tsyncPageSize\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t\t\t * It's possible that `retrievePage` will fail.\n\t\t\t\t\t\t\t\t\t * If it does fail, continue merging the rest of the data,\n\t\t\t\t\t\t\t\t\t * and invoke the error handler for non-applicable data.\n\t\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t({ items, nextToken, startedAt } = await this.retrievePage(\n\t\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\t\tlastSync,\n\t\t\t\t\t\t\t\t\t\t\tnextToken,\n\t\t\t\t\t\t\t\t\t\t\tlimit,\n\t\t\t\t\t\t\t\t\t\t\tfilter,\n\t\t\t\t\t\t\t\t\t\t\tonTerminate\n\t\t\t\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tawait this.errorHandler({\n\t\t\t\t\t\t\t\t\t\t\t\trecoverySuggestion:\n\t\t\t\t\t\t\t\t\t\t\t\t\t'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n\t\t\t\t\t\t\t\t\t\t\t\tlocalModel: null!,\n\t\t\t\t\t\t\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\t\t\t\t\t\t\tmodel: modelDefinition.name,\n\t\t\t\t\t\t\t\t\t\t\t\toperation: null!,\n\t\t\t\t\t\t\t\t\t\t\t\terrorType: getSyncErrorType(error),\n\t\t\t\t\t\t\t\t\t\t\t\tprocess: ProcessName.sync,\n\t\t\t\t\t\t\t\t\t\t\t\tremoteModel: null!,\n\t\t\t\t\t\t\t\t\t\t\t\tcause: error,\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\tlogger.error('Sync error handler failed with:', e);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t\t\t\t * If there's an error, this model fails, but the rest of the sync should\n\t\t\t\t\t\t\t\t\t\t * continue. To facilitate this, we explicitly mark this model as `done`\n\t\t\t\t\t\t\t\t\t\t * with no items and allow the loop to continue organically. This ensures\n\t\t\t\t\t\t\t\t\t\t * all callbacks (subscription messages) happen as normal, so anything\n\t\t\t\t\t\t\t\t\t\t * waiting on them knows the model is as done as it can be.\n\t\t\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\t\t\tdone = true;\n\t\t\t\t\t\t\t\t\t\titems = [];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\trecordsReceived += items.length;\n\n\t\t\t\t\t\t\t\t\tdone =\n\t\t\t\t\t\t\t\t\t\tnextToken === null || recordsReceived >= maxRecordsToSync;\n\n\t\t\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\titems,\n\t\t\t\t\t\t\t\t\t\tdone,\n\t\t\t\t\t\t\t\t\t\tstartedAt,\n\t\t\t\t\t\t\t\t\t\tisFullSync: !lastSync,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} while (!done);\n\n\t\t\t\t\t\t\t\tres();\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tparentPromises.set(\n\t\t\t\t\t\t\t\t`${namespace}_${modelDefinition.name}`,\n\t\t\t\t\t\t\t\tpromise\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tawait promise;\n\t\t\t\t\t\t}, `adding model ${modelDefinition.name}`)\n\t\t\t\t);\n\n\t\t\tPromise.all(allModelsReady as Promise<any>[]).then(() => {\n\t\t\t\tobserver.complete();\n\t\t\t});\n\t\t});\n\n\t\treturn observable;\n\t}\n\n\tasync stop() {\n\t\tlogger.debug('stopping sync processor');\n\t\tawait this.runningProcesses.close();\n\t\tawait this.runningProcesses.open();\n\t\tlogger.debug('sync processor stopped');\n\t}\n}\n\nexport type SyncModelPage = {\n\tnamespace: string;\n\tmodelDefinition: SchemaModel;\n\titems: ModelInstanceMetadata[];\n\tstartedAt: number;\n\tdone: boolean;\n\tisFullSync: boolean;\n};\n\nexport { SyncProcessor };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}