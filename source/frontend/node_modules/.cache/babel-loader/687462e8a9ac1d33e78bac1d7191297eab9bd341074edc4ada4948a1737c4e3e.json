{"ast":null,"code":"import { __asyncGenerator, __await, __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { Rekognition } from \"../Rekognition\";\nimport { RekognitionClient } from \"../RekognitionClient\";\nimport { DescribeProjectVersionsCommand } from \"../commands/DescribeProjectVersionsCommand\";\n/**\n * @private\n */\nvar makePagedClientRequest = function (client, input) {\n  var args = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, client.send.apply(client, __spread([new DescribeProjectVersionsCommand(input)], args))];\n        case 1:\n          // @ts-ignore\n          return [2 /*return*/, _a.sent()];\n      }\n    });\n  });\n};\n/**\n * @private\n */\nvar makePagedRequest = function (client, input) {\n  var args = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, client.describeProjectVersions.apply(client, __spread([input], args))];\n        case 1:\n          // @ts-ignore\n          return [2 /*return*/, _a.sent()];\n      }\n    });\n  });\n};\nexport function paginateDescribeProjectVersions(config, input) {\n  var additionalArguments = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    additionalArguments[_i - 2] = arguments[_i];\n  }\n  return __asyncGenerator(this, arguments, function paginateDescribeProjectVersions_1() {\n    var token, hasNext, page;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          token = config.startingToken || undefined;\n          hasNext = true;\n          _a.label = 1;\n        case 1:\n          if (!hasNext) return [3 /*break*/, 9];\n          input.NextToken = token;\n          input[\"MaxResults\"] = config.pageSize;\n          if (!(config.client instanceof Rekognition)) return [3 /*break*/, 3];\n          return [4 /*yield*/, __await(makePagedRequest.apply(void 0, __spread([config.client, input], additionalArguments)))];\n        case 2:\n          page = _a.sent();\n          return [3 /*break*/, 6];\n        case 3:\n          if (!(config.client instanceof RekognitionClient)) return [3 /*break*/, 5];\n          return [4 /*yield*/, __await(makePagedClientRequest.apply(void 0, __spread([config.client, input], additionalArguments)))];\n        case 4:\n          page = _a.sent();\n          return [3 /*break*/, 6];\n        case 5:\n          throw new Error(\"Invalid client, expected Rekognition | RekognitionClient\");\n        case 6:\n          return [4 /*yield*/, __await(page)];\n        case 7:\n          return [4 /*yield*/, _a.sent()];\n        case 8:\n          _a.sent();\n          token = page.NextToken;\n          hasNext = !!token;\n          return [3 /*break*/, 1];\n        case 9:\n          return [4 /*yield*/, __await(undefined)];\n        case 10:\n          // @ts-ignore\n          return [2 /*return*/, _a.sent()];\n      }\n    });\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,iBAAiB,QAAQ,sBAAsB;AACxD,SACEC,8BAA8B,QAGzB,4CAA4C;AAInD;;;AAGA,IAAMC,sBAAsB,GAAG,UAC7BC,MAAyB,EACzBC,KAA0C;EAC1C;OAAA,UAAY,EAAZC,qBAAY,EAAZA,IAAY;IAAZC;;;;;;UAGO,qBAAMH,MAAM,CAACI,IAAI,OAAXJ,MAAM,YAAM,IAAIF,8BAA8B,CAACG,KAAK,CAAC,GAAKE,IAAI;;UAD3E;UACA,sBAAOE,SAAqE;;;;CAC7E;AACD;;;AAGA,IAAMC,gBAAgB,GAAG,UACvBN,MAAmB,EACnBC,KAA0C;EAC1C;OAAA,UAAY,EAAZC,qBAAY,EAAZA,IAAY;IAAZC;;;;;;UAGO,qBAAMH,MAAM,CAACO,uBAAuB,OAA9BP,MAAM,YAAyBC,KAAK,GAAKE,IAAI;;UAD1D;UACA,sBAAOE,SAAoD;;;;CAC5D;AACD,OAAM,SAAiBG,+BAA+BA,CACpDC,MAA0C,EAC1CR,KAA0C;EAC1C;OAAA,UAA2B,EAA3BC,qBAA2B,EAA3BA,IAA2B;IAA3BQ;;;;;;;UAGIC,KAAK,GAAuCF,MAAM,CAACG,aAAa,IAAIC,SAAS;UAC7EC,OAAO,GAAG,IAAI;;;eAEXA,OAAO;UACZb,KAAK,CAACc,SAAS,GAAGJ,KAAK;UACvBV,KAAK,CAAC,YAAY,CAAC,GAAGQ,MAAM,CAACO,QAAQ;gBACjCP,MAAM,CAACT,MAAM,YAAYJ,WAAW,GAApC;UACK,6BAAMU,gBAAgB,yBAACG,MAAM,CAACT,MAAM,EAAEC,KAAK,GAAKS,mBAAmB;;UAA1EO,IAAI,GAAGZ,SAAoE;;;gBAClEI,MAAM,CAACT,MAAM,YAAYH,iBAAiB,GAA1C;UACF,6BAAME,sBAAsB,yBAACU,MAAM,CAACT,MAAM,EAAEC,KAAK,GAAKS,mBAAmB;;UAAhFO,IAAI,GAAGZ,SAA0E;;;UAEjF,MAAM,IAAIa,KAAK,CAAC,0DAA0D,CAAC;;uCAEvED,IAAI;;UAAV;;UAAAZ,SAAU;UACVM,KAAK,GAAGM,IAAI,CAACF,SAAS;UACtBD,OAAO,GAAG,CAAC,CAACH,KAAK;;;uCAGZE,SAAS;;UADhB;UACA","names":["Rekognition","RekognitionClient","DescribeProjectVersionsCommand","makePagedClientRequest","client","input","_i","args","send","_a","makePagedRequest","describeProjectVersions","paginateDescribeProjectVersions","config","additionalArguments","token","startingToken","undefined","hasNext","NextToken","pageSize","page","Error"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-sdk/client-rekognition/pagination/DescribeProjectVersionsPaginator.ts"],"sourcesContent":["import { Rekognition } from \"../Rekognition\";\nimport { RekognitionClient } from \"../RekognitionClient\";\nimport {\n  DescribeProjectVersionsCommand,\n  DescribeProjectVersionsCommandInput,\n  DescribeProjectVersionsCommandOutput,\n} from \"../commands/DescribeProjectVersionsCommand\";\nimport { RekognitionPaginationConfiguration } from \"./Interfaces\";\nimport { Paginator } from \"@aws-sdk/types\";\n\n/**\n * @private\n */\nconst makePagedClientRequest = async (\n  client: RekognitionClient,\n  input: DescribeProjectVersionsCommandInput,\n  ...args: any\n): Promise<DescribeProjectVersionsCommandOutput> => {\n  // @ts-ignore\n  return await client.send(new DescribeProjectVersionsCommand(input), ...args);\n};\n/**\n * @private\n */\nconst makePagedRequest = async (\n  client: Rekognition,\n  input: DescribeProjectVersionsCommandInput,\n  ...args: any\n): Promise<DescribeProjectVersionsCommandOutput> => {\n  // @ts-ignore\n  return await client.describeProjectVersions(input, ...args);\n};\nexport async function* paginateDescribeProjectVersions(\n  config: RekognitionPaginationConfiguration,\n  input: DescribeProjectVersionsCommandInput,\n  ...additionalArguments: any\n): Paginator<DescribeProjectVersionsCommandOutput> {\n  // ToDo: replace with actual type instead of typeof input.NextToken\n  let token: typeof input.NextToken | undefined = config.startingToken || undefined;\n  let hasNext = true;\n  let page: DescribeProjectVersionsCommandOutput;\n  while (hasNext) {\n    input.NextToken = token;\n    input[\"MaxResults\"] = config.pageSize;\n    if (config.client instanceof Rekognition) {\n      page = await makePagedRequest(config.client, input, ...additionalArguments);\n    } else if (config.client instanceof RekognitionClient) {\n      page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n    } else {\n      throw new Error(\"Invalid client, expected Rekognition | RekognitionClient\");\n    }\n    yield page;\n    token = page.NextToken;\n    hasNext = !!token;\n  }\n  // @ts-ignore\n  return undefined;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}