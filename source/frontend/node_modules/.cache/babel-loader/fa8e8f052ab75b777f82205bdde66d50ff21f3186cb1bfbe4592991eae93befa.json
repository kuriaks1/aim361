{"ast":null,"code":"export var CONTROL_MSG;\n(function (CONTROL_MSG) {\n  CONTROL_MSG[\"CONNECTION_CLOSED\"] = \"Connection closed\";\n  CONTROL_MSG[\"CONNECTION_FAILED\"] = \"Connection failed\";\n  CONTROL_MSG[\"REALTIME_SUBSCRIPTION_INIT_ERROR\"] = \"AppSync Realtime subscription init error\";\n  CONTROL_MSG[\"SUBSCRIPTION_ACK\"] = \"Subscription ack\";\n  CONTROL_MSG[\"TIMEOUT_DISCONNECT\"] = \"Timeout disconnect\";\n})(CONTROL_MSG || (CONTROL_MSG = {}));\n/** @enum {string} */\nexport var ConnectionState;\n(function (ConnectionState) {\n  /*\n   * The connection is alive and healthy\n   */\n  ConnectionState[\"Connected\"] = \"Connected\";\n  /*\n   * The connection is alive, but the connection is offline\n   */\n  ConnectionState[\"ConnectedPendingNetwork\"] = \"ConnectedPendingNetwork\";\n  /*\n   * The connection has been disconnected while in use\n   */\n  ConnectionState[\"ConnectionDisrupted\"] = \"ConnectionDisrupted\";\n  /*\n   * The connection has been disconnected and the network is offline\n   */\n  ConnectionState[\"ConnectionDisruptedPendingNetwork\"] = \"ConnectionDisruptedPendingNetwork\";\n  /*\n   * The connection is in the process of connecting\n   */\n  ConnectionState[\"Connecting\"] = \"Connecting\";\n  /*\n   * The connection is not in use and is being disconnected\n   */\n  ConnectionState[\"ConnectedPendingDisconnect\"] = \"ConnectedPendingDisconnect\";\n  /*\n   * The connection is not in use and has been disconnected\n   */\n  ConnectionState[\"Disconnected\"] = \"Disconnected\";\n  /*\n   * The connection is alive, but a keep alive message has been missed\n   */\n  ConnectionState[\"ConnectedPendingKeepAlive\"] = \"ConnectedPendingKeepAlive\";\n})(ConnectionState || (ConnectionState = {}));","map":{"version":3,"mappings":"AAWA,WAAYA,WAMX;AAND,WAAYA,WAAW;EACtBA,sDAAuC;EACvCA,sDAAuC;EACvCA,4FAA6E;EAC7EA,oDAAqC;EACrCA,wDAAyC;AAC1C,CAAC,EANWA,WAAW,KAAXA,WAAW;AAQvB;AACA,WAAYC,eAiCX;AAjCD,WAAYA,eAAe;EAC1B;;;EAGAA,0CAAuB;EACvB;;;EAGAA,sEAAmD;EACnD;;;EAGAA,8DAA2C;EAC3C;;;EAGAA,0FAAuE;EACvE;;;EAGAA,4CAAyB;EACzB;;;EAGAA,4EAAyD;EACzD;;;EAGAA,gDAA6B;EAC7B;;;EAGAA,0EAAuD;AACxD,CAAC,EAjCWA,eAAe,KAAfA,eAAe","names":["CONTROL_MSG","ConnectionState"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-amplify/pubsub/src/types/PubSub.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ZenObservable } from 'zen-observable-ts';\n\nexport interface SubscriptionObserver<T> {\n\tclosed: boolean;\n\tnext(value: T): void;\n\terror(errorValue: any): void;\n\tcomplete(): void;\n}\n\nexport enum CONTROL_MSG {\n\tCONNECTION_CLOSED = 'Connection closed',\n\tCONNECTION_FAILED = 'Connection failed',\n\tREALTIME_SUBSCRIPTION_INIT_ERROR = 'AppSync Realtime subscription init error',\n\tSUBSCRIPTION_ACK = 'Subscription ack',\n\tTIMEOUT_DISCONNECT = 'Timeout disconnect',\n}\n\n/** @enum {string} */\nexport enum ConnectionState {\n\t/*\n\t * The connection is alive and healthy\n\t */\n\tConnected = 'Connected',\n\t/*\n\t * The connection is alive, but the connection is offline\n\t */\n\tConnectedPendingNetwork = 'ConnectedPendingNetwork',\n\t/*\n\t * The connection has been disconnected while in use\n\t */\n\tConnectionDisrupted = 'ConnectionDisrupted',\n\t/*\n\t * The connection has been disconnected and the network is offline\n\t */\n\tConnectionDisruptedPendingNetwork = 'ConnectionDisruptedPendingNetwork',\n\t/*\n\t * The connection is in the process of connecting\n\t */\n\tConnecting = 'Connecting',\n\t/*\n\t * The connection is not in use and is being disconnected\n\t */\n\tConnectedPendingDisconnect = 'ConnectedPendingDisconnect',\n\t/*\n\t * The connection is not in use and has been disconnected\n\t */\n\tDisconnected = 'Disconnected',\n\t/*\n\t * The connection is alive, but a keep alive message has been missed\n\t */\n\tConnectedPendingKeepAlive = 'ConnectedPendingKeepAlive',\n}\n\nexport type PubSubContent = Record<string, unknown> | string;\nexport type PubSubContentObserver =\n\tZenObservable.SubscriptionObserver<PubSubContent>;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}