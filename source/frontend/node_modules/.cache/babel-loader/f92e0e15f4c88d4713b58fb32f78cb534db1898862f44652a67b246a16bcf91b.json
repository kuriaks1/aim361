{"ast":null,"code":"import { MAXIMUM_RETRY_DELAY } from \"./constants\";\n/**\n * Calculate a capped, fully-jittered exponential backoff time.\n */\nexport var defaultDelayDecider = function (delayBase, attempts) {\n  return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * Math.pow(2, attempts) * delayBase));\n};","map":{"version":3,"mappings":"AAAA,SAASA,mBAAmB,QAAQ,aAAa;AAEjD;;;AAGA,OAAO,IAAMC,mBAAmB,GAAG,UAACC,SAAiB,EAAEC,QAAgB;EACrE,WAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,CAACN,mBAAmB,EAAEK,IAAI,CAACE,MAAM,EAAE,GAAGF,UAAC,EAAIF,QAAQ,IAAGD,SAAS,CAAC,CAAC;AAApF,CAAoF","names":["MAXIMUM_RETRY_DELAY","defaultDelayDecider","delayBase","attempts","floor","Math","min","random"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-sdk/middleware-retry/src/delayDecider.ts"],"sourcesContent":["import { MAXIMUM_RETRY_DELAY } from \"./constants\";\n\n/**\n * Calculate a capped, fully-jittered exponential backoff time.\n */\nexport const defaultDelayDecider = (delayBase: number, attempts: number) =>\n  Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}