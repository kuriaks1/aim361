{"ast":null,"code":"import { __assign, __read, __spread, __values } from \"tslib\";\nexport var constructStack = function () {\n  var absoluteEntries = [];\n  var relativeEntries = [];\n  var entriesNameSet = new Set();\n  var sort = function (entries) {\n    return entries.sort(function (a, b) {\n      return stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"];\n    });\n  };\n  var removeByName = function (toRemove) {\n    var isRemoved = false;\n    var filterCb = function (entry) {\n      if (entry.name && entry.name === toRemove) {\n        isRemoved = true;\n        entriesNameSet.delete(toRemove);\n        return false;\n      }\n      return true;\n    };\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n  var removeByReference = function (toRemove) {\n    var isRemoved = false;\n    var filterCb = function (entry) {\n      if (entry.middleware === toRemove) {\n        isRemoved = true;\n        if (entry.name) entriesNameSet.delete(entry.name);\n        return false;\n      }\n      return true;\n    };\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n  var cloneTo = function (toStack) {\n    absoluteEntries.forEach(function (entry) {\n      //@ts-ignore\n      toStack.add(entry.middleware, __assign({}, entry));\n    });\n    relativeEntries.forEach(function (entry) {\n      //@ts-ignore\n      toStack.addRelativeTo(entry.middleware, __assign({}, entry));\n    });\n    return toStack;\n  };\n  var expandRelativeMiddlewareList = function (from) {\n    var expandedMiddlewareList = [];\n    from.before.forEach(function (entry) {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread(expandRelativeMiddlewareList(entry)));\n      }\n    });\n    expandedMiddlewareList.push(from);\n    from.after.reverse().forEach(function (entry) {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread(expandRelativeMiddlewareList(entry)));\n      }\n    });\n    return expandedMiddlewareList;\n  };\n  /**\n   * Get a final list of middleware in the order of being executed in the resolved handler.\n   */\n  var getMiddlewareList = function () {\n    var normalizedAbsoluteEntries = [];\n    var normalizedRelativeEntries = [];\n    var normalizedEntriesNameMap = {};\n    absoluteEntries.forEach(function (entry) {\n      var normalizedEntry = __assign(__assign({}, entry), {\n        before: [],\n        after: []\n      });\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedAbsoluteEntries.push(normalizedEntry);\n    });\n    relativeEntries.forEach(function (entry) {\n      var normalizedEntry = __assign(__assign({}, entry), {\n        before: [],\n        after: []\n      });\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedRelativeEntries.push(normalizedEntry);\n    });\n    normalizedRelativeEntries.forEach(function (entry) {\n      if (entry.toMiddleware) {\n        var toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n        if (toMiddleware === undefined) {\n          throw new Error(entry.toMiddleware + \" is not found when adding \" + (entry.name || \"anonymous\") + \" middleware \" + entry.relation + \" \" + entry.toMiddleware);\n        }\n        if (entry.relation === \"after\") {\n          toMiddleware.after.push(entry);\n        }\n        if (entry.relation === \"before\") {\n          toMiddleware.before.push(entry);\n        }\n      }\n    });\n    var mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce(function (wholeList, expendedMiddlewareList) {\n      // TODO: Replace it with Array.flat();\n      wholeList.push.apply(wholeList, __spread(expendedMiddlewareList));\n      return wholeList;\n    }, []);\n    return mainChain.map(function (entry) {\n      return entry.middleware;\n    });\n  };\n  var stack = {\n    add: function (middleware, options) {\n      if (options === void 0) {\n        options = {};\n      }\n      var name = options.name,\n        override = options.override;\n      var entry = __assign({\n        step: \"initialize\",\n        priority: \"normal\",\n        middleware: middleware\n      }, options);\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(\"Duplicate middleware name '\" + name + \"'\");\n          var toOverrideIndex = absoluteEntries.findIndex(function (entry) {\n            return entry.name === name;\n          });\n          var toOverride = absoluteEntries[toOverrideIndex];\n          if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {\n            throw new Error(\"\\\"\" + name + \"\\\" middleware with \" + toOverride.priority + \" priority in \" + toOverride.step + \" step cannot be \" + (\"overridden by same-name middleware with \" + entry.priority + \" priority in \" + entry.step + \" step.\"));\n          }\n          absoluteEntries.splice(toOverrideIndex, 1);\n        }\n        entriesNameSet.add(name);\n      }\n      absoluteEntries.push(entry);\n    },\n    addRelativeTo: function (middleware, options) {\n      var name = options.name,\n        override = options.override;\n      var entry = __assign({\n        middleware: middleware\n      }, options);\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(\"Duplicate middleware name '\" + name + \"'\");\n          var toOverrideIndex = relativeEntries.findIndex(function (entry) {\n            return entry.name === name;\n          });\n          var toOverride = relativeEntries[toOverrideIndex];\n          if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n            throw new Error(\"\\\"\" + name + \"\\\" middleware \" + toOverride.relation + \" \\\"\" + toOverride.toMiddleware + \"\\\" middleware cannot be overridden \" + (\"by same-name middleware \" + entry.relation + \" \\\"\" + entry.toMiddleware + \"\\\" middleware.\"));\n          }\n          relativeEntries.splice(toOverrideIndex, 1);\n        }\n        entriesNameSet.add(name);\n      }\n      relativeEntries.push(entry);\n    },\n    clone: function () {\n      return cloneTo(constructStack());\n    },\n    use: function (plugin) {\n      plugin.applyToStack(stack);\n    },\n    remove: function (toRemove) {\n      if (typeof toRemove === \"string\") return removeByName(toRemove);else return removeByReference(toRemove);\n    },\n    removeByTag: function (toRemove) {\n      var isRemoved = false;\n      var filterCb = function (entry) {\n        var tags = entry.tags,\n          name = entry.name;\n        if (tags && tags.includes(toRemove)) {\n          if (name) entriesNameSet.delete(name);\n          isRemoved = true;\n          return false;\n        }\n        return true;\n      };\n      absoluteEntries = absoluteEntries.filter(filterCb);\n      relativeEntries = relativeEntries.filter(filterCb);\n      return isRemoved;\n    },\n    concat: function (from) {\n      var cloned = cloneTo(constructStack());\n      cloned.use(from);\n      return cloned;\n    },\n    applyToStack: cloneTo,\n    resolve: function (handler, context) {\n      var e_1, _a;\n      try {\n        for (var _b = __values(getMiddlewareList().reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var middleware = _c.value;\n          handler = middleware(handler, context);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      return handler;\n    }\n  };\n  return stack;\n};\nvar stepWeights = {\n  initialize: 5,\n  serialize: 4,\n  build: 3,\n  finalizeRequest: 2,\n  deserialize: 1\n};\nvar priorityWeights = {\n  high: 3,\n  normal: 2,\n  low: 1\n};","map":{"version":3,"mappings":"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","names":["constructStack","absoluteEntries","relativeEntries","entriesNameSet","Set","sort","entries","a","b","step","stepWeights","priorityWeights","priority","removeByName","toRemove","isRemoved","filterCb","entry","name","delete","filter","removeByReference","middleware","cloneTo","toStack","forEach","add","addRelativeTo","expandRelativeMiddlewareList","from","expandedMiddlewareList","before","length","after","push","reverse","getMiddlewareList","normalizedAbsoluteEntries","normalizedRelativeEntries","normalizedEntriesNameMap","normalizedEntry","toMiddleware","undefined","Error","relation","mainChain","map","reduce","wholeList","expendedMiddlewareList","stack","options","override","has","toOverrideIndex","findIndex","toOverride","splice","clone","use","plugin","applyToStack","remove","removeByTag","tags","includes","concat","cloned","resolve","handler","context","initialize","serialize","build","finalizeRequest","deserialize","high","normal","low"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-sdk/middleware-stack/src/MiddlewareStack.ts"],"sourcesContent":["import {\n  AbsoluteLocation,\n  DeserializeHandler,\n  Handler,\n  HandlerExecutionContext,\n  HandlerOptions,\n  MiddlewareStack,\n  MiddlewareType,\n  Pluggable,\n  Priority,\n  RelativeLocation,\n  Step,\n} from \"@aws-sdk/types\";\n\nimport { AbsoluteMiddlewareEntry, MiddlewareEntry, Normalized, RelativeMiddlewareEntry } from \"./types\";\n\nexport const constructStack = <Input extends object, Output extends object>(): MiddlewareStack<Input, Output> => {\n  let absoluteEntries: AbsoluteMiddlewareEntry<Input, Output>[] = [];\n  let relativeEntries: RelativeMiddlewareEntry<Input, Output>[] = [];\n  const entriesNameSet: Set<string> = new Set();\n\n  const sort = <T extends AbsoluteMiddlewareEntry<Input, Output>>(entries: T[]): T[] =>\n    entries.sort(\n      (a, b) =>\n        stepWeights[b.step] - stepWeights[a.step] ||\n        priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]\n    );\n\n  const removeByName = (toRemove: string): boolean => {\n    let isRemoved = false;\n    const filterCb = (entry: MiddlewareEntry<Input, Output>): boolean => {\n      if (entry.name && entry.name === toRemove) {\n        isRemoved = true;\n        entriesNameSet.delete(toRemove);\n        return false;\n      }\n      return true;\n    };\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n\n  const removeByReference = (toRemove: MiddlewareType<Input, Output>): boolean => {\n    let isRemoved = false;\n    const filterCb = (entry: MiddlewareEntry<Input, Output>): boolean => {\n      if (entry.middleware === toRemove) {\n        isRemoved = true;\n        if (entry.name) entriesNameSet.delete(entry.name);\n        return false;\n      }\n      return true;\n    };\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n\n  const cloneTo = <InputType extends Input, OutputType extends Output>(\n    toStack: MiddlewareStack<InputType, OutputType>\n  ): MiddlewareStack<InputType, OutputType> => {\n    absoluteEntries.forEach((entry) => {\n      //@ts-ignore\n      toStack.add(entry.middleware, { ...entry });\n    });\n    relativeEntries.forEach((entry) => {\n      //@ts-ignore\n      toStack.addRelativeTo(entry.middleware, { ...entry });\n    });\n    return toStack;\n  };\n\n  const expandRelativeMiddlewareList = (\n    from: Normalized<MiddlewareEntry<Input, Output>, Input, Output>\n  ): MiddlewareEntry<Input, Output>[] => {\n    const expandedMiddlewareList: MiddlewareEntry<Input, Output>[] = [];\n    from.before.forEach((entry) => {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n      }\n    });\n    expandedMiddlewareList.push(from);\n    from.after.reverse().forEach((entry) => {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n      }\n    });\n    return expandedMiddlewareList;\n  };\n\n  /**\n   * Get a final list of middleware in the order of being executed in the resolved handler.\n   */\n  const getMiddlewareList = (): Array<MiddlewareType<Input, Output>> => {\n    const normalizedAbsoluteEntries: Normalized<AbsoluteMiddlewareEntry<Input, Output>, Input, Output>[] = [];\n    const normalizedRelativeEntries: Normalized<RelativeMiddlewareEntry<Input, Output>, Input, Output>[] = [];\n    const normalizedEntriesNameMap: {\n      [middlewareName: string]: Normalized<MiddlewareEntry<Input, Output>, Input, Output>;\n    } = {};\n\n    absoluteEntries.forEach((entry) => {\n      const normalizedEntry = {\n        ...entry,\n        before: [],\n        after: [],\n      };\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedAbsoluteEntries.push(normalizedEntry);\n    });\n\n    relativeEntries.forEach((entry) => {\n      const normalizedEntry = {\n        ...entry,\n        before: [],\n        after: [],\n      };\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedRelativeEntries.push(normalizedEntry);\n    });\n\n    normalizedRelativeEntries.forEach((entry) => {\n      if (entry.toMiddleware) {\n        const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n        if (toMiddleware === undefined) {\n          throw new Error(\n            `${entry.toMiddleware} is not found when adding ${entry.name || \"anonymous\"} middleware ${entry.relation} ${\n              entry.toMiddleware\n            }`\n          );\n        }\n        if (entry.relation === \"after\") {\n          toMiddleware.after.push(entry);\n        }\n        if (entry.relation === \"before\") {\n          toMiddleware.before.push(entry);\n        }\n      }\n    });\n\n    const mainChain = sort(normalizedAbsoluteEntries)\n      .map(expandRelativeMiddlewareList)\n      .reduce((wholeList, expendedMiddlewareList) => {\n        // TODO: Replace it with Array.flat();\n        wholeList.push(...expendedMiddlewareList);\n        return wholeList;\n      }, [] as MiddlewareEntry<Input, Output>[]);\n    return mainChain.map((entry) => entry.middleware);\n  };\n\n  const stack = {\n    add: (middleware: MiddlewareType<Input, Output>, options: HandlerOptions & AbsoluteLocation = {}) => {\n      const { name, override } = options;\n      const entry: AbsoluteMiddlewareEntry<Input, Output> = {\n        step: \"initialize\",\n        priority: \"normal\",\n        middleware,\n        ...options,\n      };\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(`Duplicate middleware name '${name}'`);\n          const toOverrideIndex = absoluteEntries.findIndex((entry) => entry.name === name);\n          const toOverride = absoluteEntries[toOverrideIndex];\n          if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {\n            throw new Error(\n              `\"${name}\" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be ` +\n                `overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`\n            );\n          }\n          absoluteEntries.splice(toOverrideIndex, 1);\n        }\n        entriesNameSet.add(name);\n      }\n      absoluteEntries.push(entry);\n    },\n\n    addRelativeTo: (middleware: MiddlewareType<Input, Output>, options: HandlerOptions & RelativeLocation) => {\n      const { name, override } = options;\n      const entry: RelativeMiddlewareEntry<Input, Output> = {\n        middleware,\n        ...options,\n      };\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(`Duplicate middleware name '${name}'`);\n          const toOverrideIndex = relativeEntries.findIndex((entry) => entry.name === name);\n          const toOverride = relativeEntries[toOverrideIndex];\n          if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n            throw new Error(\n              `\"${name}\" middleware ${toOverride.relation} \"${toOverride.toMiddleware}\" middleware cannot be overridden ` +\n                `by same-name middleware ${entry.relation} \"${entry.toMiddleware}\" middleware.`\n            );\n          }\n          relativeEntries.splice(toOverrideIndex, 1);\n        }\n        entriesNameSet.add(name);\n      }\n      relativeEntries.push(entry);\n    },\n\n    clone: () => cloneTo(constructStack<Input, Output>()),\n\n    use: (plugin: Pluggable<Input, Output>) => {\n      plugin.applyToStack(stack);\n    },\n\n    remove: (toRemove: MiddlewareType<Input, Output> | string): boolean => {\n      if (typeof toRemove === \"string\") return removeByName(toRemove);\n      else return removeByReference(toRemove);\n    },\n\n    removeByTag: (toRemove: string): boolean => {\n      let isRemoved = false;\n      const filterCb = (entry: MiddlewareEntry<Input, Output>): boolean => {\n        const { tags, name } = entry;\n        if (tags && tags.includes(toRemove)) {\n          if (name) entriesNameSet.delete(name);\n          isRemoved = true;\n          return false;\n        }\n        return true;\n      };\n      absoluteEntries = absoluteEntries.filter(filterCb);\n      relativeEntries = relativeEntries.filter(filterCb);\n      return isRemoved;\n    },\n\n    concat: <InputType extends Input, OutputType extends Output>(\n      from: MiddlewareStack<InputType, OutputType>\n    ): MiddlewareStack<InputType, OutputType> => {\n      const cloned = cloneTo(constructStack<InputType, OutputType>());\n      cloned.use(from);\n      return cloned;\n    },\n\n    applyToStack: cloneTo,\n\n    resolve: <InputType extends Input, OutputType extends Output>(\n      handler: DeserializeHandler<InputType, OutputType>,\n      context: HandlerExecutionContext\n    ): Handler<InputType, OutputType> => {\n      for (const middleware of getMiddlewareList().reverse()) {\n        handler = middleware(handler as Handler<Input, OutputType>, context) as any;\n      }\n      return handler as Handler<InputType, OutputType>;\n    },\n  };\n  return stack;\n};\n\nconst stepWeights: { [key in Step]: number } = {\n  initialize: 5,\n  serialize: 4,\n  build: 3,\n  finalizeRequest: 2,\n  deserialize: 1,\n};\n\nconst priorityWeights: { [key in Priority]: number } = {\n  high: 3,\n  normal: 2,\n  low: 1,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}