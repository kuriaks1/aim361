{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { extendedEncodeURIComponent as __extendedEncodeURIComponent } from \"@aws-sdk/smithy-client\";\nexport var serializeAws_restJson1DeleteLexiconCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/lexicons/{Name}\";\n          if (input.Name !== undefined) {\n            labelValue = input.Name;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Name.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Name.\");\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DescribeVoicesCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/voices\";\n          query = __assign(__assign(__assign(__assign({}, input.Engine !== undefined && {\n            Engine: input.Engine\n          }), input.LanguageCode !== undefined && {\n            LanguageCode: input.LanguageCode\n          }), input.IncludeAdditionalLanguageCodes !== undefined && {\n            IncludeAdditionalLanguageCodes: input.IncludeAdditionalLanguageCodes.toString()\n          }), input.NextToken !== undefined && {\n            NextToken: input.NextToken\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetLexiconCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/lexicons/{Name}\";\n          if (input.Name !== undefined) {\n            labelValue = input.Name;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Name.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Name.\");\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetSpeechSynthesisTaskCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/synthesisTasks/{TaskId}\";\n          if (input.TaskId !== undefined) {\n            labelValue = input.TaskId;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: TaskId.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{TaskId}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: TaskId.\");\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListLexiconsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/lexicons\";\n          query = __assign({}, input.NextToken !== undefined && {\n            NextToken: input.NextToken\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListSpeechSynthesisTasksCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/synthesisTasks\";\n          query = __assign(__assign(__assign({}, input.MaxResults !== undefined && {\n            MaxResults: input.MaxResults.toString()\n          }), input.NextToken !== undefined && {\n            NextToken: input.NextToken\n          }), input.Status !== undefined && {\n            Status: input.Status\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1PutLexiconCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"/v1/lexicons/{Name}\";\n          if (input.Name !== undefined) {\n            labelValue = input.Name;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Name.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Name.\");\n          }\n          body = JSON.stringify(__assign({}, input.Content !== undefined && input.Content !== null && {\n            Content: input.Content\n          }));\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1StartSpeechSynthesisTaskCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"/v1/synthesisTasks\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.Engine !== undefined && input.Engine !== null && {\n            Engine: input.Engine\n          }), input.LanguageCode !== undefined && input.LanguageCode !== null && {\n            LanguageCode: input.LanguageCode\n          }), input.LexiconNames !== undefined && input.LexiconNames !== null && {\n            LexiconNames: serializeAws_restJson1LexiconNameList(input.LexiconNames, context)\n          }), input.OutputFormat !== undefined && input.OutputFormat !== null && {\n            OutputFormat: input.OutputFormat\n          }), input.OutputS3BucketName !== undefined && input.OutputS3BucketName !== null && {\n            OutputS3BucketName: input.OutputS3BucketName\n          }), input.OutputS3KeyPrefix !== undefined && input.OutputS3KeyPrefix !== null && {\n            OutputS3KeyPrefix: input.OutputS3KeyPrefix\n          }), input.SampleRate !== undefined && input.SampleRate !== null && {\n            SampleRate: input.SampleRate\n          }), input.SnsTopicArn !== undefined && input.SnsTopicArn !== null && {\n            SnsTopicArn: input.SnsTopicArn\n          }), input.SpeechMarkTypes !== undefined && input.SpeechMarkTypes !== null && {\n            SpeechMarkTypes: serializeAws_restJson1SpeechMarkTypeList(input.SpeechMarkTypes, context)\n          }), input.Text !== undefined && input.Text !== null && {\n            Text: input.Text\n          }), input.TextType !== undefined && input.TextType !== null && {\n            TextType: input.TextType\n          }), input.VoiceId !== undefined && input.VoiceId !== null && {\n            VoiceId: input.VoiceId\n          }));\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1SynthesizeSpeechCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"/v1/speech\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.Engine !== undefined && input.Engine !== null && {\n            Engine: input.Engine\n          }), input.LanguageCode !== undefined && input.LanguageCode !== null && {\n            LanguageCode: input.LanguageCode\n          }), input.LexiconNames !== undefined && input.LexiconNames !== null && {\n            LexiconNames: serializeAws_restJson1LexiconNameList(input.LexiconNames, context)\n          }), input.OutputFormat !== undefined && input.OutputFormat !== null && {\n            OutputFormat: input.OutputFormat\n          }), input.SampleRate !== undefined && input.SampleRate !== null && {\n            SampleRate: input.SampleRate\n          }), input.SpeechMarkTypes !== undefined && input.SpeechMarkTypes !== null && {\n            SpeechMarkTypes: serializeAws_restJson1SpeechMarkTypeList(input.SpeechMarkTypes, context)\n          }), input.Text !== undefined && input.Text !== null && {\n            Text: input.Text\n          }), input.TextType !== undefined && input.TextType !== null && {\n            TextType: input.TextType\n          }), input.VoiceId !== undefined && input.VoiceId !== null && {\n            VoiceId: input.VoiceId\n          }));\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1DeleteLexiconCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1DeleteLexiconCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1DeleteLexiconCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n    var _e;\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"LexiconNotFoundException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.polly#LexiconNotFoundException\":\n              return [3 /*break*/, 2];\n            case \"ServiceFailureException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3 /*break*/, 4];\n          }\n          return [3 /*break*/, 6];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1DescribeVoicesCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1DescribeVoicesCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            NextToken: undefined,\n            Voices: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = data.NextToken;\n          }\n          if (data.Voices !== undefined && data.Voices !== null) {\n            contents.Voices = deserializeAws_restJson1VoiceList(data.Voices, context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1DescribeVoicesCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n    var _e;\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"InvalidNextTokenException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.polly#InvalidNextTokenException\":\n              return [3 /*break*/, 2];\n            case \"ServiceFailureException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3 /*break*/, 4];\n          }\n          return [3 /*break*/, 6];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1GetLexiconCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1GetLexiconCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Lexicon: undefined,\n            LexiconAttributes: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.Lexicon !== undefined && data.Lexicon !== null) {\n            contents.Lexicon = deserializeAws_restJson1Lexicon(data.Lexicon, context);\n          }\n          if (data.LexiconAttributes !== undefined && data.LexiconAttributes !== null) {\n            contents.LexiconAttributes = deserializeAws_restJson1LexiconAttributes(data.LexiconAttributes, context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1GetLexiconCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n    var _e;\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"LexiconNotFoundException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.polly#LexiconNotFoundException\":\n              return [3 /*break*/, 2];\n            case \"ServiceFailureException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3 /*break*/, 4];\n          }\n          return [3 /*break*/, 6];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1GetSpeechSynthesisTaskCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1GetSpeechSynthesisTaskCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            SynthesisTask: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n            contents.SynthesisTask = deserializeAws_restJson1SynthesisTask(data.SynthesisTask, context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1GetSpeechSynthesisTaskCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;\n    var _f;\n    return __generator(this, function (_g) {\n      switch (_g.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _f = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"InvalidTaskIdException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.polly#InvalidTaskIdException\":\n              return [3 /*break*/, 2];\n            case \"ServiceFailureException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3 /*break*/, 4];\n            case \"SynthesisTaskNotFoundException\":\n              return [3 /*break*/, 6];\n            case \"com.amazonaws.polly#SynthesisTaskNotFoundException\":\n              return [3 /*break*/, 6];\n          }\n          return [3 /*break*/, 8];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidTaskIdExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 9];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 9];\n        case 6:\n          _e = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 9];\n        case 8:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _g.label = 9;\n        case 9:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1ListLexiconsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1ListLexiconsCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Lexicons: undefined,\n            NextToken: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.Lexicons !== undefined && data.Lexicons !== null) {\n            contents.Lexicons = deserializeAws_restJson1LexiconDescriptionList(data.Lexicons, context);\n          }\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = data.NextToken;\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1ListLexiconsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n    var _e;\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"InvalidNextTokenException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.polly#InvalidNextTokenException\":\n              return [3 /*break*/, 2];\n            case \"ServiceFailureException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3 /*break*/, 4];\n          }\n          return [3 /*break*/, 6];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1ListSpeechSynthesisTasksCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1ListSpeechSynthesisTasksCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            NextToken: undefined,\n            SynthesisTasks: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = data.NextToken;\n          }\n          if (data.SynthesisTasks !== undefined && data.SynthesisTasks !== null) {\n            contents.SynthesisTasks = deserializeAws_restJson1SynthesisTasks(data.SynthesisTasks, context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1ListSpeechSynthesisTasksCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n    var _e;\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"InvalidNextTokenException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.polly#InvalidNextTokenException\":\n              return [3 /*break*/, 2];\n            case \"ServiceFailureException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3 /*break*/, 4];\n          }\n          return [3 /*break*/, 6];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1PutLexiconCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1PutLexiconCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1PutLexiconCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;\n    var _k;\n    return __generator(this, function (_l) {\n      switch (_l.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _k = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"InvalidLexiconException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.polly#InvalidLexiconException\":\n              return [3 /*break*/, 2];\n            case \"LexiconSizeExceededException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.polly#LexiconSizeExceededException\":\n              return [3 /*break*/, 4];\n            case \"MaxLexemeLengthExceededException\":\n              return [3 /*break*/, 6];\n            case \"com.amazonaws.polly#MaxLexemeLengthExceededException\":\n              return [3 /*break*/, 6];\n            case \"MaxLexiconsNumberExceededException\":\n              return [3 /*break*/, 8];\n            case \"com.amazonaws.polly#MaxLexiconsNumberExceededException\":\n              return [3 /*break*/, 8];\n            case \"ServiceFailureException\":\n              return [3 /*break*/, 10];\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3 /*break*/, 10];\n            case \"UnsupportedPlsAlphabetException\":\n              return [3 /*break*/, 12];\n            case \"com.amazonaws.polly#UnsupportedPlsAlphabetException\":\n              return [3 /*break*/, 12];\n            case \"UnsupportedPlsLanguageException\":\n              return [3 /*break*/, 14];\n            case \"com.amazonaws.polly#UnsupportedPlsLanguageException\":\n              return [3 /*break*/, 14];\n          }\n          return [3 /*break*/, 16];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidLexiconExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 17];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LexiconSizeExceededExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 17];\n        case 6:\n          _e = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse(parsedOutput, context)];\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 17];\n        case 8:\n          _f = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse(parsedOutput, context)];\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 17];\n        case 10:\n          _g = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 17];\n        case 12:\n          _h = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse(parsedOutput, context)];\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 17];\n        case 14:\n          _j = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse(parsedOutput, context)];\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 17];\n        case 16:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _l.label = 17;\n        case 17:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1StartSpeechSynthesisTaskCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1StartSpeechSynthesisTaskCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            SynthesisTask: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n            contents.SynthesisTask = deserializeAws_restJson1SynthesisTask(data.SynthesisTask, context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1StartSpeechSynthesisTaskCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, parsedBody, message;\n    var _q;\n    return __generator(this, function (_r) {\n      switch (_r.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _q = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_q.body = _r.sent(), _q)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"EngineNotSupportedException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.polly#EngineNotSupportedException\":\n              return [3 /*break*/, 2];\n            case \"InvalidS3BucketException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.polly#InvalidS3BucketException\":\n              return [3 /*break*/, 4];\n            case \"InvalidS3KeyException\":\n              return [3 /*break*/, 6];\n            case \"com.amazonaws.polly#InvalidS3KeyException\":\n              return [3 /*break*/, 6];\n            case \"InvalidSampleRateException\":\n              return [3 /*break*/, 8];\n            case \"com.amazonaws.polly#InvalidSampleRateException\":\n              return [3 /*break*/, 8];\n            case \"InvalidSnsTopicArnException\":\n              return [3 /*break*/, 10];\n            case \"com.amazonaws.polly#InvalidSnsTopicArnException\":\n              return [3 /*break*/, 10];\n            case \"InvalidSsmlException\":\n              return [3 /*break*/, 12];\n            case \"com.amazonaws.polly#InvalidSsmlException\":\n              return [3 /*break*/, 12];\n            case \"LanguageNotSupportedException\":\n              return [3 /*break*/, 14];\n            case \"com.amazonaws.polly#LanguageNotSupportedException\":\n              return [3 /*break*/, 14];\n            case \"LexiconNotFoundException\":\n              return [3 /*break*/, 16];\n            case \"com.amazonaws.polly#LexiconNotFoundException\":\n              return [3 /*break*/, 16];\n            case \"MarksNotSupportedForFormatException\":\n              return [3 /*break*/, 18];\n            case \"com.amazonaws.polly#MarksNotSupportedForFormatException\":\n              return [3 /*break*/, 18];\n            case \"ServiceFailureException\":\n              return [3 /*break*/, 20];\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3 /*break*/, 20];\n            case \"SsmlMarksNotSupportedForTextTypeException\":\n              return [3 /*break*/, 22];\n            case \"com.amazonaws.polly#SsmlMarksNotSupportedForTextTypeException\":\n              return [3 /*break*/, 22];\n            case \"TextLengthExceededException\":\n              return [3 /*break*/, 24];\n            case \"com.amazonaws.polly#TextLengthExceededException\":\n              return [3 /*break*/, 24];\n          }\n          return [3 /*break*/, 26];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1EngineNotSupportedExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidS3BucketExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 6:\n          _e = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidS3KeyExceptionResponse(parsedOutput, context)];\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 8:\n          _f = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidSampleRateExceptionResponse(parsedOutput, context)];\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 10:\n          _g = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse(parsedOutput, context)];\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 12:\n          _h = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidSsmlExceptionResponse(parsedOutput, context)];\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 14:\n          _j = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LanguageNotSupportedExceptionResponse(parsedOutput, context)];\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 16:\n          _k = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n        case 17:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 18:\n          _l = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)];\n        case 19:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 20:\n          _m = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n        case 21:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 22:\n          _o = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)];\n        case 23:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 24:\n          _p = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1TextLengthExceededExceptionResponse(parsedOutput, context)];\n        case 25:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 26:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _r.label = 27;\n        case 27:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1SynthesizeSpeechCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return [2 /*return*/, deserializeAws_restJson1SynthesizeSpeechCommandError(output, context)];\n      }\n      contents = {\n        $metadata: deserializeMetadata(output),\n        AudioStream: undefined,\n        ContentType: undefined,\n        RequestCharacters: undefined\n      };\n      if (output.headers[\"content-type\"] !== undefined) {\n        contents.ContentType = output.headers[\"content-type\"];\n      }\n      if (output.headers[\"x-amzn-requestcharacters\"] !== undefined) {\n        contents.RequestCharacters = parseInt(output.headers[\"x-amzn-requestcharacters\"], 10);\n      }\n      data = output.body;\n      contents.AudioStream = data;\n      return [2 /*return*/, Promise.resolve(contents)];\n    });\n  });\n};\nvar deserializeAws_restJson1SynthesizeSpeechCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, parsedBody, message;\n    var _m;\n    return __generator(this, function (_o) {\n      switch (_o.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _m = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_m.body = _o.sent(), _m)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"EngineNotSupportedException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.polly#EngineNotSupportedException\":\n              return [3 /*break*/, 2];\n            case \"InvalidSampleRateException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.polly#InvalidSampleRateException\":\n              return [3 /*break*/, 4];\n            case \"InvalidSsmlException\":\n              return [3 /*break*/, 6];\n            case \"com.amazonaws.polly#InvalidSsmlException\":\n              return [3 /*break*/, 6];\n            case \"LanguageNotSupportedException\":\n              return [3 /*break*/, 8];\n            case \"com.amazonaws.polly#LanguageNotSupportedException\":\n              return [3 /*break*/, 8];\n            case \"LexiconNotFoundException\":\n              return [3 /*break*/, 10];\n            case \"com.amazonaws.polly#LexiconNotFoundException\":\n              return [3 /*break*/, 10];\n            case \"MarksNotSupportedForFormatException\":\n              return [3 /*break*/, 12];\n            case \"com.amazonaws.polly#MarksNotSupportedForFormatException\":\n              return [3 /*break*/, 12];\n            case \"ServiceFailureException\":\n              return [3 /*break*/, 14];\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3 /*break*/, 14];\n            case \"SsmlMarksNotSupportedForTextTypeException\":\n              return [3 /*break*/, 16];\n            case \"com.amazonaws.polly#SsmlMarksNotSupportedForTextTypeException\":\n              return [3 /*break*/, 16];\n            case \"TextLengthExceededException\":\n              return [3 /*break*/, 18];\n            case \"com.amazonaws.polly#TextLengthExceededException\":\n              return [3 /*break*/, 18];\n          }\n          return [3 /*break*/, 20];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1EngineNotSupportedExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 21];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidSampleRateExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 21];\n        case 6:\n          _e = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidSsmlExceptionResponse(parsedOutput, context)];\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 21];\n        case 8:\n          _f = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LanguageNotSupportedExceptionResponse(parsedOutput, context)];\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 21];\n        case 10:\n          _g = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 21];\n        case 12:\n          _h = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)];\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 21];\n        case 14:\n          _j = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 21];\n        case 16:\n          _k = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)];\n        case 17:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 21];\n        case 18:\n          _l = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1TextLengthExceededExceptionResponse(parsedOutput, context)];\n        case 19:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 21];\n        case 20:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _o.label = 21;\n        case 21:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1EngineNotSupportedExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"EngineNotSupportedException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1InvalidLexiconExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidLexiconException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1InvalidNextTokenExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidNextTokenException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1InvalidS3BucketExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidS3BucketException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1InvalidS3KeyExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidS3KeyException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1InvalidSampleRateExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidSampleRateException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidSnsTopicArnException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1InvalidSsmlExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidSsmlException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1InvalidTaskIdExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidTaskIdException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1LanguageNotSupportedExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LanguageNotSupportedException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1LexiconNotFoundExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LexiconNotFoundException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1LexiconSizeExceededExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LexiconSizeExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"MarksNotSupportedForFormatException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"MaxLexemeLengthExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"MaxLexiconsNumberExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1ServiceFailureExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"ServiceFailureException\",\n        $fault: \"server\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"SsmlMarksNotSupportedForTextTypeException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"SynthesisTaskNotFoundException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1TextLengthExceededExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"TextLengthExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"UnsupportedPlsAlphabetException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"UnsupportedPlsLanguageException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar serializeAws_restJson1LexiconNameList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return entry;\n  });\n};\nvar serializeAws_restJson1SpeechMarkTypeList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return entry;\n  });\n};\nvar deserializeAws_restJson1EngineList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return entry;\n  });\n};\nvar deserializeAws_restJson1LanguageCodeList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return entry;\n  });\n};\nvar deserializeAws_restJson1Lexicon = function (output, context) {\n  return {\n    Content: output.Content !== undefined && output.Content !== null ? output.Content : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined\n  };\n};\nvar deserializeAws_restJson1LexiconAttributes = function (output, context) {\n  return {\n    Alphabet: output.Alphabet !== undefined && output.Alphabet !== null ? output.Alphabet : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LastModified: output.LastModified !== undefined && output.LastModified !== null ? new Date(Math.round(output.LastModified * 1000)) : undefined,\n    LexemesCount: output.LexemesCount !== undefined && output.LexemesCount !== null ? output.LexemesCount : undefined,\n    LexiconArn: output.LexiconArn !== undefined && output.LexiconArn !== null ? output.LexiconArn : undefined,\n    Size: output.Size !== undefined && output.Size !== null ? output.Size : undefined\n  };\n};\nvar deserializeAws_restJson1LexiconDescription = function (output, context) {\n  return {\n    Attributes: output.Attributes !== undefined && output.Attributes !== null ? deserializeAws_restJson1LexiconAttributes(output.Attributes, context) : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined\n  };\n};\nvar deserializeAws_restJson1LexiconDescriptionList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1LexiconDescription(entry, context);\n  });\n};\nvar deserializeAws_restJson1LexiconNameList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return entry;\n  });\n};\nvar deserializeAws_restJson1SpeechMarkTypeList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return entry;\n  });\n};\nvar deserializeAws_restJson1SynthesisTask = function (output, context) {\n  return {\n    CreationTime: output.CreationTime !== undefined && output.CreationTime !== null ? new Date(Math.round(output.CreationTime * 1000)) : undefined,\n    Engine: output.Engine !== undefined && output.Engine !== null ? output.Engine : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LexiconNames: output.LexiconNames !== undefined && output.LexiconNames !== null ? deserializeAws_restJson1LexiconNameList(output.LexiconNames, context) : undefined,\n    OutputFormat: output.OutputFormat !== undefined && output.OutputFormat !== null ? output.OutputFormat : undefined,\n    OutputUri: output.OutputUri !== undefined && output.OutputUri !== null ? output.OutputUri : undefined,\n    RequestCharacters: output.RequestCharacters !== undefined && output.RequestCharacters !== null ? output.RequestCharacters : undefined,\n    SampleRate: output.SampleRate !== undefined && output.SampleRate !== null ? output.SampleRate : undefined,\n    SnsTopicArn: output.SnsTopicArn !== undefined && output.SnsTopicArn !== null ? output.SnsTopicArn : undefined,\n    SpeechMarkTypes: output.SpeechMarkTypes !== undefined && output.SpeechMarkTypes !== null ? deserializeAws_restJson1SpeechMarkTypeList(output.SpeechMarkTypes, context) : undefined,\n    TaskId: output.TaskId !== undefined && output.TaskId !== null ? output.TaskId : undefined,\n    TaskStatus: output.TaskStatus !== undefined && output.TaskStatus !== null ? output.TaskStatus : undefined,\n    TaskStatusReason: output.TaskStatusReason !== undefined && output.TaskStatusReason !== null ? output.TaskStatusReason : undefined,\n    TextType: output.TextType !== undefined && output.TextType !== null ? output.TextType : undefined,\n    VoiceId: output.VoiceId !== undefined && output.VoiceId !== null ? output.VoiceId : undefined\n  };\n};\nvar deserializeAws_restJson1SynthesisTasks = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1SynthesisTask(entry, context);\n  });\n};\nvar deserializeAws_restJson1Voice = function (output, context) {\n  return {\n    AdditionalLanguageCodes: output.AdditionalLanguageCodes !== undefined && output.AdditionalLanguageCodes !== null ? deserializeAws_restJson1LanguageCodeList(output.AdditionalLanguageCodes, context) : undefined,\n    Gender: output.Gender !== undefined && output.Gender !== null ? output.Gender : undefined,\n    Id: output.Id !== undefined && output.Id !== null ? output.Id : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LanguageName: output.LanguageName !== undefined && output.LanguageName !== null ? output.LanguageName : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,\n    SupportedEngines: output.SupportedEngines !== undefined && output.SupportedEngines !== null ? deserializeAws_restJson1EngineList(output.SupportedEngines, context) : undefined\n  };\n};\nvar deserializeAws_restJson1VoiceList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1Voice(entry, context);\n  });\n};\nvar deserializeMetadata = function (output) {\n  var _a;\n  return {\n    httpStatusCode: output.statusCode,\n    requestId: (_a = output.headers[\"x-amzn-requestid\"]) !== null && _a !== void 0 ? _a : output.headers[\"x-amzn-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"]\n  };\n};\n// Collect low-level response body stream to Uint8Array.\nvar collectBody = function (streamBody, context) {\n  if (streamBody === void 0) {\n    streamBody = new Uint8Array();\n  }\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n// Encode Uint8Array data into string with utf-8.\nvar collectBodyString = function (streamBody, context) {\n  return collectBody(streamBody, context).then(function (body) {\n    return context.utf8Encoder(body);\n  });\n};\nvar isSerializableHeaderValue = function (value) {\n  return value !== undefined && value !== null && value !== \"\" && (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n};\nvar parseBody = function (streamBody, context) {\n  return collectBodyString(streamBody, context).then(function (encoded) {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n    return {};\n  });\n};\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\nvar loadRestJsonErrorCode = function (output, data) {\n  var findKey = function (object, key) {\n    return Object.keys(object).find(function (k) {\n      return k.toLowerCase() === key.toLowerCase();\n    });\n  };\n  var sanitizeErrorCode = function (rawValue) {\n    var cleanValue = rawValue;\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n    return cleanValue;\n  };\n  var headerKey = findKey(output.headers, \"x-amzn-errortype\");\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n  return \"\";\n};","map":{"version":3,"mappings":"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","names":["HttpRequest","__HttpRequest","extendedEncodeURIComponent","__extendedEncodeURIComponent","serializeAws_restJson1DeleteLexiconCommand","input","context","headers","resolvedPath","Name","undefined","labelValue","length","Error","replace","endpoint","_a","_c","hostname","_b","protocol","port","method","path","body","serializeAws_restJson1DescribeVoicesCommand","query","Engine","LanguageCode","IncludeAdditionalLanguageCodes","toString","NextToken","serializeAws_restJson1GetLexiconCommand","serializeAws_restJson1GetSpeechSynthesisTaskCommand","TaskId","serializeAws_restJson1ListLexiconsCommand","serializeAws_restJson1ListSpeechSynthesisTasksCommand","MaxResults","Status","serializeAws_restJson1PutLexiconCommand","JSON","stringify","Content","serializeAws_restJson1StartSpeechSynthesisTaskCommand","LexiconNames","serializeAws_restJson1LexiconNameList","OutputFormat","OutputS3BucketName","OutputS3KeyPrefix","SampleRate","SnsTopicArn","SpeechMarkTypes","serializeAws_restJson1SpeechMarkTypeList","Text","TextType","VoiceId","serializeAws_restJson1SynthesizeSpeechCommand","deserializeAws_restJson1DeleteLexiconCommand","output","statusCode","deserializeAws_restJson1DeleteLexiconCommandError","contents","$metadata","deserializeMetadata","collectBody","Promise","resolve","parseBody","parsedOutput","_e","_f","errorCode","loadRestJsonErrorCode","deserializeAws_restJson1LexiconNotFoundExceptionResponse","response","name","deserializeAws_restJson1ServiceFailureExceptionResponse","parsedBody","code","Code","__assign","message","Message","$fault","reject","Object","assign","deserializeAws_restJson1DescribeVoicesCommand","deserializeAws_restJson1DescribeVoicesCommandError","Voices","data","deserializeAws_restJson1VoiceList","deserializeAws_restJson1InvalidNextTokenExceptionResponse","deserializeAws_restJson1GetLexiconCommand","deserializeAws_restJson1GetLexiconCommandError","Lexicon","LexiconAttributes","deserializeAws_restJson1Lexicon","deserializeAws_restJson1LexiconAttributes","deserializeAws_restJson1GetSpeechSynthesisTaskCommand","deserializeAws_restJson1GetSpeechSynthesisTaskCommandError","SynthesisTask","deserializeAws_restJson1SynthesisTask","_g","deserializeAws_restJson1InvalidTaskIdExceptionResponse","deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse","deserializeAws_restJson1ListLexiconsCommand","deserializeAws_restJson1ListLexiconsCommandError","Lexicons","deserializeAws_restJson1LexiconDescriptionList","deserializeAws_restJson1ListSpeechSynthesisTasksCommand","deserializeAws_restJson1ListSpeechSynthesisTasksCommandError","SynthesisTasks","deserializeAws_restJson1SynthesisTasks","deserializeAws_restJson1PutLexiconCommand","deserializeAws_restJson1PutLexiconCommandError","_k","_l","deserializeAws_restJson1InvalidLexiconExceptionResponse","deserializeAws_restJson1LexiconSizeExceededExceptionResponse","deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse","deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse","deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse","deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse","deserializeAws_restJson1StartSpeechSynthesisTaskCommand","deserializeAws_restJson1StartSpeechSynthesisTaskCommandError","_q","_r","deserializeAws_restJson1EngineNotSupportedExceptionResponse","deserializeAws_restJson1InvalidS3BucketExceptionResponse","deserializeAws_restJson1InvalidS3KeyExceptionResponse","deserializeAws_restJson1InvalidSampleRateExceptionResponse","deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse","deserializeAws_restJson1InvalidSsmlExceptionResponse","deserializeAws_restJson1LanguageNotSupportedExceptionResponse","deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse","deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse","deserializeAws_restJson1TextLengthExceededExceptionResponse","deserializeAws_restJson1SynthesizeSpeechCommand","deserializeAws_restJson1SynthesizeSpeechCommandError","AudioStream","ContentType","RequestCharacters","parseInt","_m","_o","filter","e","map","entry","deserializeAws_restJson1EngineList","deserializeAws_restJson1LanguageCodeList","Alphabet","LastModified","Date","Math","round","LexemesCount","LexiconArn","Size","deserializeAws_restJson1LexiconDescription","Attributes","deserializeAws_restJson1LexiconNameList","deserializeAws_restJson1SpeechMarkTypeList","CreationTime","OutputUri","TaskStatus","TaskStatusReason","deserializeAws_restJson1Voice","AdditionalLanguageCodes","Gender","Id","LanguageName","SupportedEngines","httpStatusCode","requestId","extendedRequestId","cfId","streamBody","Uint8Array","streamCollector","collectBodyString","then","utf8Encoder","isSerializableHeaderValue","value","getOwnPropertyNames","includes","size","encoded","parse","findKey","object","key","keys","find","k","toLowerCase","sanitizeErrorCode","rawValue","cleanValue","indexOf","split","headerKey"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-sdk/client-polly/protocols/Aws_restJson1.ts"],"sourcesContent":["import { DeleteLexiconCommandInput, DeleteLexiconCommandOutput } from \"../commands/DeleteLexiconCommand\";\nimport { DescribeVoicesCommandInput, DescribeVoicesCommandOutput } from \"../commands/DescribeVoicesCommand\";\nimport { GetLexiconCommandInput, GetLexiconCommandOutput } from \"../commands/GetLexiconCommand\";\nimport {\n  GetSpeechSynthesisTaskCommandInput,\n  GetSpeechSynthesisTaskCommandOutput,\n} from \"../commands/GetSpeechSynthesisTaskCommand\";\nimport { ListLexiconsCommandInput, ListLexiconsCommandOutput } from \"../commands/ListLexiconsCommand\";\nimport {\n  ListSpeechSynthesisTasksCommandInput,\n  ListSpeechSynthesisTasksCommandOutput,\n} from \"../commands/ListSpeechSynthesisTasksCommand\";\nimport { PutLexiconCommandInput, PutLexiconCommandOutput } from \"../commands/PutLexiconCommand\";\nimport {\n  StartSpeechSynthesisTaskCommandInput,\n  StartSpeechSynthesisTaskCommandOutput,\n} from \"../commands/StartSpeechSynthesisTaskCommand\";\nimport { SynthesizeSpeechCommandInput, SynthesizeSpeechCommandOutput } from \"../commands/SynthesizeSpeechCommand\";\nimport {\n  Engine,\n  EngineNotSupportedException,\n  InvalidLexiconException,\n  InvalidNextTokenException,\n  InvalidS3BucketException,\n  InvalidS3KeyException,\n  InvalidSampleRateException,\n  InvalidSnsTopicArnException,\n  InvalidSsmlException,\n  InvalidTaskIdException,\n  LanguageCode,\n  LanguageNotSupportedException,\n  Lexicon,\n  LexiconAttributes,\n  LexiconDescription,\n  LexiconNotFoundException,\n  LexiconSizeExceededException,\n  MarksNotSupportedForFormatException,\n  MaxLexemeLengthExceededException,\n  MaxLexiconsNumberExceededException,\n  ServiceFailureException,\n  SpeechMarkType,\n  SsmlMarksNotSupportedForTextTypeException,\n  SynthesisTask,\n  SynthesisTaskNotFoundException,\n  TextLengthExceededException,\n  UnsupportedPlsAlphabetException,\n  UnsupportedPlsLanguageException,\n  Voice,\n} from \"../models/models_0\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport {\n  SmithyException as __SmithyException,\n  extendedEncodeURIComponent as __extendedEncodeURIComponent,\n} from \"@aws-sdk/smithy-client\";\nimport {\n  Endpoint as __Endpoint,\n  MetadataBearer as __MetadataBearer,\n  ResponseMetadata as __ResponseMetadata,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport const serializeAws_restJson1DeleteLexiconCommand = async (\n  input: DeleteLexiconCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/lexicons/{Name}\";\n  if (input.Name !== undefined) {\n    const labelValue: string = input.Name;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Name.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Name.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1DescribeVoicesCommand = async (\n  input: DescribeVoicesCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/voices\";\n  const query: any = {\n    ...(input.Engine !== undefined && { Engine: input.Engine }),\n    ...(input.LanguageCode !== undefined && { LanguageCode: input.LanguageCode }),\n    ...(input.IncludeAdditionalLanguageCodes !== undefined && {\n      IncludeAdditionalLanguageCodes: input.IncludeAdditionalLanguageCodes.toString(),\n    }),\n    ...(input.NextToken !== undefined && { NextToken: input.NextToken }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1GetLexiconCommand = async (\n  input: GetLexiconCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/lexicons/{Name}\";\n  if (input.Name !== undefined) {\n    const labelValue: string = input.Name;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Name.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Name.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1GetSpeechSynthesisTaskCommand = async (\n  input: GetSpeechSynthesisTaskCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/synthesisTasks/{TaskId}\";\n  if (input.TaskId !== undefined) {\n    const labelValue: string = input.TaskId;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: TaskId.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{TaskId}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: TaskId.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1ListLexiconsCommand = async (\n  input: ListLexiconsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/lexicons\";\n  const query: any = {\n    ...(input.NextToken !== undefined && { NextToken: input.NextToken }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1ListSpeechSynthesisTasksCommand = async (\n  input: ListSpeechSynthesisTasksCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/synthesisTasks\";\n  const query: any = {\n    ...(input.MaxResults !== undefined && { MaxResults: input.MaxResults.toString() }),\n    ...(input.NextToken !== undefined && { NextToken: input.NextToken }),\n    ...(input.Status !== undefined && { Status: input.Status }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1PutLexiconCommand = async (\n  input: PutLexiconCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/v1/lexicons/{Name}\";\n  if (input.Name !== undefined) {\n    const labelValue: string = input.Name;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Name.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Name.\");\n  }\n  let body: any;\n  body = JSON.stringify({\n    ...(input.Content !== undefined && input.Content !== null && { Content: input.Content }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1StartSpeechSynthesisTaskCommand = async (\n  input: StartSpeechSynthesisTaskCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/v1/synthesisTasks\";\n  let body: any;\n  body = JSON.stringify({\n    ...(input.Engine !== undefined && input.Engine !== null && { Engine: input.Engine }),\n    ...(input.LanguageCode !== undefined && input.LanguageCode !== null && { LanguageCode: input.LanguageCode }),\n    ...(input.LexiconNames !== undefined &&\n      input.LexiconNames !== null && {\n        LexiconNames: serializeAws_restJson1LexiconNameList(input.LexiconNames, context),\n      }),\n    ...(input.OutputFormat !== undefined && input.OutputFormat !== null && { OutputFormat: input.OutputFormat }),\n    ...(input.OutputS3BucketName !== undefined &&\n      input.OutputS3BucketName !== null && { OutputS3BucketName: input.OutputS3BucketName }),\n    ...(input.OutputS3KeyPrefix !== undefined &&\n      input.OutputS3KeyPrefix !== null && { OutputS3KeyPrefix: input.OutputS3KeyPrefix }),\n    ...(input.SampleRate !== undefined && input.SampleRate !== null && { SampleRate: input.SampleRate }),\n    ...(input.SnsTopicArn !== undefined && input.SnsTopicArn !== null && { SnsTopicArn: input.SnsTopicArn }),\n    ...(input.SpeechMarkTypes !== undefined &&\n      input.SpeechMarkTypes !== null && {\n        SpeechMarkTypes: serializeAws_restJson1SpeechMarkTypeList(input.SpeechMarkTypes, context),\n      }),\n    ...(input.Text !== undefined && input.Text !== null && { Text: input.Text }),\n    ...(input.TextType !== undefined && input.TextType !== null && { TextType: input.TextType }),\n    ...(input.VoiceId !== undefined && input.VoiceId !== null && { VoiceId: input.VoiceId }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1SynthesizeSpeechCommand = async (\n  input: SynthesizeSpeechCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/v1/speech\";\n  let body: any;\n  body = JSON.stringify({\n    ...(input.Engine !== undefined && input.Engine !== null && { Engine: input.Engine }),\n    ...(input.LanguageCode !== undefined && input.LanguageCode !== null && { LanguageCode: input.LanguageCode }),\n    ...(input.LexiconNames !== undefined &&\n      input.LexiconNames !== null && {\n        LexiconNames: serializeAws_restJson1LexiconNameList(input.LexiconNames, context),\n      }),\n    ...(input.OutputFormat !== undefined && input.OutputFormat !== null && { OutputFormat: input.OutputFormat }),\n    ...(input.SampleRate !== undefined && input.SampleRate !== null && { SampleRate: input.SampleRate }),\n    ...(input.SpeechMarkTypes !== undefined &&\n      input.SpeechMarkTypes !== null && {\n        SpeechMarkTypes: serializeAws_restJson1SpeechMarkTypeList(input.SpeechMarkTypes, context),\n      }),\n    ...(input.Text !== undefined && input.Text !== null && { Text: input.Text }),\n    ...(input.TextType !== undefined && input.TextType !== null && { TextType: input.TextType }),\n    ...(input.VoiceId !== undefined && input.VoiceId !== null && { VoiceId: input.VoiceId }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const deserializeAws_restJson1DeleteLexiconCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteLexiconCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1DeleteLexiconCommandError(output, context);\n  }\n  const contents: DeleteLexiconCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1DeleteLexiconCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteLexiconCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"LexiconNotFoundException\":\n    case \"com.amazonaws.polly#LexiconNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1DescribeVoicesCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DescribeVoicesCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1DescribeVoicesCommandError(output, context);\n  }\n  const contents: DescribeVoicesCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    NextToken: undefined,\n    Voices: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.NextToken !== undefined && data.NextToken !== null) {\n    contents.NextToken = data.NextToken;\n  }\n  if (data.Voices !== undefined && data.Voices !== null) {\n    contents.Voices = deserializeAws_restJson1VoiceList(data.Voices, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1DescribeVoicesCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DescribeVoicesCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidNextTokenException\":\n    case \"com.amazonaws.polly#InvalidNextTokenException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1GetLexiconCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetLexiconCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1GetLexiconCommandError(output, context);\n  }\n  const contents: GetLexiconCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Lexicon: undefined,\n    LexiconAttributes: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.Lexicon !== undefined && data.Lexicon !== null) {\n    contents.Lexicon = deserializeAws_restJson1Lexicon(data.Lexicon, context);\n  }\n  if (data.LexiconAttributes !== undefined && data.LexiconAttributes !== null) {\n    contents.LexiconAttributes = deserializeAws_restJson1LexiconAttributes(data.LexiconAttributes, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1GetLexiconCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetLexiconCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"LexiconNotFoundException\":\n    case \"com.amazonaws.polly#LexiconNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1GetSpeechSynthesisTaskCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetSpeechSynthesisTaskCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1GetSpeechSynthesisTaskCommandError(output, context);\n  }\n  const contents: GetSpeechSynthesisTaskCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    SynthesisTask: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n    contents.SynthesisTask = deserializeAws_restJson1SynthesisTask(data.SynthesisTask, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1GetSpeechSynthesisTaskCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetSpeechSynthesisTaskCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidTaskIdException\":\n    case \"com.amazonaws.polly#InvalidTaskIdException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidTaskIdExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"SynthesisTaskNotFoundException\":\n    case \"com.amazonaws.polly#SynthesisTaskNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1ListLexiconsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListLexiconsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1ListLexiconsCommandError(output, context);\n  }\n  const contents: ListLexiconsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Lexicons: undefined,\n    NextToken: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.Lexicons !== undefined && data.Lexicons !== null) {\n    contents.Lexicons = deserializeAws_restJson1LexiconDescriptionList(data.Lexicons, context);\n  }\n  if (data.NextToken !== undefined && data.NextToken !== null) {\n    contents.NextToken = data.NextToken;\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1ListLexiconsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListLexiconsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidNextTokenException\":\n    case \"com.amazonaws.polly#InvalidNextTokenException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1ListSpeechSynthesisTasksCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListSpeechSynthesisTasksCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1ListSpeechSynthesisTasksCommandError(output, context);\n  }\n  const contents: ListSpeechSynthesisTasksCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    NextToken: undefined,\n    SynthesisTasks: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.NextToken !== undefined && data.NextToken !== null) {\n    contents.NextToken = data.NextToken;\n  }\n  if (data.SynthesisTasks !== undefined && data.SynthesisTasks !== null) {\n    contents.SynthesisTasks = deserializeAws_restJson1SynthesisTasks(data.SynthesisTasks, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1ListSpeechSynthesisTasksCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListSpeechSynthesisTasksCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidNextTokenException\":\n    case \"com.amazonaws.polly#InvalidNextTokenException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1PutLexiconCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutLexiconCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1PutLexiconCommandError(output, context);\n  }\n  const contents: PutLexiconCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1PutLexiconCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutLexiconCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidLexiconException\":\n    case \"com.amazonaws.polly#InvalidLexiconException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidLexiconExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LexiconSizeExceededException\":\n    case \"com.amazonaws.polly#LexiconSizeExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1LexiconSizeExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"MaxLexemeLengthExceededException\":\n    case \"com.amazonaws.polly#MaxLexemeLengthExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"MaxLexiconsNumberExceededException\":\n    case \"com.amazonaws.polly#MaxLexiconsNumberExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"UnsupportedPlsAlphabetException\":\n    case \"com.amazonaws.polly#UnsupportedPlsAlphabetException\":\n      response = {\n        ...(await deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"UnsupportedPlsLanguageException\":\n    case \"com.amazonaws.polly#UnsupportedPlsLanguageException\":\n      response = {\n        ...(await deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1StartSpeechSynthesisTaskCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<StartSpeechSynthesisTaskCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1StartSpeechSynthesisTaskCommandError(output, context);\n  }\n  const contents: StartSpeechSynthesisTaskCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    SynthesisTask: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n    contents.SynthesisTask = deserializeAws_restJson1SynthesisTask(data.SynthesisTask, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1StartSpeechSynthesisTaskCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<StartSpeechSynthesisTaskCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"EngineNotSupportedException\":\n    case \"com.amazonaws.polly#EngineNotSupportedException\":\n      response = {\n        ...(await deserializeAws_restJson1EngineNotSupportedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidS3BucketException\":\n    case \"com.amazonaws.polly#InvalidS3BucketException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidS3BucketExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidS3KeyException\":\n    case \"com.amazonaws.polly#InvalidS3KeyException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidS3KeyExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidSampleRateException\":\n    case \"com.amazonaws.polly#InvalidSampleRateException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidSampleRateExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidSnsTopicArnException\":\n    case \"com.amazonaws.polly#InvalidSnsTopicArnException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidSsmlException\":\n    case \"com.amazonaws.polly#InvalidSsmlException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidSsmlExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LanguageNotSupportedException\":\n    case \"com.amazonaws.polly#LanguageNotSupportedException\":\n      response = {\n        ...(await deserializeAws_restJson1LanguageNotSupportedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LexiconNotFoundException\":\n    case \"com.amazonaws.polly#LexiconNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"MarksNotSupportedForFormatException\":\n    case \"com.amazonaws.polly#MarksNotSupportedForFormatException\":\n      response = {\n        ...(await deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"SsmlMarksNotSupportedForTextTypeException\":\n    case \"com.amazonaws.polly#SsmlMarksNotSupportedForTextTypeException\":\n      response = {\n        ...(await deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"TextLengthExceededException\":\n    case \"com.amazonaws.polly#TextLengthExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1TextLengthExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1SynthesizeSpeechCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<SynthesizeSpeechCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1SynthesizeSpeechCommandError(output, context);\n  }\n  const contents: SynthesizeSpeechCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AudioStream: undefined,\n    ContentType: undefined,\n    RequestCharacters: undefined,\n  };\n  if (output.headers[\"content-type\"] !== undefined) {\n    contents.ContentType = output.headers[\"content-type\"];\n  }\n  if (output.headers[\"x-amzn-requestcharacters\"] !== undefined) {\n    contents.RequestCharacters = parseInt(output.headers[\"x-amzn-requestcharacters\"], 10);\n  }\n  const data: any = output.body;\n  contents.AudioStream = data;\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1SynthesizeSpeechCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<SynthesizeSpeechCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"EngineNotSupportedException\":\n    case \"com.amazonaws.polly#EngineNotSupportedException\":\n      response = {\n        ...(await deserializeAws_restJson1EngineNotSupportedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidSampleRateException\":\n    case \"com.amazonaws.polly#InvalidSampleRateException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidSampleRateExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidSsmlException\":\n    case \"com.amazonaws.polly#InvalidSsmlException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidSsmlExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LanguageNotSupportedException\":\n    case \"com.amazonaws.polly#LanguageNotSupportedException\":\n      response = {\n        ...(await deserializeAws_restJson1LanguageNotSupportedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LexiconNotFoundException\":\n    case \"com.amazonaws.polly#LexiconNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"MarksNotSupportedForFormatException\":\n    case \"com.amazonaws.polly#MarksNotSupportedForFormatException\":\n      response = {\n        ...(await deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"SsmlMarksNotSupportedForTextTypeException\":\n    case \"com.amazonaws.polly#SsmlMarksNotSupportedForTextTypeException\":\n      response = {\n        ...(await deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"TextLengthExceededException\":\n    case \"com.amazonaws.polly#TextLengthExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1TextLengthExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nconst deserializeAws_restJson1EngineNotSupportedExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<EngineNotSupportedException> => {\n  const contents: EngineNotSupportedException = {\n    name: \"EngineNotSupportedException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidLexiconExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidLexiconException> => {\n  const contents: InvalidLexiconException = {\n    name: \"InvalidLexiconException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidNextTokenExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidNextTokenException> => {\n  const contents: InvalidNextTokenException = {\n    name: \"InvalidNextTokenException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidS3BucketExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidS3BucketException> => {\n  const contents: InvalidS3BucketException = {\n    name: \"InvalidS3BucketException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidS3KeyExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidS3KeyException> => {\n  const contents: InvalidS3KeyException = {\n    name: \"InvalidS3KeyException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidSampleRateExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidSampleRateException> => {\n  const contents: InvalidSampleRateException = {\n    name: \"InvalidSampleRateException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidSnsTopicArnException> => {\n  const contents: InvalidSnsTopicArnException = {\n    name: \"InvalidSnsTopicArnException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidSsmlExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidSsmlException> => {\n  const contents: InvalidSsmlException = {\n    name: \"InvalidSsmlException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidTaskIdExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidTaskIdException> => {\n  const contents: InvalidTaskIdException = {\n    name: \"InvalidTaskIdException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1LanguageNotSupportedExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<LanguageNotSupportedException> => {\n  const contents: LanguageNotSupportedException = {\n    name: \"LanguageNotSupportedException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1LexiconNotFoundExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<LexiconNotFoundException> => {\n  const contents: LexiconNotFoundException = {\n    name: \"LexiconNotFoundException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1LexiconSizeExceededExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<LexiconSizeExceededException> => {\n  const contents: LexiconSizeExceededException = {\n    name: \"LexiconSizeExceededException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<MarksNotSupportedForFormatException> => {\n  const contents: MarksNotSupportedForFormatException = {\n    name: \"MarksNotSupportedForFormatException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<MaxLexemeLengthExceededException> => {\n  const contents: MaxLexemeLengthExceededException = {\n    name: \"MaxLexemeLengthExceededException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<MaxLexiconsNumberExceededException> => {\n  const contents: MaxLexiconsNumberExceededException = {\n    name: \"MaxLexiconsNumberExceededException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1ServiceFailureExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<ServiceFailureException> => {\n  const contents: ServiceFailureException = {\n    name: \"ServiceFailureException\",\n    $fault: \"server\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<SsmlMarksNotSupportedForTextTypeException> => {\n  const contents: SsmlMarksNotSupportedForTextTypeException = {\n    name: \"SsmlMarksNotSupportedForTextTypeException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<SynthesisTaskNotFoundException> => {\n  const contents: SynthesisTaskNotFoundException = {\n    name: \"SynthesisTaskNotFoundException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1TextLengthExceededExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<TextLengthExceededException> => {\n  const contents: TextLengthExceededException = {\n    name: \"TextLengthExceededException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<UnsupportedPlsAlphabetException> => {\n  const contents: UnsupportedPlsAlphabetException = {\n    name: \"UnsupportedPlsAlphabetException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<UnsupportedPlsLanguageException> => {\n  const contents: UnsupportedPlsLanguageException = {\n    name: \"UnsupportedPlsLanguageException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst serializeAws_restJson1LexiconNameList = (input: string[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst serializeAws_restJson1SpeechMarkTypeList = (input: (SpeechMarkType | string)[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restJson1EngineList = (output: any, context: __SerdeContext): (Engine | string)[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restJson1LanguageCodeList = (output: any, context: __SerdeContext): (LanguageCode | string)[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restJson1Lexicon = (output: any, context: __SerdeContext): Lexicon => {\n  return {\n    Content: output.Content !== undefined && output.Content !== null ? output.Content : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1LexiconAttributes = (output: any, context: __SerdeContext): LexiconAttributes => {\n  return {\n    Alphabet: output.Alphabet !== undefined && output.Alphabet !== null ? output.Alphabet : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LastModified:\n      output.LastModified !== undefined && output.LastModified !== null\n        ? new Date(Math.round(output.LastModified * 1000))\n        : undefined,\n    LexemesCount: output.LexemesCount !== undefined && output.LexemesCount !== null ? output.LexemesCount : undefined,\n    LexiconArn: output.LexiconArn !== undefined && output.LexiconArn !== null ? output.LexiconArn : undefined,\n    Size: output.Size !== undefined && output.Size !== null ? output.Size : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1LexiconDescription = (output: any, context: __SerdeContext): LexiconDescription => {\n  return {\n    Attributes:\n      output.Attributes !== undefined && output.Attributes !== null\n        ? deserializeAws_restJson1LexiconAttributes(output.Attributes, context)\n        : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1LexiconDescriptionList = (output: any, context: __SerdeContext): LexiconDescription[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1LexiconDescription(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1LexiconNameList = (output: any, context: __SerdeContext): string[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restJson1SpeechMarkTypeList = (\n  output: any,\n  context: __SerdeContext\n): (SpeechMarkType | string)[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restJson1SynthesisTask = (output: any, context: __SerdeContext): SynthesisTask => {\n  return {\n    CreationTime:\n      output.CreationTime !== undefined && output.CreationTime !== null\n        ? new Date(Math.round(output.CreationTime * 1000))\n        : undefined,\n    Engine: output.Engine !== undefined && output.Engine !== null ? output.Engine : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LexiconNames:\n      output.LexiconNames !== undefined && output.LexiconNames !== null\n        ? deserializeAws_restJson1LexiconNameList(output.LexiconNames, context)\n        : undefined,\n    OutputFormat: output.OutputFormat !== undefined && output.OutputFormat !== null ? output.OutputFormat : undefined,\n    OutputUri: output.OutputUri !== undefined && output.OutputUri !== null ? output.OutputUri : undefined,\n    RequestCharacters:\n      output.RequestCharacters !== undefined && output.RequestCharacters !== null\n        ? output.RequestCharacters\n        : undefined,\n    SampleRate: output.SampleRate !== undefined && output.SampleRate !== null ? output.SampleRate : undefined,\n    SnsTopicArn: output.SnsTopicArn !== undefined && output.SnsTopicArn !== null ? output.SnsTopicArn : undefined,\n    SpeechMarkTypes:\n      output.SpeechMarkTypes !== undefined && output.SpeechMarkTypes !== null\n        ? deserializeAws_restJson1SpeechMarkTypeList(output.SpeechMarkTypes, context)\n        : undefined,\n    TaskId: output.TaskId !== undefined && output.TaskId !== null ? output.TaskId : undefined,\n    TaskStatus: output.TaskStatus !== undefined && output.TaskStatus !== null ? output.TaskStatus : undefined,\n    TaskStatusReason:\n      output.TaskStatusReason !== undefined && output.TaskStatusReason !== null ? output.TaskStatusReason : undefined,\n    TextType: output.TextType !== undefined && output.TextType !== null ? output.TextType : undefined,\n    VoiceId: output.VoiceId !== undefined && output.VoiceId !== null ? output.VoiceId : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1SynthesisTasks = (output: any, context: __SerdeContext): SynthesisTask[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1SynthesisTask(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1Voice = (output: any, context: __SerdeContext): Voice => {\n  return {\n    AdditionalLanguageCodes:\n      output.AdditionalLanguageCodes !== undefined && output.AdditionalLanguageCodes !== null\n        ? deserializeAws_restJson1LanguageCodeList(output.AdditionalLanguageCodes, context)\n        : undefined,\n    Gender: output.Gender !== undefined && output.Gender !== null ? output.Gender : undefined,\n    Id: output.Id !== undefined && output.Id !== null ? output.Id : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LanguageName: output.LanguageName !== undefined && output.LanguageName !== null ? output.LanguageName : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,\n    SupportedEngines:\n      output.SupportedEngines !== undefined && output.SupportedEngines !== null\n        ? deserializeAws_restJson1EngineList(output.SupportedEngines, context)\n        : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1VoiceList = (output: any, context: __SerdeContext): Voice[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1Voice(entry, context);\n    });\n};\n\nconst deserializeMetadata = (output: __HttpResponse): __ResponseMetadata => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"],\n});\n\n// Collect low-level response body stream to Uint8Array.\nconst collectBody = (streamBody: any = new Uint8Array(), context: __SerdeContext): Promise<Uint8Array> => {\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n\n// Encode Uint8Array data into string with utf-8.\nconst collectBodyString = (streamBody: any, context: __SerdeContext): Promise<string> =>\n  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\n\nconst isSerializableHeaderValue = (value: any): boolean =>\n  value !== undefined &&\n  value !== null &&\n  value !== \"\" &&\n  (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n  (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n\nconst parseBody = (streamBody: any, context: __SerdeContext): any =>\n  collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n    return {};\n  });\n\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\nconst loadRestJsonErrorCode = (output: __HttpResponse, data: any): string => {\n  const findKey = (object: any, key: string) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n\n  const sanitizeErrorCode = (rawValue: string): string => {\n    let cleanValue = rawValue;\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n    return cleanValue;\n  };\n\n  const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n\n  return \"\";\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}