{"ast":null,"code":"function e(t) {\n  switch (t && t.type || null) {\n    case \"FeatureCollection\":\n      return t.features = t.features.reduce(function (t, r) {\n        return t.concat(e(r));\n      }, []), t;\n    case \"Feature\":\n      return t.geometry ? e(t.geometry).map(function (e) {\n        var r = {\n          type: \"Feature\",\n          properties: JSON.parse(JSON.stringify(t.properties)),\n          geometry: e\n        };\n        return void 0 !== t.id && (r.id = t.id), r;\n      }) : [t];\n    case \"MultiPoint\":\n      return t.coordinates.map(function (e) {\n        return {\n          type: \"Point\",\n          coordinates: e\n        };\n      });\n    case \"MultiPolygon\":\n      return t.coordinates.map(function (e) {\n        return {\n          type: \"Polygon\",\n          coordinates: e\n        };\n      });\n    case \"MultiLineString\":\n      return t.coordinates.map(function (e) {\n        return {\n          type: \"LineString\",\n          coordinates: e\n        };\n      });\n    case \"GeometryCollection\":\n      return t.geometries.map(e).reduce(function (e, t) {\n        return e.concat(t);\n      }, []);\n    case \"Point\":\n    case \"Polygon\":\n    case \"LineString\":\n      return [t];\n  }\n}\nexport { e as default };","map":{"version":3,"mappings":"AAAwBA,WAAQC;EAC9B,QAASA,KAAMA,EAAGC,QAAS;IACzB,KAAK;MAIH,OAHAD,EAAGE,WAAWF,EAAGE,SAASC,OAAO,UAASC,GAAKC;QAC7C,OAAOD,EAAIE,OAAOP,EAAQM,GAC5B;MAAA,GAAG,KACML;IACX,KAAK;MACH,OAAKA,EAAGO,WACMR,EAACC,EAAGO,UAAUC,IAAI,UAASC;QACvC,IAAQC,IAAG;UACTT,MAAM;UACNU,YAAYC,KAAKC,MAAMD,KAAKE,UAAUd,EAAGW;UACzCJ,UAAUE;QAAAA;QAKZ,YAHcM,MAAVf,EAAGgB,OACLN,EAAKM,KAAKhB,EAAGgB,MAGjB;MAAA,KAXyB,CAAChB;IAY5B,KAAK;MACH,OAAOA,EAAGiB,YAAYT,IAAI,UAASU;QACjC,OAAO;UAAEjB,MAAM;UAASgB,aAAaC;QAAAA,CACvC;MAAA;IACF,KAAK;MACH,OAASlB,EAACiB,YAAYT,IAAI,UAASU;QACjC,OAAO;UAAEjB,MAAM;UAAWgB,aAAaC;QAAAA,CACzC;MAAA;IACF,KAAK;MACH,OAAOlB,EAAGiB,YAAYT,IAAI,UAASU;QACjC,OAAO;UAAEjB,MAAM;UAAcgB,aAAaC;QAAAA,CAC5C;MAAA;IACF,KAAK;MACH,OAAOlB,EAAGmB,WAAWX,IAAIT,GAASI,OAAO,UAASiB,GAAMC;QACtD,OAAWD,EAACd,OAAOe,EACrB;MAAA,GAAG;IACL,KAAK;IACL,KAAK;IACL,KAAK;MACH,OAAO,CAACrB;EAAAA;AAEd;AAAA","names":["flatten","gj","type","features","reduce","mem","feature","concat","geometry","map","geom","data","properties","JSON","parse","stringify","undefined","id","coordinates","_","geometries","memo","geoms"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/geojson-flatten/index.js"],"sourcesContent":["export default function flatten(gj) {\n  switch ((gj && gj.type) || null) {\n    case \"FeatureCollection\":\n      gj.features = gj.features.reduce(function(mem, feature) {\n        return mem.concat(flatten(feature));\n      }, []);\n      return gj;\n    case \"Feature\":\n      if (!gj.geometry) return [gj];\n      return flatten(gj.geometry).map(function(geom) {\n        var data = {\n          type: \"Feature\",\n          properties: JSON.parse(JSON.stringify(gj.properties)),\n          geometry: geom\n        };\n        if (gj.id !== undefined) {\n          data.id = gj.id;\n        }\n        return data;\n      });\n    case \"MultiPoint\":\n      return gj.coordinates.map(function(_) {\n        return { type: \"Point\", coordinates: _ };\n      });\n    case \"MultiPolygon\":\n      return gj.coordinates.map(function(_) {\n        return { type: \"Polygon\", coordinates: _ };\n      });\n    case \"MultiLineString\":\n      return gj.coordinates.map(function(_) {\n        return { type: \"LineString\", coordinates: _ };\n      });\n    case \"GeometryCollection\":\n      return gj.geometries.map(flatten).reduce(function(memo, geoms) {\n        return memo.concat(geoms);\n      }, []);\n    case \"Point\":\n    case \"Polygon\":\n    case \"LineString\":\n      return [gj];\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}