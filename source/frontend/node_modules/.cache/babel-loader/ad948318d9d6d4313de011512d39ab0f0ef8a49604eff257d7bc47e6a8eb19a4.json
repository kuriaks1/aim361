{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StartLabelDetectionRequest, StartLabelDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartLabelDetectionCommand, serializeAws_json1_1StartLabelDetectionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Starts asynchronous detection of labels in a stored video.</p>\n *          <p>Amazon Rekognition Video can detect labels in a video. Labels are instances of real-world entities.\n *        This includes objects like flower, tree, and table; events like\n *        wedding, graduation, and birthday party; concepts like landscape, evening, and nature; and activities\n *        like a person getting out of a car or a person skiing.</p>\n *\n *          <p>The video must be stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n *        and the filename of the video.\n *         <code>StartLabelDetection</code> returns a job identifier (<code>JobId</code>) which you use to get the\n *        results of the operation. When label detection is finished, Amazon Rekognition Video publishes a completion status\n *         to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.</p>\n *          <p>To get the results of the label detection operation, first check that the status value published to the Amazon SNS\n *         topic is <code>SUCCEEDED</code>. If so, call  <a>GetLabelDetection</a> and pass the job identifier\n *        (<code>JobId</code>) from the initial call to <code>StartLabelDetection</code>.</p>\n *         <p></p>\n */\nvar StartLabelDetectionCommand = /** @class */function (_super) {\n  __extends(StartLabelDetectionCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function StartLabelDetectionCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  StartLabelDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"StartLabelDetectionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StartLabelDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartLabelDetectionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  StartLabelDetectionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StartLabelDetectionCommand(input, context);\n  };\n  StartLabelDetectionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StartLabelDetectionCommand(output, context);\n  };\n  return StartLabelDetectionCommand;\n}($Command);\nexport { StartLabelDetectionCommand };","map":{"version":3,"mappings":";AACA,SAASA,0BAA0B,EAAEC,2BAA2B,QAAQ,oBAAoB;AAC5F,SACEC,gDAAgD,EAChDC,8CAA8C,QACzC,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;AAiBA;EAAgDC;EAK9C;EACA;EAEA,oCAAqBC,KAAsC;IAA3D;IACE;IACAC,iBAAO;IAFYC,WAAK,GAALF,KAAK;;IAGxB;EACF;EAEA;;;EAGAG,sDAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA8C,EAC9CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACZ,cAAc,CAACS,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,UAAM,GAAKF,aAAa,OAAlB;IACd,IAAMQ,UAAU,GAAG,mBAAmB;IACtC,IAAMC,WAAW,GAAG,4BAA4B;IAChD,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM;MACNH,UAAU;MACVC,WAAW;MACXG,uBAAuB,EAAEzB,0BAA0B,CAAC0B,kBAAkB;MACtEC,wBAAwB,EAAE1B,2BAA2B,CAACyB;KACvD;IACO,kBAAc,GAAKb,aAAa,eAAlB;IACtB,OAAOM,KAAK,CAACS,OAAO,CAClB,UAACC,OAAsC;MACrC,qBAAc,CAACC,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEf,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxES,uBAAuB,CACxB;EACH,CAAC;EAEOZ,8CAAS,GAAjB,UAAkBH,KAAsC,EAAEuB,OAAuB;IAC/E,OAAO5B,8CAA8C,CAACK,KAAK,EAAEuB,OAAO,CAAC;EACvE,CAAC;EAEOpB,gDAAW,GAAnB,UAAoBqB,MAAsB,EAAED,OAAuB;IACjE,OAAO7B,gDAAgD,CAAC8B,MAAM,EAAED,OAAO,CAAC;EAC1E,CAAC;EAIH,iCAAC;AAAD,CAAC,CAtD+CzB,QAAQ","names":["StartLabelDetectionRequest","StartLabelDetectionResponse","deserializeAws_json1_1StartLabelDetectionCommand","serializeAws_json1_1StartLabelDetectionCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","StartLabelDetectionCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-sdk/client-rekognition/commands/StartLabelDetectionCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { StartLabelDetectionRequest, StartLabelDetectionResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1StartLabelDetectionCommand,\n  serializeAws_json1_1StartLabelDetectionCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type StartLabelDetectionCommandInput = StartLabelDetectionRequest;\nexport type StartLabelDetectionCommandOutput = StartLabelDetectionResponse & __MetadataBearer;\n\n/**\n * <p>Starts asynchronous detection of labels in a stored video.</p>\n *          <p>Amazon Rekognition Video can detect labels in a video. Labels are instances of real-world entities.\n *        This includes objects like flower, tree, and table; events like\n *        wedding, graduation, and birthday party; concepts like landscape, evening, and nature; and activities\n *        like a person getting out of a car or a person skiing.</p>\n *\n *          <p>The video must be stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n *        and the filename of the video.\n *         <code>StartLabelDetection</code> returns a job identifier (<code>JobId</code>) which you use to get the\n *        results of the operation. When label detection is finished, Amazon Rekognition Video publishes a completion status\n *         to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.</p>\n *          <p>To get the results of the label detection operation, first check that the status value published to the Amazon SNS\n *         topic is <code>SUCCEEDED</code>. If so, call  <a>GetLabelDetection</a> and pass the job identifier\n *        (<code>JobId</code>) from the initial call to <code>StartLabelDetection</code>.</p>\n *         <p></p>\n */\nexport class StartLabelDetectionCommand extends $Command<\n  StartLabelDetectionCommandInput,\n  StartLabelDetectionCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: StartLabelDetectionCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<StartLabelDetectionCommandInput, StartLabelDetectionCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"StartLabelDetectionCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: StartLabelDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartLabelDetectionResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: StartLabelDetectionCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1StartLabelDetectionCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<StartLabelDetectionCommandOutput> {\n    return deserializeAws_json1_1StartLabelDetectionCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}