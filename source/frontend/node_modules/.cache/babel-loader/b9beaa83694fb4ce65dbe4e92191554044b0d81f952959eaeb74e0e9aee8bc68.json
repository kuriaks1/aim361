{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spread } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport { InternalAPI } from '@aws-amplify/api/internals';\nimport { Auth } from '@aws-amplify/auth';\nimport { Cache } from '@aws-amplify/cache';\nimport { Category, ConsoleLogger as Logger, DataStoreAction, Hub, BackgroundProcessManager } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { ProcessName } from '../../types';\nimport { buildSubscriptionGraphQLOperation, getAuthorizationRules, getModelAuthModes, getUserGroupsFromToken, TransformerMutationType, getTokenForCustomAuth, predicateToGraphQLFilter, RTFError, generateRTFRemediation } from '../utils';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { validatePredicate } from '../../util';\nimport { getSubscriptionErrorType } from './errorMaps';\nvar logger = new Logger('DataStore');\nexport var CONTROL_MSG;\n(function (CONTROL_MSG) {\n  CONTROL_MSG[\"CONNECTED\"] = \"CONNECTED\";\n})(CONTROL_MSG || (CONTROL_MSG = {}));\nexport var USER_CREDENTIALS;\n(function (USER_CREDENTIALS) {\n  USER_CREDENTIALS[USER_CREDENTIALS[\"none\"] = 0] = \"none\";\n  USER_CREDENTIALS[USER_CREDENTIALS[\"unauth\"] = 1] = \"unauth\";\n  USER_CREDENTIALS[USER_CREDENTIALS[\"auth\"] = 2] = \"auth\";\n})(USER_CREDENTIALS || (USER_CREDENTIALS = {}));\nvar SubscriptionProcessor = /** @class */function () {\n  function SubscriptionProcessor(schema, syncPredicates, amplifyConfig, authModeStrategy, errorHandler, amplifyContext) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n    if (amplifyContext === void 0) {\n      amplifyContext = {\n        Auth: Auth,\n        InternalAPI: InternalAPI,\n        Cache: Cache\n      };\n    }\n    this.schema = schema;\n    this.syncPredicates = syncPredicates;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.errorHandler = errorHandler;\n    this.amplifyContext = amplifyContext;\n    this.typeQuery = new WeakMap();\n    this.buffer = [];\n    this.runningProcesses = new BackgroundProcessManager();\n  }\n  SubscriptionProcessor.prototype.buildSubscription = function (namespace, model, transformerMutationType, userCredentials, cognitoTokenPayload, oidcTokenPayload, authMode, filterArg) {\n    if (filterArg === void 0) {\n      filterArg = false;\n    }\n    var aws_appsync_authenticationType = this.amplifyConfig.aws_appsync_authenticationType;\n    var _a = this.getAuthorizationInfo(model, userCredentials, aws_appsync_authenticationType, cognitoTokenPayload, oidcTokenPayload, authMode) || {},\n      isOwner = _a.isOwner,\n      ownerField = _a.ownerField,\n      ownerValue = _a.ownerValue;\n    var _b = __read(buildSubscriptionGraphQLOperation(namespace, model, transformerMutationType, isOwner, ownerField, filterArg), 3),\n      opType = _b[0],\n      opName = _b[1],\n      query = _b[2];\n    return {\n      authMode: authMode,\n      opType: opType,\n      opName: opName,\n      query: query,\n      isOwner: isOwner,\n      ownerField: ownerField,\n      ownerValue: ownerValue\n    };\n  };\n  SubscriptionProcessor.prototype.getAuthorizationInfo = function (model, userCredentials, defaultAuthType, cognitoTokenPayload, oidcTokenPayload, authMode) {\n    if (cognitoTokenPayload === void 0) {\n      cognitoTokenPayload = {};\n    }\n    if (oidcTokenPayload === void 0) {\n      oidcTokenPayload = {};\n    }\n    var rules = getAuthorizationRules(model);\n    // Return null if user doesn't have proper credentials for private API with IAM auth\n    var iamPrivateAuth = authMode === GRAPHQL_AUTH_MODE.AWS_IAM && rules.find(function (rule) {\n      return rule.authStrategy === 'private' && rule.provider === 'iam';\n    });\n    if (iamPrivateAuth && userCredentials === USER_CREDENTIALS.unauth) {\n      return null;\n    }\n    // Group auth should take precedence over owner auth, so we are checking\n    // if rule(s) have group authorization as well as if either the Cognito or\n    // OIDC token has a groupClaim. If so, we are returning auth info before\n    // any further owner-based auth checks.\n    var groupAuthRules = rules.filter(function (rule) {\n      return rule.authStrategy === 'groups' && ['userPools', 'oidc'].includes(rule.provider);\n    });\n    var validGroup = (authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS || authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT) && groupAuthRules.find(function (groupAuthRule) {\n      // validate token against groupClaim\n      var cognitoUserGroups = getUserGroupsFromToken(cognitoTokenPayload, groupAuthRule);\n      var oidcUserGroups = getUserGroupsFromToken(oidcTokenPayload, groupAuthRule);\n      return __spread(cognitoUserGroups, oidcUserGroups).find(function (userGroup) {\n        return groupAuthRule.groups.find(function (group) {\n          return group === userGroup;\n        });\n      });\n    });\n    if (validGroup) {\n      return {\n        authMode: authMode,\n        isOwner: false\n      };\n    }\n    // Owner auth needs additional values to be returned in order to create the subscription with\n    // the correct parameters so we are getting the owner value from the Cognito token via the\n    // identityClaim from the auth rule.\n    var cognitoOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS ? rules.filter(function (rule) {\n      return rule.authStrategy === 'owner' && rule.provider === 'userPools';\n    }) : [];\n    var ownerAuthInfo;\n    cognitoOwnerAuthRules.forEach(function (ownerAuthRule) {\n      var _a;\n      var ownerValue = cognitoTokenPayload[ownerAuthRule.identityClaim];\n      // AuthZ for \"list of owners\" is handled dynamically in the subscription auth request\n      // resolver. It doesn't rely on a subscription arg.\n      // Only pass a subscription arg for single owner auth\n      var singleOwner = ((_a = model.fields[ownerAuthRule.ownerField]) === null || _a === void 0 ? void 0 : _a.isArray) !== true;\n      var isOwnerArgRequired = singleOwner && !ownerAuthRule.areSubscriptionsPublic;\n      if (ownerValue) {\n        ownerAuthInfo = {\n          authMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n          isOwner: isOwnerArgRequired,\n          ownerField: ownerAuthRule.ownerField,\n          ownerValue: ownerValue\n        };\n      }\n    });\n    if (ownerAuthInfo) {\n      return ownerAuthInfo;\n    }\n    // Owner auth needs additional values to be returned in order to create the subscription with\n    // the correct parameters so we are getting the owner value from the OIDC token via the\n    // identityClaim from the auth rule.\n    var oidcOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT ? rules.filter(function (rule) {\n      return rule.authStrategy === 'owner' && rule.provider === 'oidc';\n    }) : [];\n    oidcOwnerAuthRules.forEach(function (ownerAuthRule) {\n      var _a;\n      var ownerValue = oidcTokenPayload[ownerAuthRule.identityClaim];\n      var singleOwner = ((_a = model.fields[ownerAuthRule.ownerField]) === null || _a === void 0 ? void 0 : _a.isArray) !== true;\n      var isOwnerArgRequired = singleOwner && !ownerAuthRule.areSubscriptionsPublic;\n      if (ownerValue) {\n        ownerAuthInfo = {\n          authMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n          isOwner: isOwnerArgRequired,\n          ownerField: ownerAuthRule.ownerField,\n          ownerValue: ownerValue\n        };\n      }\n    });\n    if (ownerAuthInfo) {\n      return ownerAuthInfo;\n    }\n    // Fallback: return authMode or default auth type\n    return {\n      authMode: authMode || defaultAuthType,\n      isOwner: false\n    };\n  };\n  SubscriptionProcessor.prototype.hubQueryCompletionListener = function (completed, capsule) {\n    var event = capsule.payload.event;\n    if (event === PUBSUB_CONTROL_MSG.SUBSCRIPTION_ACK) {\n      completed();\n    }\n  };\n  SubscriptionProcessor.prototype.start = function () {\n    var _this = this;\n    this.runningProcesses = this.runningProcesses || new BackgroundProcessManager();\n    var ctlObservable = new Observable(function (observer) {\n      var promises = [];\n      // Creating subs for each model/operation combo so they can be unsubscribed\n      // independently, since the auth retry behavior is asynchronous.\n      var subscriptions = {};\n      var cognitoTokenPayload, oidcTokenPayload;\n      var userCredentials = USER_CREDENTIALS.none;\n      _this.runningProcesses.add(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var credentials, err_1, session, err_2, _a, aws_cognito_region, AuthConfig, token, federatedInfo, currentUser, payload, err_3;\n          var _this = this;\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                _b.trys.push([0, 2,, 3]);\n                return [4 /*yield*/, this.amplifyContext.Auth.currentCredentials()];\n              case 1:\n                credentials = _b.sent();\n                userCredentials = credentials.authenticated ? USER_CREDENTIALS.auth : USER_CREDENTIALS.unauth;\n                return [3 /*break*/, 3];\n              case 2:\n                err_1 = _b.sent();\n                return [3 /*break*/, 3];\n              case 3:\n                _b.trys.push([3, 5,, 6]);\n                return [4 /*yield*/, this.amplifyContext.Auth.currentSession()];\n              case 4:\n                session = _b.sent();\n                cognitoTokenPayload = session.getIdToken().decodePayload();\n                return [3 /*break*/, 6];\n              case 5:\n                err_2 = _b.sent();\n                return [3 /*break*/, 6];\n              case 6:\n                _b.trys.push([6, 11,, 12]);\n                _a = this.amplifyConfig, aws_cognito_region = _a.aws_cognito_region, AuthConfig = _a.Auth;\n                if (!aws_cognito_region || AuthConfig && !AuthConfig.region) {\n                  throw 'Auth is not configured';\n                }\n                token = void 0;\n                return [4 /*yield*/, this.amplifyContext.Cache.getItem('federatedInfo')];\n              case 7:\n                federatedInfo = _b.sent();\n                if (!federatedInfo) return [3 /*break*/, 8];\n                token = federatedInfo.token;\n                return [3 /*break*/, 10];\n              case 8:\n                return [4 /*yield*/, this.amplifyContext.Auth.currentAuthenticatedUser()];\n              case 9:\n                currentUser = _b.sent();\n                if (currentUser) {\n                  token = currentUser.token;\n                }\n                _b.label = 10;\n              case 10:\n                if (token) {\n                  payload = token.split('.')[1];\n                  oidcTokenPayload = JSON.parse(Buffer.from(payload, 'base64').toString('utf8'));\n                }\n                return [3 /*break*/, 12];\n              case 11:\n                err_3 = _b.sent();\n                logger.debug('error getting OIDC JWT', err_3);\n                return [3 /*break*/, 12];\n              case 12:\n                Object.values(this.schema.namespaces).forEach(function (namespace) {\n                  Object.values(namespace.models).filter(function (_a) {\n                    var syncable = _a.syncable;\n                    return syncable;\n                  }).forEach(function (modelDefinition) {\n                    return _this.runningProcesses.isOpen && _this.runningProcesses.add(function () {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        var modelAuthModes, readAuthModes, operations, operationAuthModeAttempts, predicatesGroup, addFilterArg, subscriptionRetry;\n                        var _a, _b, _c;\n                        var _this = this;\n                        return __generator(this, function (_d) {\n                          switch (_d.label) {\n                            case 0:\n                              return [4 /*yield*/, getModelAuthModes({\n                                authModeStrategy: this.authModeStrategy,\n                                defaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n                                modelName: modelDefinition.name,\n                                schema: this.schema\n                              })];\n                            case 1:\n                              modelAuthModes = _d.sent();\n                              readAuthModes = modelAuthModes.READ;\n                              subscriptions = __assign(__assign({}, subscriptions), (_a = {}, _a[modelDefinition.name] = (_b = {}, _b[TransformerMutationType.CREATE] = [], _b[TransformerMutationType.UPDATE] = [], _b[TransformerMutationType.DELETE] = [], _b), _a));\n                              operations = [TransformerMutationType.CREATE, TransformerMutationType.UPDATE, TransformerMutationType.DELETE];\n                              operationAuthModeAttempts = (_c = {}, _c[TransformerMutationType.CREATE] = 0, _c[TransformerMutationType.UPDATE] = 0, _c[TransformerMutationType.DELETE] = 0, _c);\n                              predicatesGroup = ModelPredicateCreator.getPredicates(this.syncPredicates.get(modelDefinition), false);\n                              addFilterArg = predicatesGroup !== undefined;\n                              subscriptionRetry = function (operation, addFilter) {\n                                if (addFilter === void 0) {\n                                  addFilter = addFilterArg;\n                                }\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  var _a, transformerMutationType, opName, query, isOwner, ownerField, ownerValue, authMode, authToken, variables, customUserAgentDetails, queryObservable, subscriptionReadyCallback;\n                                  var _this = this;\n                                  return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                      case 0:\n                                        _a = this.buildSubscription(namespace, modelDefinition, operation, userCredentials, cognitoTokenPayload, oidcTokenPayload, readAuthModes[operationAuthModeAttempts[operation]], addFilter), transformerMutationType = _a.opType, opName = _a.opName, query = _a.query, isOwner = _a.isOwner, ownerField = _a.ownerField, ownerValue = _a.ownerValue, authMode = _a.authMode;\n                                        return [4 /*yield*/, getTokenForCustomAuth(authMode, this.amplifyConfig)];\n                                      case 1:\n                                        authToken = _b.sent();\n                                        variables = {};\n                                        customUserAgentDetails = {\n                                          category: Category.DataStore,\n                                          action: DataStoreAction.Subscribe\n                                        };\n                                        if (addFilter && predicatesGroup) {\n                                          variables['filter'] = predicateToGraphQLFilter(predicatesGroup);\n                                        }\n                                        if (isOwner) {\n                                          if (!ownerValue) {\n                                            observer.error('Owner field required, sign in is needed in order to perform this operation');\n                                            return [2 /*return*/];\n                                          }\n\n                                          variables[ownerField] = ownerValue;\n                                        }\n                                        logger.debug(\"Attempting \" + operation + \" subscription with authMode: \" + readAuthModes[operationAuthModeAttempts[operation]]);\n                                        queryObservable = this.amplifyContext.InternalAPI.graphql(__assign(__assign({\n                                          query: query,\n                                          variables: variables\n                                        }, {\n                                          authMode: authMode\n                                        }), {\n                                          authToken: authToken\n                                        }), undefined, customUserAgentDetails);\n                                        // TODO: consider onTerminate.then(() => API.cancel(...))\n                                        subscriptions[modelDefinition.name][transformerMutationType].push(queryObservable.map(function (_a) {\n                                          var value = _a.value;\n                                          return value;\n                                        }).subscribe({\n                                          next: function (_a) {\n                                            var data = _a.data,\n                                              errors = _a.errors;\n                                            if (Array.isArray(errors) && errors.length > 0) {\n                                              var messages = errors.map(function (_a) {\n                                                var message = _a.message;\n                                                return message;\n                                              });\n                                              logger.warn(\"Skipping incoming subscription. Messages: \" + messages.join('\\n'));\n                                              _this.drainBuffer();\n                                              return;\n                                            }\n                                            var predicatesGroup = ModelPredicateCreator.getPredicates(_this.syncPredicates.get(modelDefinition), false);\n                                            // @ts-ignore\n                                            var _b = data,\n                                              _c = opName,\n                                              record = _b[_c];\n                                            // checking incoming subscription against syncPredicate.\n                                            // once AppSync implements filters on subscriptions, we'll be\n                                            // able to set these when establishing the subscription instead.\n                                            // Until then, we'll need to filter inbound\n                                            if (_this.passesPredicateValidation(record, predicatesGroup)) {\n                                              _this.pushToBuffer(transformerMutationType, modelDefinition, record);\n                                            }\n                                            _this.drainBuffer();\n                                          },\n                                          error: function (subscriptionError) {\n                                            return __awaiter(_this, void 0, void 0, function () {\n                                              var _a, _b, _c, _d, message, isRTFError, e_1;\n                                              return __generator(this, function (_e) {\n                                                switch (_e.label) {\n                                                  case 0:\n                                                    _a = subscriptionError.error, _b = __read((_a === void 0 ? {\n                                                      errors: []\n                                                    } : _a).errors, 1), _c = _b[0], _d = (_c === void 0 ? {} : _c).message, message = _d === void 0 ? '' : _d;\n                                                    isRTFError =\n                                                    // only attempt catch if a filter variable was added to the subscription query\n                                                    addFilter && this.catchRTFError(message, modelDefinition, predicatesGroup);\n                                                    // Catch RTF errors\n                                                    if (isRTFError) {\n                                                      // Unsubscribe and clear subscription array for model/operation\n                                                      subscriptions[modelDefinition.name][transformerMutationType].forEach(function (subscription) {\n                                                        return subscription.unsubscribe();\n                                                      });\n                                                      subscriptions[modelDefinition.name][transformerMutationType] = [];\n                                                      // retry subscription connection without filter\n                                                      subscriptionRetry(operation, false);\n                                                      return [2 /*return*/];\n                                                    }\n\n                                                    if (message.includes(PUBSUB_CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR) || message.includes(PUBSUB_CONTROL_MSG.CONNECTION_FAILED)) {\n                                                      // Unsubscribe and clear subscription array for model/operation\n                                                      subscriptions[modelDefinition.name][transformerMutationType].forEach(function (subscription) {\n                                                        return subscription.unsubscribe();\n                                                      });\n                                                      subscriptions[modelDefinition.name][transformerMutationType] = [];\n                                                      operationAuthModeAttempts[operation]++;\n                                                      if (operationAuthModeAttempts[operation] >= readAuthModes.length) {\n                                                        // last auth mode retry. Continue with error\n                                                        logger.debug(operation + \" subscription failed with authMode: \" + readAuthModes[operationAuthModeAttempts[operation] - 1]);\n                                                      } else {\n                                                        // retry with different auth mode. Do not trigger\n                                                        // observer error or error handler\n                                                        logger.debug(operation + \" subscription failed with authMode: \" + readAuthModes[operationAuthModeAttempts[operation] - 1] + \". Retrying with authMode: \" + readAuthModes[operationAuthModeAttempts[operation]]);\n                                                        subscriptionRetry(operation);\n                                                        return [2 /*return*/];\n                                                      }\n                                                    }\n\n                                                    logger.warn('subscriptionError', message);\n                                                    _e.label = 1;\n                                                  case 1:\n                                                    _e.trys.push([1, 3,, 4]);\n                                                    return [4 /*yield*/, this.errorHandler({\n                                                      recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                                      localModel: null,\n                                                      message: message,\n                                                      model: modelDefinition.name,\n                                                      operation: operation,\n                                                      errorType: getSubscriptionErrorType(subscriptionError),\n                                                      process: ProcessName.subscribe,\n                                                      remoteModel: null,\n                                                      cause: subscriptionError\n                                                    })];\n                                                  case 2:\n                                                    _e.sent();\n                                                    return [3 /*break*/, 4];\n                                                  case 3:\n                                                    e_1 = _e.sent();\n                                                    logger.error('Subscription error handler failed with:', e_1);\n                                                    return [3 /*break*/, 4];\n                                                  case 4:\n                                                    if (typeof subscriptionReadyCallback === 'function') {\n                                                      subscriptionReadyCallback();\n                                                    }\n                                                    if (message.includes('\"errorType\":\"Unauthorized\"') || message.includes('\"errorType\":\"OperationDisabled\"')) {\n                                                      return [2 /*return*/];\n                                                    }\n\n                                                    observer.error(message);\n                                                    return [2 /*return*/];\n                                                }\n                                              });\n                                            });\n                                          }\n                                        }));\n\n                                        promises.push(function () {\n                                          return __awaiter(_this, void 0, void 0, function () {\n                                            var boundFunction;\n                                            var _this = this;\n                                            return __generator(this, function (_a) {\n                                              switch (_a.label) {\n                                                case 0:\n                                                  return [4 /*yield*/, new Promise(function (res) {\n                                                    subscriptionReadyCallback = res;\n                                                    boundFunction = _this.hubQueryCompletionListener.bind(_this, res);\n                                                    Hub.listen('api', boundFunction);\n                                                  })];\n                                                case 1:\n                                                  _a.sent();\n                                                  Hub.remove('api', boundFunction);\n                                                  return [2 /*return*/];\n                                              }\n                                            });\n                                          });\n                                        }());\n\n                                        return [2 /*return*/];\n                                    }\n                                  });\n                                });\n                              };\n\n                              operations.forEach(function (op) {\n                                return subscriptionRetry(op);\n                              });\n                              return [2 /*return*/];\n                          }\n                        });\n                      });\n                    });\n                  });\n                });\n\n                this.runningProcesses.isOpen && this.runningProcesses.add(function () {\n                  return Promise.all(promises).then(function () {\n                    observer.next(CONTROL_MSG.CONNECTED);\n                  });\n                });\n                return [2 /*return*/];\n            }\n          });\n        });\n      }, 'subscription processor new subscriber');\n      return _this.runningProcesses.addCleaner(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            Object.keys(subscriptions).forEach(function (modelName) {\n              subscriptions[modelName][TransformerMutationType.CREATE].forEach(function (subscription) {\n                return subscription.unsubscribe();\n              });\n              subscriptions[modelName][TransformerMutationType.UPDATE].forEach(function (subscription) {\n                return subscription.unsubscribe();\n              });\n              subscriptions[modelName][TransformerMutationType.DELETE].forEach(function (subscription) {\n                return subscription.unsubscribe();\n              });\n            });\n            return [2 /*return*/];\n          });\n        });\n      });\n    });\n\n    var dataObservable = new Observable(function (observer) {\n      _this.dataObserver = observer;\n      _this.drainBuffer();\n      return _this.runningProcesses.addCleaner(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            this.dataObserver = null;\n            return [2 /*return*/];\n          });\n        });\n      });\n    });\n\n    return [ctlObservable, dataObservable];\n  };\n  SubscriptionProcessor.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.runningProcesses.close()];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.runningProcesses.open()];\n          case 2:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  SubscriptionProcessor.prototype.passesPredicateValidation = function (record, predicatesGroup) {\n    if (!predicatesGroup) {\n      return true;\n    }\n    var predicates = predicatesGroup.predicates,\n      type = predicatesGroup.type;\n    return validatePredicate(record, type, predicates);\n  };\n  SubscriptionProcessor.prototype.pushToBuffer = function (transformerMutationType, modelDefinition, data) {\n    this.buffer.push([transformerMutationType, modelDefinition, data]);\n  };\n  SubscriptionProcessor.prototype.drainBuffer = function () {\n    var _this = this;\n    if (this.dataObserver) {\n      this.buffer.forEach(function (data) {\n        return _this.dataObserver.next(data);\n      });\n      this.buffer = [];\n    }\n  };\n  /**\n   * @returns true if the service returned an RTF subscription error\n   * @remarks logs a warning with remediation instructions\n   *\n   */\n  SubscriptionProcessor.prototype.catchRTFError = function (message, modelDefinition, predicatesGroup) {\n    var header = 'Backend subscriptions filtering error.\\n' + 'Subscriptions filtering will be applied clientside.\\n';\n    var messageErrorTypeMap = {\n      'UnknownArgument: Unknown field argument filter': RTFError.UnknownField,\n      'Filters exceed maximum attributes limit': RTFError.MaxAttributes,\n      'Filters combination exceed maximum limit': RTFError.MaxCombinations,\n      'filter uses same fieldName multiple time': RTFError.RepeatedFieldname,\n      \"The variables input contains a field name 'not'\": RTFError.NotGroup,\n      'The variables input contains a field that is not defined for input object type': RTFError.FieldNotInType\n    };\n    var _a = __read(Object.entries(messageErrorTypeMap).find(function (_a) {\n        var _b = __read(_a, 1),\n          errorMsg = _b[0];\n        return message.includes(errorMsg);\n      }) || [], 2),\n      _errorMsg = _a[0],\n      errorType = _a[1];\n    if (errorType !== undefined) {\n      var remediationMessage = generateRTFRemediation(errorType, modelDefinition, predicatesGroup);\n      logger.warn(header + \"\\n\" + message + \"\\n\" + remediationMessage);\n      return true;\n    }\n    return false;\n  };\n  return SubscriptionProcessor;\n}();\nexport { SubscriptionProcessor };","map":{"version":3,"mappings":"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","names":["GRAPHQL_AUTH_MODE","InternalAPI","Auth","Cache","Category","ConsoleLogger","Logger","DataStoreAction","Hub","BackgroundProcessManager","CONTROL_MSG","PUBSUB_CONTROL_MSG","Observable","ProcessName","buildSubscriptionGraphQLOperation","getAuthorizationRules","getModelAuthModes","getUserGroupsFromToken","TransformerMutationType","getTokenForCustomAuth","predicateToGraphQLFilter","RTFError","generateRTFRemediation","ModelPredicateCreator","validatePredicate","getSubscriptionErrorType","logger","USER_CREDENTIALS","schema","syncPredicates","amplifyConfig","authModeStrategy","errorHandler","amplifyContext","WeakMap","SubscriptionProcessor","namespace","model","transformerMutationType","userCredentials","cognitoTokenPayload","oidcTokenPayload","authMode","filterArg","isOwner","ownerField","ownerValue","opType","opName","query","defaultAuthType","rules","iamPrivateAuth","AWS_IAM","find","authStrategy","rule","provider","unauth","groupAuthRules","filter","includes","validGroup","AMAZON_COGNITO_USER_POOLS","OPENID_CONNECT","cognitoUserGroups","groupAuthRule","oidcUserGroups","__spread","groups","userGroup","cognitoOwnerAuthRules","ownerAuthInfo","forEach","ownerAuthRule","identityClaim","singleOwner","fields","isArray","isOwnerArgRequired","areSubscriptionsPublic","oidcOwnerAuthRules","completed","capsule","event","SUBSCRIPTION_ACK","runningProcesses","ctlObservable","promises","subscriptions","none","_this","add","currentCredentials","credentials","_b","authenticated","auth","currentSession","session","getIdToken","decodePayload","_a","aws_cognito_region","AuthConfig","region","token","getItem","federatedInfo","currentAuthenticatedUser","currentUser","payload","split","JSON","parse","Buffer","from","toString","debug","err_3","Object","values","namespaces","models","syncable","isOpen","defaultAuthMode","aws_appsync_authenticationType","modelName","modelDefinition","name","modelAuthModes","_d","readAuthModes","READ","CREATE","UPDATE","DELETE","operations","operationAuthModeAttempts","_c","predicatesGroup","getPredicates","get","addFilterArg","undefined","subscriptionRetry","operation","addFilter","buildSubscription","authToken","variables","customUserAgentDetails","category","DataStore","action","Subscribe","observer","error","queryObservable","graphql","push","map","value","subscribe","next","data","errors","Array","length","messages","message","warn","join","drainBuffer","record","passesPredicateValidation","pushToBuffer","subscriptionError","isRTFError","catchRTFError","unsubscribe","REALTIME_SUBSCRIPTION_INIT_ERROR","CONNECTION_FAILED","recoverySuggestion","localModel","errorType","process","remoteModel","cause","_e","e_1","subscriptionReadyCallback","Promise","res","boundFunction","hubQueryCompletionListener","bind","listen","remove","op","all","then","CONNECTED","addCleaner","keys","dataObservable","dataObserver","close","open","type","predicates","buffer","header","messageErrorTypeMap","UnknownField","MaxAttributes","MaxCombinations","RepeatedFieldname","NotGroup","FieldNotInType","_errorMsg","remediationMessage"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-amplify/datastore/src/sync/processors/subscription.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { GraphQLResult, GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport { InternalAPI } from '@aws-amplify/api/internals';\nimport { Auth } from '@aws-amplify/auth';\nimport { Cache } from '@aws-amplify/cache';\nimport {\n\tCategory,\n\tConsoleLogger as Logger,\n\tCustomUserAgentDetails,\n\tDataStoreAction,\n\tHub,\n\tHubCapsule,\n\tBackgroundProcessManager,\n} from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport {\n\tInternalSchema,\n\tPersistentModel,\n\tSchemaModel,\n\tSchemaNamespace,\n\tPredicatesGroup,\n\tModelPredicate,\n\tAuthModeStrategy,\n\tErrorHandler,\n\tProcessName,\n\tAmplifyContext,\n} from '../../types';\nimport {\n\tbuildSubscriptionGraphQLOperation,\n\tgetAuthorizationRules,\n\tgetModelAuthModes,\n\tgetUserGroupsFromToken,\n\tTransformerMutationType,\n\tgetTokenForCustomAuth,\n\tpredicateToGraphQLFilter,\n\tdynamicAuthFields,\n\tfilterFields,\n\trepeatedFieldInGroup,\n\tcountFilterCombinations,\n\tRTFError,\n\tgenerateRTFRemediation,\n} from '../utils';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { validatePredicate } from '../../util';\nimport { getSubscriptionErrorType } from './errorMaps';\n\nconst logger = new Logger('DataStore');\n\nexport enum CONTROL_MSG {\n\tCONNECTED = 'CONNECTED',\n}\n\nexport enum USER_CREDENTIALS {\n\t'none',\n\t'unauth',\n\t'auth',\n}\n\ntype AuthorizationInfo = {\n\tauthMode: GRAPHQL_AUTH_MODE;\n\tisOwner: boolean;\n\townerField?: string;\n\townerValue?: string;\n};\n\nclass SubscriptionProcessor {\n\tprivate readonly typeQuery = new WeakMap<\n\t\tSchemaModel,\n\t\t[TransformerMutationType, string, string][]\n\t>();\n\tprivate buffer: [TransformerMutationType, SchemaModel, PersistentModel][] =\n\t\t[];\n\tprivate dataObserver!: ZenObservable.Observer<any>;\n\n\tprivate runningProcesses = new BackgroundProcessManager();\n\n\tconstructor(\n\t\tprivate readonly schema: InternalSchema,\n\t\tprivate readonly syncPredicates: WeakMap<\n\t\t\tSchemaModel,\n\t\t\tModelPredicate<any> | null\n\t\t>,\n\t\tprivate readonly amplifyConfig: Record<string, any> = {},\n\t\tprivate readonly authModeStrategy: AuthModeStrategy,\n\t\tprivate readonly errorHandler: ErrorHandler,\n\t\tprivate readonly amplifyContext: AmplifyContext = {\n\t\t\tAuth,\n\t\t\tInternalAPI,\n\t\t\tCache,\n\t\t}\n\t) {}\n\n\tprivate buildSubscription(\n\t\tnamespace: SchemaNamespace,\n\t\tmodel: SchemaModel,\n\t\ttransformerMutationType: TransformerMutationType,\n\t\tuserCredentials: USER_CREDENTIALS,\n\t\tcognitoTokenPayload: { [field: string]: any } | undefined,\n\t\toidcTokenPayload: { [field: string]: any } | undefined,\n\t\tauthMode: GRAPHQL_AUTH_MODE,\n\t\tfilterArg: boolean = false\n\t): {\n\t\topType: TransformerMutationType;\n\t\topName: string;\n\t\tquery: string;\n\t\tauthMode: GRAPHQL_AUTH_MODE;\n\t\tisOwner: boolean;\n\t\townerField?: string;\n\t\townerValue?: string;\n\t} {\n\t\tconst { aws_appsync_authenticationType } = this.amplifyConfig;\n\t\tconst { isOwner, ownerField, ownerValue } =\n\t\t\tthis.getAuthorizationInfo(\n\t\t\t\tmodel,\n\t\t\t\tuserCredentials,\n\t\t\t\taws_appsync_authenticationType,\n\t\t\t\tcognitoTokenPayload,\n\t\t\t\toidcTokenPayload,\n\t\t\t\tauthMode\n\t\t\t) || {};\n\n\t\tconst [opType, opName, query] = buildSubscriptionGraphQLOperation(\n\t\t\tnamespace,\n\t\t\tmodel,\n\t\t\ttransformerMutationType,\n\t\t\tisOwner,\n\t\t\townerField!,\n\t\t\tfilterArg\n\t\t);\n\t\treturn { authMode, opType, opName, query, isOwner, ownerField, ownerValue };\n\t}\n\n\tprivate getAuthorizationInfo(\n\t\tmodel: SchemaModel,\n\t\tuserCredentials: USER_CREDENTIALS,\n\t\tdefaultAuthType: GRAPHQL_AUTH_MODE,\n\t\tcognitoTokenPayload: { [field: string]: any } = {},\n\t\toidcTokenPayload: { [field: string]: any } = {},\n\t\tauthMode: GRAPHQL_AUTH_MODE\n\t): AuthorizationInfo {\n\t\tconst rules = getAuthorizationRules(model);\n\n\t\t// Return null if user doesn't have proper credentials for private API with IAM auth\n\t\tconst iamPrivateAuth =\n\t\t\tauthMode === GRAPHQL_AUTH_MODE.AWS_IAM &&\n\t\t\trules.find(\n\t\t\t\trule => rule.authStrategy === 'private' && rule.provider === 'iam'\n\t\t\t);\n\n\t\tif (iamPrivateAuth && userCredentials === USER_CREDENTIALS.unauth) {\n\t\t\treturn null!;\n\t\t}\n\n\t\t// Group auth should take precedence over owner auth, so we are checking\n\t\t// if rule(s) have group authorization as well as if either the Cognito or\n\t\t// OIDC token has a groupClaim. If so, we are returning auth info before\n\t\t// any further owner-based auth checks.\n\t\tconst groupAuthRules = rules.filter(\n\t\t\trule =>\n\t\t\t\trule.authStrategy === 'groups' &&\n\t\t\t\t['userPools', 'oidc'].includes(rule.provider)\n\t\t);\n\n\t\tconst validGroup =\n\t\t\t(authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS ||\n\t\t\t\tauthMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT) &&\n\t\t\tgroupAuthRules.find(groupAuthRule => {\n\t\t\t\t// validate token against groupClaim\n\t\t\t\tconst cognitoUserGroups = getUserGroupsFromToken(\n\t\t\t\t\tcognitoTokenPayload,\n\t\t\t\t\tgroupAuthRule\n\t\t\t\t);\n\t\t\t\tconst oidcUserGroups = getUserGroupsFromToken(\n\t\t\t\t\toidcTokenPayload,\n\t\t\t\t\tgroupAuthRule\n\t\t\t\t);\n\n\t\t\t\treturn [...cognitoUserGroups, ...oidcUserGroups].find(userGroup => {\n\t\t\t\t\treturn groupAuthRule.groups.find(group => group === userGroup);\n\t\t\t\t});\n\t\t\t});\n\n\t\tif (validGroup) {\n\t\t\treturn {\n\t\t\t\tauthMode,\n\t\t\t\tisOwner: false,\n\t\t\t};\n\t\t}\n\n\t\t// Owner auth needs additional values to be returned in order to create the subscription with\n\t\t// the correct parameters so we are getting the owner value from the Cognito token via the\n\t\t// identityClaim from the auth rule.\n\t\tconst cognitoOwnerAuthRules =\n\t\t\tauthMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS\n\t\t\t\t? rules.filter(\n\t\t\t\t\t\trule =>\n\t\t\t\t\t\t\trule.authStrategy === 'owner' && rule.provider === 'userPools'\n\t\t\t\t  )\n\t\t\t\t: [];\n\n\t\tlet ownerAuthInfo: AuthorizationInfo;\n\t\tcognitoOwnerAuthRules.forEach(ownerAuthRule => {\n\t\t\tconst ownerValue = cognitoTokenPayload[ownerAuthRule.identityClaim];\n\n\t\t\t// AuthZ for \"list of owners\" is handled dynamically in the subscription auth request\n\t\t\t// resolver. It doesn't rely on a subscription arg.\n\t\t\t// Only pass a subscription arg for single owner auth\n\t\t\tconst singleOwner =\n\t\t\t\tmodel.fields[ownerAuthRule.ownerField]?.isArray !== true;\n\t\t\tconst isOwnerArgRequired =\n\t\t\t\tsingleOwner && !ownerAuthRule.areSubscriptionsPublic;\n\n\t\t\tif (ownerValue) {\n\t\t\t\townerAuthInfo = {\n\t\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n\t\t\t\t\tisOwner: isOwnerArgRequired,\n\t\t\t\t\townerField: ownerAuthRule.ownerField,\n\t\t\t\t\townerValue,\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tif (ownerAuthInfo!) {\n\t\t\treturn ownerAuthInfo!;\n\t\t}\n\n\t\t// Owner auth needs additional values to be returned in order to create the subscription with\n\t\t// the correct parameters so we are getting the owner value from the OIDC token via the\n\t\t// identityClaim from the auth rule.\n\t\tconst oidcOwnerAuthRules =\n\t\t\tauthMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT\n\t\t\t\t? rules.filter(\n\t\t\t\t\t\trule => rule.authStrategy === 'owner' && rule.provider === 'oidc'\n\t\t\t\t  )\n\t\t\t\t: [];\n\n\t\toidcOwnerAuthRules.forEach(ownerAuthRule => {\n\t\t\tconst ownerValue = oidcTokenPayload[ownerAuthRule.identityClaim];\n\n\t\t\tconst singleOwner =\n\t\t\t\tmodel.fields[ownerAuthRule.ownerField]?.isArray !== true;\n\t\t\tconst isOwnerArgRequired =\n\t\t\t\tsingleOwner && !ownerAuthRule.areSubscriptionsPublic;\n\n\t\t\tif (ownerValue) {\n\t\t\t\townerAuthInfo = {\n\t\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n\t\t\t\t\tisOwner: isOwnerArgRequired,\n\t\t\t\t\townerField: ownerAuthRule.ownerField,\n\t\t\t\t\townerValue,\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tif (ownerAuthInfo!) {\n\t\t\treturn ownerAuthInfo!;\n\t\t}\n\n\t\t// Fallback: return authMode or default auth type\n\t\treturn {\n\t\t\tauthMode: authMode || defaultAuthType,\n\t\t\tisOwner: false,\n\t\t};\n\t}\n\n\tprivate hubQueryCompletionListener(completed: Function, capsule: HubCapsule) {\n\t\tconst {\n\t\t\tpayload: { event },\n\t\t} = capsule;\n\n\t\tif (event === PUBSUB_CONTROL_MSG.SUBSCRIPTION_ACK) {\n\t\t\tcompleted();\n\t\t}\n\t}\n\n\tstart(): [\n\t\tObservable<CONTROL_MSG>,\n\t\tObservable<[TransformerMutationType, SchemaModel, PersistentModel]>\n\t] {\n\t\tthis.runningProcesses =\n\t\t\tthis.runningProcesses || new BackgroundProcessManager();\n\n\t\tconst ctlObservable = new Observable<CONTROL_MSG>(observer => {\n\t\t\tconst promises: Promise<void>[] = [];\n\n\t\t\t// Creating subs for each model/operation combo so they can be unsubscribed\n\t\t\t// independently, since the auth retry behavior is asynchronous.\n\t\t\tlet subscriptions: {\n\t\t\t\t[modelName: string]: {\n\t\t\t\t\t[TransformerMutationType.CREATE]: ZenObservable.Subscription[];\n\t\t\t\t\t[TransformerMutationType.UPDATE]: ZenObservable.Subscription[];\n\t\t\t\t\t[TransformerMutationType.DELETE]: ZenObservable.Subscription[];\n\t\t\t\t};\n\t\t\t} = {};\n\t\t\tlet cognitoTokenPayload: { [field: string]: any },\n\t\t\t\toidcTokenPayload: { [field: string]: any };\n\t\t\tlet userCredentials = USER_CREDENTIALS.none;\n\t\t\tthis.runningProcesses.add(async () => {\n\t\t\t\ttry {\n\t\t\t\t\t// retrieving current AWS Credentials\n\t\t\t\t\tconst credentials =\n\t\t\t\t\t\tawait this.amplifyContext.Auth.currentCredentials();\n\t\t\t\t\tuserCredentials = credentials.authenticated\n\t\t\t\t\t\t? USER_CREDENTIALS.auth\n\t\t\t\t\t\t: USER_CREDENTIALS.unauth;\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// best effort to get AWS credentials\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// retrieving current token info from Cognito UserPools\n\t\t\t\t\tconst session = await this.amplifyContext.Auth.currentSession();\n\t\t\t\t\tcognitoTokenPayload = session.getIdToken().decodePayload();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// best effort to get jwt from Cognito\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// Checking for the Cognito region in config to see if Auth is configured\n\t\t\t\t\t// before attempting to get federated token. We're using the Cognito region\n\t\t\t\t\t// because it will be there regardless of user/identity pool being present.\n\t\t\t\t\tconst { aws_cognito_region, Auth: AuthConfig } = this.amplifyConfig;\n\t\t\t\t\tif (!aws_cognito_region || (AuthConfig && !AuthConfig.region)) {\n\t\t\t\t\t\tthrow 'Auth is not configured';\n\t\t\t\t\t}\n\n\t\t\t\t\tlet token;\n\t\t\t\t\t// backwards compatibility\n\t\t\t\t\tconst federatedInfo = await this.amplifyContext.Cache.getItem(\n\t\t\t\t\t\t'federatedInfo'\n\t\t\t\t\t);\n\t\t\t\t\tif (federatedInfo) {\n\t\t\t\t\t\ttoken = federatedInfo.token;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst currentUser =\n\t\t\t\t\t\t\tawait this.amplifyContext.Auth.currentAuthenticatedUser();\n\t\t\t\t\t\tif (currentUser) {\n\t\t\t\t\t\t\ttoken = currentUser.token;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (token) {\n\t\t\t\t\t\tconst payload = token.split('.')[1];\n\t\t\t\t\t\toidcTokenPayload = JSON.parse(\n\t\t\t\t\t\t\tBuffer.from(payload, 'base64').toString('utf8')\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.debug('error getting OIDC JWT', err);\n\t\t\t\t\t// best effort to get oidc jwt\n\t\t\t\t}\n\n\t\t\t\tObject.values(this.schema.namespaces).forEach(namespace => {\n\t\t\t\t\tObject.values(namespace.models)\n\t\t\t\t\t\t.filter(({ syncable }) => syncable)\n\t\t\t\t\t\t.forEach(\n\t\t\t\t\t\t\tmodelDefinition =>\n\t\t\t\t\t\t\t\tthis.runningProcesses.isOpen &&\n\t\t\t\t\t\t\t\tthis.runningProcesses.add(async () => {\n\t\t\t\t\t\t\t\t\tconst modelAuthModes = await getModelAuthModes({\n\t\t\t\t\t\t\t\t\t\tauthModeStrategy: this.authModeStrategy,\n\t\t\t\t\t\t\t\t\t\tdefaultAuthMode:\n\t\t\t\t\t\t\t\t\t\t\tthis.amplifyConfig.aws_appsync_authenticationType,\n\t\t\t\t\t\t\t\t\t\tmodelName: modelDefinition.name,\n\t\t\t\t\t\t\t\t\t\tschema: this.schema,\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t// subscriptions are created only based on the READ auth mode(s)\n\t\t\t\t\t\t\t\t\tconst readAuthModes = modelAuthModes.READ;\n\n\t\t\t\t\t\t\t\t\tsubscriptions = {\n\t\t\t\t\t\t\t\t\t\t...subscriptions,\n\t\t\t\t\t\t\t\t\t\t[modelDefinition.name]: {\n\t\t\t\t\t\t\t\t\t\t\t[TransformerMutationType.CREATE]: [],\n\t\t\t\t\t\t\t\t\t\t\t[TransformerMutationType.UPDATE]: [],\n\t\t\t\t\t\t\t\t\t\t\t[TransformerMutationType.DELETE]: [],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tconst operations = [\n\t\t\t\t\t\t\t\t\t\tTransformerMutationType.CREATE,\n\t\t\t\t\t\t\t\t\t\tTransformerMutationType.UPDATE,\n\t\t\t\t\t\t\t\t\t\tTransformerMutationType.DELETE,\n\t\t\t\t\t\t\t\t\t];\n\n\t\t\t\t\t\t\t\t\tconst operationAuthModeAttempts = {\n\t\t\t\t\t\t\t\t\t\t[TransformerMutationType.CREATE]: 0,\n\t\t\t\t\t\t\t\t\t\t[TransformerMutationType.UPDATE]: 0,\n\t\t\t\t\t\t\t\t\t\t[TransformerMutationType.DELETE]: 0,\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tconst predicatesGroup = ModelPredicateCreator.getPredicates(\n\t\t\t\t\t\t\t\t\t\tthis.syncPredicates.get(modelDefinition)!,\n\t\t\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tconst addFilterArg = predicatesGroup !== undefined;\n\n\t\t\t\t\t\t\t\t\t// Retry subscriptions that failed for one of the following reasons:\n\t\t\t\t\t\t\t\t\t// 1. unauthorized - retry with next auth mode (if available)\n\t\t\t\t\t\t\t\t\t// 2. RTF error - retry without sending filter arg. (filtering will fall back to clientside)\n\t\t\t\t\t\t\t\t\tconst subscriptionRetry = async (\n\t\t\t\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\t\t\t\taddFilter = addFilterArg\n\t\t\t\t\t\t\t\t\t) => {\n\t\t\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\t\t\topType: transformerMutationType,\n\t\t\t\t\t\t\t\t\t\t\topName,\n\t\t\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\t\t\tisOwner,\n\t\t\t\t\t\t\t\t\t\t\townerField,\n\t\t\t\t\t\t\t\t\t\t\townerValue,\n\t\t\t\t\t\t\t\t\t\t\tauthMode,\n\t\t\t\t\t\t\t\t\t\t} = this.buildSubscription(\n\t\t\t\t\t\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\t\t\t\t\tuserCredentials,\n\t\t\t\t\t\t\t\t\t\t\tcognitoTokenPayload,\n\t\t\t\t\t\t\t\t\t\t\toidcTokenPayload,\n\t\t\t\t\t\t\t\t\t\t\treadAuthModes[operationAuthModeAttempts[operation]],\n\t\t\t\t\t\t\t\t\t\t\taddFilter\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\tconst authToken = await getTokenForCustomAuth(\n\t\t\t\t\t\t\t\t\t\t\tauthMode,\n\t\t\t\t\t\t\t\t\t\t\tthis.amplifyConfig\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\tconst variables = {};\n\n\t\t\t\t\t\t\t\t\t\tconst customUserAgentDetails: CustomUserAgentDetails = {\n\t\t\t\t\t\t\t\t\t\t\tcategory: Category.DataStore,\n\t\t\t\t\t\t\t\t\t\t\taction: DataStoreAction.Subscribe,\n\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\tif (addFilter && predicatesGroup) {\n\t\t\t\t\t\t\t\t\t\t\tvariables['filter'] =\n\t\t\t\t\t\t\t\t\t\t\t\tpredicateToGraphQLFilter(predicatesGroup);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (isOwner) {\n\t\t\t\t\t\t\t\t\t\t\tif (!ownerValue) {\n\t\t\t\t\t\t\t\t\t\t\t\tobserver.error(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'Owner field required, sign in is needed in order to perform this operation'\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tvariables[ownerField!] = ownerValue;\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t\t\t`Attempting ${operation} subscription with authMode: ${\n\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes[operationAuthModeAttempts[operation]]\n\t\t\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\tconst queryObservable = <\n\t\t\t\t\t\t\t\t\t\t\tObservable<{\n\t\t\t\t\t\t\t\t\t\t\t\tvalue: GraphQLResult<Record<string, PersistentModel>>;\n\t\t\t\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t\t\t>(<unknown>this.amplifyContext.InternalAPI.graphql(\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\t\t\t\tvariables,\n\t\t\t\t\t\t\t\t\t\t\t\t...{ authMode },\n\t\t\t\t\t\t\t\t\t\t\t\tauthToken,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\t\t\tcustomUserAgentDetails\n\t\t\t\t\t\t\t\t\t\t));\n\n\t\t\t\t\t\t\t\t\t\tlet subscriptionReadyCallback: () => void;\n\n\t\t\t\t\t\t\t\t\t\t// TODO: consider onTerminate.then(() => API.cancel(...))\n\n\t\t\t\t\t\t\t\t\t\tsubscriptions[modelDefinition.name][\n\t\t\t\t\t\t\t\t\t\t\ttransformerMutationType\n\t\t\t\t\t\t\t\t\t\t].push(\n\t\t\t\t\t\t\t\t\t\t\tqueryObservable\n\t\t\t\t\t\t\t\t\t\t\t\t.map(({ value }) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t.subscribe({\n\t\t\t\t\t\t\t\t\t\t\t\t\tnext: ({ data, errors }) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (Array.isArray(errors) && errors.length > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst messages = (<\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage: string;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}[]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>errors).map(({ message }) => message);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`Skipping incoming subscription. Messages: ${messages.join(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'\\n'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.drainBuffer();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst predicatesGroup =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tModelPredicateCreator.getPredicates(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.syncPredicates.get(modelDefinition)!,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst { [opName]: record } = data;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// checking incoming subscription against syncPredicate.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// once AppSync implements filters on subscriptions, we'll be\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// able to set these when establishing the subscription instead.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Until then, we'll need to filter inbound\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.passesPredicateValidation(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trecord,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpredicatesGroup!\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.pushToBuffer(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformerMutationType,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trecord\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.drainBuffer();\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\terror: async subscriptionError => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terror: { errors: [{ message = '' } = {}] } = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terrors: [],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} = subscriptionError;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst isRTFError =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// only attempt catch if a filter variable was added to the subscription query\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taddFilter &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.catchRTFError(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpredicatesGroup\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Catch RTF errors\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (isRTFError) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Unsubscribe and clear subscription array for model/operation\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptions[modelDefinition.name][\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformerMutationType\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t].forEach(subscription =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubscription.unsubscribe()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptions[modelDefinition.name][\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformerMutationType\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t] = [];\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// retry subscription connection without filter\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptionRetry(operation, false);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.includes(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tPUBSUB_CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.includes(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tPUBSUB_CONTROL_MSG.CONNECTION_FAILED\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Unsubscribe and clear subscription array for model/operation\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptions[modelDefinition.name][\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformerMutationType\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t].forEach(subscription =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubscription.unsubscribe()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptions[modelDefinition.name][\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformerMutationType\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t] = [];\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation]++;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation] >=\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes.length\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// last auth mode retry. Continue with error\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`${operation} subscription failed with authMode: ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation] - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// retry with different auth mode. Do not trigger\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// observer error or error handler\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`${operation} subscription failed with authMode: ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation] - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}. Retrying with authMode: ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptionRetry(operation);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.warn('subscriptionError', message);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tawait this.errorHandler({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trecoverySuggestion:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocalModel: null!,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel: modelDefinition.name,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terrorType:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetSubscriptionErrorType(subscriptionError),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprocess: ProcessName.subscribe,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tremoteModel: null!,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcause: subscriptionError,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Subscription error handler failed with:',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttypeof subscriptionReadyCallback === 'function'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptionReadyCallback();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.includes('\"errorType\":\"Unauthorized\"') ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.includes(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'\"errorType\":\"OperationDisabled\"'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tobserver.error(message);\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\tpromises.push(\n\t\t\t\t\t\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\t\t\t\t\t\tlet boundFunction: any;\n\n\t\t\t\t\t\t\t\t\t\t\t\tawait new Promise(res => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptionReadyCallback = res;\n\t\t\t\t\t\t\t\t\t\t\t\t\tboundFunction = this.hubQueryCompletionListener.bind(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tres\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\tHub.listen('api', boundFunction);\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\tHub.remove('api', boundFunction);\n\t\t\t\t\t\t\t\t\t\t\t})()\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\toperations.forEach(op => subscriptionRetry(op));\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tthis.runningProcesses.isOpen &&\n\t\t\t\t\tthis.runningProcesses.add(() =>\n\t\t\t\t\t\tPromise.all(promises).then(() => {\n\t\t\t\t\t\t\tobserver.next(CONTROL_MSG.CONNECTED);\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t}, 'subscription processor new subscriber');\n\n\t\t\treturn this.runningProcesses.addCleaner(async () => {\n\t\t\t\tObject.keys(subscriptions).forEach(modelName => {\n\t\t\t\t\tsubscriptions[modelName][TransformerMutationType.CREATE].forEach(\n\t\t\t\t\t\tsubscription => subscription.unsubscribe()\n\t\t\t\t\t);\n\t\t\t\t\tsubscriptions[modelName][TransformerMutationType.UPDATE].forEach(\n\t\t\t\t\t\tsubscription => subscription.unsubscribe()\n\t\t\t\t\t);\n\t\t\t\t\tsubscriptions[modelName][TransformerMutationType.DELETE].forEach(\n\t\t\t\t\t\tsubscription => subscription.unsubscribe()\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tconst dataObservable = new Observable<\n\t\t\t[TransformerMutationType, SchemaModel, PersistentModel]\n\t\t>(observer => {\n\t\t\tthis.dataObserver = observer;\n\t\t\tthis.drainBuffer();\n\n\t\t\treturn this.runningProcesses.addCleaner(async () => {\n\t\t\t\tthis.dataObserver = null!;\n\t\t\t});\n\t\t});\n\n\t\treturn [ctlObservable, dataObservable];\n\t}\n\n\tpublic async stop() {\n\t\tawait this.runningProcesses.close();\n\t\tawait this.runningProcesses.open();\n\t}\n\n\tprivate passesPredicateValidation(\n\t\trecord: PersistentModel,\n\t\tpredicatesGroup: PredicatesGroup<any>\n\t): boolean {\n\t\tif (!predicatesGroup) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst { predicates, type } = predicatesGroup;\n\n\t\treturn validatePredicate(record, type, predicates);\n\t}\n\n\tprivate pushToBuffer(\n\t\ttransformerMutationType: TransformerMutationType,\n\t\tmodelDefinition: SchemaModel,\n\t\tdata: PersistentModel\n\t) {\n\t\tthis.buffer.push([transformerMutationType, modelDefinition, data]);\n\t}\n\n\tprivate drainBuffer() {\n\t\tif (this.dataObserver) {\n\t\t\tthis.buffer.forEach(data => this.dataObserver.next!(data));\n\t\t\tthis.buffer = [];\n\t\t}\n\t}\n\n\t/**\n\t * @returns true if the service returned an RTF subscription error\n\t * @remarks logs a warning with remediation instructions\n\t *\n\t */\n\tprivate catchRTFError(\n\t\tmessage: string,\n\t\tmodelDefinition: SchemaModel,\n\t\tpredicatesGroup: PredicatesGroup<any> | undefined\n\t): boolean {\n\t\tconst header =\n\t\t\t'Backend subscriptions filtering error.\\n' +\n\t\t\t'Subscriptions filtering will be applied clientside.\\n';\n\n\t\tconst messageErrorTypeMap = {\n\t\t\t'UnknownArgument: Unknown field argument filter': RTFError.UnknownField,\n\t\t\t'Filters exceed maximum attributes limit': RTFError.MaxAttributes,\n\t\t\t'Filters combination exceed maximum limit': RTFError.MaxCombinations,\n\t\t\t'filter uses same fieldName multiple time': RTFError.RepeatedFieldname,\n\t\t\t\"The variables input contains a field name 'not'\": RTFError.NotGroup,\n\t\t\t'The variables input contains a field that is not defined for input object type':\n\t\t\t\tRTFError.FieldNotInType,\n\t\t};\n\n\t\tconst [_errorMsg, errorType] =\n\t\t\tObject.entries(messageErrorTypeMap).find(([errorMsg]) =>\n\t\t\t\tmessage.includes(errorMsg)\n\t\t\t) || [];\n\n\t\tif (errorType !== undefined) {\n\t\t\tconst remediationMessage = generateRTFRemediation(\n\t\t\t\terrorType,\n\t\t\t\tmodelDefinition,\n\t\t\t\tpredicatesGroup\n\t\t\t);\n\n\t\t\tlogger.warn(`${header}\\n${message}\\n${remediationMessage}`);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\nexport { SubscriptionProcessor };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}