{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __awaiter, __generator, __read, __spread } from \"tslib\";\nvar eventListeners = {};\nexport var notifyEventListeners = function (type) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  var _a;\n  (_a = eventListeners[type]) === null || _a === void 0 ? void 0 : _a.forEach(function (listener) {\n    listener.handleEvent.apply(listener, __spread(args));\n  });\n};\nexport var notifyEventListenersAndAwaitHandlers = function (type) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  var _a;\n  return Promise.all(Array.from((_a = eventListeners[type]) !== null && _a !== void 0 ? _a : []).map(function (listener) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, listener.handleEvent.apply(listener, __spread(args))];\n          case 1:\n            _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            err_1 = _a.sent();\n            throw err_1;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  }));\n};\n\nexport var addEventListener = function (type, handler) {\n  // If there is no listener set for the event type, just create it\n  if (!eventListeners[type]) {\n    eventListeners[type] = new Set();\n  }\n  var listener = {\n    handleEvent: handler,\n    remove: function () {\n      eventListeners[type].delete(listener);\n    }\n  };\n  eventListeners[type].add(listener);\n  return listener;\n};","map":{"version":3,"mappings":"AAAA;AACA;;AAIA,IAAMA,cAAc,GAAiD,EAAE;AAEvE,OAAO,IAAMC,oBAAoB,GAAG,UAACC,IAAe;EAAE;OAAA,UAAc,EAAdC,qBAAc,EAAdA,IAAc;IAAdC;;;EACrD,oBAAc,CAACF,IAAI,CAAC,0CAAEG,OAAO,CAAC,kBAAQ;IACrCC,QAAQ,CAACC,WAAW,OAApBD,QAAQ,WAAgBF,IAAI;EAC7B,CAAC;AACF,CAAC;AAED,OAAO,IAAMI,oCAAoC,GAAG,UACnDN,IAAe;EACf;OAAA,UAAc,EAAdC,qBAAc,EAAdA,IAAc;IAAdC;;;EAEA,cAAO,CAACK,GAAG,CACVC,KAAK,CAACC,IAAI,OAACX,cAAc,CAACE,IAAI,CAAC,mCAAI,EAAE,CAAC,CAACU,GAAG,CAAC,UAAMN,QAAQ;IAAA;;;;;;YAEvD,qBAAMA,QAAQ,CAACC,WAAW,OAApBD,QAAQ,WAAgBF,IAAI;;YAAlCS,SAAmC;;;;YAEnC,MAAMC,KAAG;;;;;;GAEV,CAAC,CACF;CAAA;;AAEF,OAAO,IAAMC,gBAAgB,GAAG,UAC/Bb,IAAe,EACfc,OAAqB;EAErB;EACA,IAAI,CAAChB,cAAc,CAACE,IAAI,CAAC,EAAE;IAC1BF,cAAc,CAACE,IAAI,CAAC,GAAG,IAAIe,GAAG,EAA+B;;EAE9D,IAAMX,QAAQ,GAAG;IAChBC,WAAW,EAAES,OAAO;IACpBE,MAAM,EAAE;MACPlB,cAAc,CAACE,IAAI,CAAC,CAACiB,MAAM,CAACb,QAAQ,CAAC;IACtC;GACA;EACDN,cAAc,CAACE,IAAI,CAAC,CAACkB,GAAG,CAACd,QAAQ,CAAC;EAClC,OAAOA,QAAQ;AAChB,CAAC","names":["eventListeners","notifyEventListeners","type","_i","args","forEach","listener","handleEvent","notifyEventListenersAndAwaitHandlers","all","Array","from","map","_a","err_1","addEventListener","handler","Set","remove","delete","add"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-amplify/notifications/src/common/eventListeners/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { EventListener, EventType } from './types';\n\nconst eventListeners: Record<string, Set<EventListener<Function>>> = {};\n\nexport const notifyEventListeners = (type: EventType, ...args: any[]): void => {\n\teventListeners[type]?.forEach(listener => {\n\t\tlistener.handleEvent(...args);\n\t});\n};\n\nexport const notifyEventListenersAndAwaitHandlers = (\n\ttype: EventType,\n\t...args: any[]\n): Promise<void[]> =>\n\tPromise.all<void>(\n\t\tArray.from(eventListeners[type] ?? []).map(async listener => {\n\t\t\ttry {\n\t\t\t\tawait listener.handleEvent(...args);\n\t\t\t} catch (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t})\n\t);\n\nexport const addEventListener = <EventHandler extends Function>(\n\ttype: EventType,\n\thandler: EventHandler\n): EventListener<EventHandler> => {\n\t// If there is no listener set for the event type, just create it\n\tif (!eventListeners[type]) {\n\t\teventListeners[type] = new Set<EventListener<EventHandler>>();\n\t}\n\tconst listener = {\n\t\thandleEvent: handler,\n\t\tremove: () => {\n\t\t\teventListeners[type].delete(listener);\n\t\t},\n\t};\n\teventListeners[type].add(listener);\n\treturn listener;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}