{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spread, __values } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Buffer } from 'buffer';\nimport { monotonicFactory } from 'ulid';\nimport { v4 as uuid } from 'uuid';\nimport { produce, applyPatches } from 'immer';\nimport { isPredicateGroup, isPredicateObj, SortDirection, isModelAttributeKey, isModelAttributePrimaryKey, isModelAttributeCompositeKey, LimitTimerRaceResolvedValues } from './types';\nimport { WordArray } from 'amazon-cognito-identity-js';\nimport { ModelSortPredicateCreator } from './predicates';\nexport var ID = 'id';\n/**\n * Used by the Async Storage Adapter to concatenate key values\n * for a record. For instance, if a model has the following keys:\n * `customId: ID! @primaryKey(sortKeyFields: [\"createdAt\"])`,\n * we concatenate the `customId` and `createdAt` as:\n * `12-234-5#2022-09-28T00:00:00.000Z`\n */\nexport var DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR = '#';\n/**\n * Used for generating spinal-cased index name from an array of\n * key field names.\n * E.g. for keys `[id, title]` => 'id-title'\n */\nexport var IDENTIFIER_KEY_SEPARATOR = '-';\nexport var errorMessages = {\n  idEmptyString: 'An index field cannot contain an empty string value',\n  queryByPkWithCompositeKeyPresent: 'Models with composite primary keys cannot be queried by a single key value. Use object literal syntax for composite keys instead: https://docs.amplify.aws/lib/datastore/advanced-workflows/q/platform/js/#querying-records-with-custom-primary-keys',\n  deleteByPkWithCompositeKeyPresent: 'Models with composite primary keys cannot be deleted by a single key value, unless using a predicate. Use object literal syntax for composite keys instead: https://docs.amplify.aws/lib/datastore/advanced-workflows/q/platform/js/#querying-records-with-custom-primary-keys',\n  observeWithObjectLiteral: 'Object literal syntax cannot be used with observe. Use a predicate instead: https://docs.amplify.aws/lib/datastore/data-access/q/platform/js/#predicates'\n};\nexport var NAMESPACES;\n(function (NAMESPACES) {\n  NAMESPACES[\"DATASTORE\"] = \"datastore\";\n  NAMESPACES[\"USER\"] = \"user\";\n  NAMESPACES[\"SYNC\"] = \"sync\";\n  NAMESPACES[\"STORAGE\"] = \"storage\";\n})(NAMESPACES || (NAMESPACES = {}));\nvar DATASTORE = NAMESPACES.DATASTORE;\nvar USER = NAMESPACES.USER;\nvar SYNC = NAMESPACES.SYNC;\nvar STORAGE = NAMESPACES.STORAGE;\nexport { USER, SYNC, STORAGE, DATASTORE };\nexport var exhaustiveCheck = function (obj, throwOnError) {\n  if (throwOnError === void 0) {\n    throwOnError = true;\n  }\n  if (throwOnError) {\n    throw new Error(\"Invalid \" + obj);\n  }\n};\nexport var isNullOrUndefined = function (val) {\n  return typeof val === 'undefined' || val === undefined || val === null;\n};\nexport var validatePredicate = function (model, groupType, predicatesOrGroups) {\n  var filterType;\n  var isNegation = false;\n  if (predicatesOrGroups.length === 0) {\n    return true;\n  }\n  switch (groupType) {\n    case 'not':\n      filterType = 'every';\n      isNegation = true;\n      break;\n    case 'and':\n      filterType = 'every';\n      break;\n    case 'or':\n      filterType = 'some';\n      break;\n    default:\n      throw new Error(\"Invalid \" + groupType);\n  }\n  var result = predicatesOrGroups[filterType](function (predicateOrGroup) {\n    if (isPredicateObj(predicateOrGroup)) {\n      var field = predicateOrGroup.field,\n        operator = predicateOrGroup.operator,\n        operand = predicateOrGroup.operand;\n      var value = model[field];\n      return validatePredicateField(value, operator, operand);\n    }\n    if (isPredicateGroup(predicateOrGroup)) {\n      var type = predicateOrGroup.type,\n        predicates = predicateOrGroup.predicates;\n      return validatePredicate(model, type, predicates);\n    }\n    throw new Error('Not a predicate or group');\n  });\n  return isNegation ? !result : result;\n};\nexport var validatePredicateField = function (value, operator, operand) {\n  switch (operator) {\n    case 'ne':\n      return value !== operand;\n    case 'eq':\n      return value === operand;\n    case 'le':\n      return value <= operand;\n    case 'lt':\n      return value < operand;\n    case 'ge':\n      return value >= operand;\n    case 'gt':\n      return value > operand;\n    case 'between':\n      var _c = __read(operand, 2),\n        min = _c[0],\n        max = _c[1];\n      return value >= min && value <= max;\n    case 'beginsWith':\n      return !isNullOrUndefined(value) && value.startsWith(operand);\n    case 'contains':\n      return !isNullOrUndefined(value) && value.indexOf(operand) > -1;\n    case 'notContains':\n      return isNullOrUndefined(value) || value.indexOf(operand) === -1;\n    default:\n      return false;\n  }\n};\nexport var isModelConstructor = function (obj) {\n  return obj && typeof obj.copyOf === 'function';\n};\nvar nonModelClasses = new WeakSet();\nexport function registerNonModelClass(clazz) {\n  nonModelClasses.add(clazz);\n}\nexport var isNonModelConstructor = function (obj) {\n  return nonModelClasses.has(obj);\n};\nvar topologicallySortedModels = new WeakMap();\nexport var traverseModel = function (srcModelName, instance, namespace, modelInstanceCreator, getModelConstructorByModelName) {\n  var modelConstructor = getModelConstructorByModelName(namespace.name, srcModelName);\n  var result = [];\n  var newInstance = modelConstructor.copyOf(instance, function () {});\n  result.unshift({\n    modelName: srcModelName,\n    item: newInstance,\n    instance: newInstance\n  });\n  if (!topologicallySortedModels.has(namespace)) {\n    topologicallySortedModels.set(namespace, Array.from(namespace.modelTopologicalOrdering.keys()));\n  }\n  var sortedModels = topologicallySortedModels.get(namespace);\n  result.sort(function (a, b) {\n    return sortedModels.indexOf(a.modelName) - sortedModels.indexOf(b.modelName);\n  });\n  return result;\n};\nvar privateModeCheckResult;\nexport var isPrivateMode = function () {\n  return new Promise(function (resolve) {\n    var dbname = uuid();\n    var db;\n    var isPrivate = function () {\n      privateModeCheckResult = false;\n      resolve(true);\n    };\n    var isNotPrivate = function () {\n      return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              if (!(db && db.result && typeof db.result.close === 'function')) return [3 /*break*/, 2];\n              return [4 /*yield*/, db.result.close()];\n            case 1:\n              _c.sent();\n              _c.label = 2;\n            case 2:\n              return [4 /*yield*/, indexedDB.deleteDatabase(dbname)];\n            case 3:\n              _c.sent();\n              privateModeCheckResult = true;\n              return [2 /*return*/, resolve(false)];\n          }\n        });\n      });\n    };\n    if (privateModeCheckResult === true) {\n      return isNotPrivate();\n    }\n    if (privateModeCheckResult === false) {\n      return isPrivate();\n    }\n    if (indexedDB === null) return isPrivate();\n    db = indexedDB.open(dbname);\n    db.onerror = isPrivate;\n    db.onsuccess = isNotPrivate;\n  });\n};\nvar safariCompatabilityModeResult;\n/**\n * Whether the browser's implementation of IndexedDB breaks on array lookups\n * against composite indexes whose keypath contains a single column.\n *\n * E.g., Whether `store.createIndex(indexName, ['id'])` followed by\n * `store.index(indexName).get([1])` will *ever* return records.\n *\n * In all known, modern Safari browsers as of Q4 2022, the query against an index like\n * this will *always* return `undefined`. So, the index needs to be created as a scalar.\n */\nexport var isSafariCompatabilityMode = function () {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var dbName_1, storeName_1, indexName_1, db_1, rwTx, rwStore, result, error_1;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _c.trys.push([0, 6,, 7]);\n          dbName_1 = uuid();\n          storeName_1 = 'indexedDBFeatureProbeStore';\n          indexName_1 = 'idx';\n          if (indexedDB === null) return [2 /*return*/, false];\n          if (safariCompatabilityModeResult !== undefined) {\n            return [2 /*return*/, safariCompatabilityModeResult];\n          }\n          return [4 /*yield*/, new Promise(function (resolve) {\n            var dbOpenRequest = indexedDB.open(dbName_1);\n            dbOpenRequest.onerror = function () {\n              return resolve(false);\n            };\n            dbOpenRequest.onsuccess = function () {\n              var db = dbOpenRequest.result;\n              resolve(db);\n            };\n            dbOpenRequest.onupgradeneeded = function (event) {\n              var _c;\n              var db = (_c = event === null || event === void 0 ? void 0 : event.target) === null || _c === void 0 ? void 0 : _c.result;\n              db.onerror = function () {\n                return resolve(false);\n              };\n              var store = db.createObjectStore(storeName_1, {\n                autoIncrement: true\n              });\n              store.createIndex(indexName_1, ['id']);\n            };\n          })];\n        case 1:\n          db_1 = _c.sent();\n          if (!db_1) {\n            throw new Error('Could not open probe DB');\n          }\n          rwTx = db_1.transaction(storeName_1, 'readwrite');\n          rwStore = rwTx.objectStore(storeName_1);\n          rwStore.add({\n            id: 1\n          });\n          rwTx.commit();\n          return [4 /*yield*/, new Promise(function (resolve) {\n            var tx = db_1.transaction(storeName_1, 'readonly');\n            var store = tx.objectStore(storeName_1);\n            var index = store.index(indexName_1);\n            var getRequest = index.get([1]);\n            getRequest.onerror = function () {\n              return resolve(false);\n            };\n            getRequest.onsuccess = function (event) {\n              var _c;\n              resolve((_c = event === null || event === void 0 ? void 0 : event.target) === null || _c === void 0 ? void 0 : _c.result);\n            };\n          })];\n        case 2:\n          result = _c.sent();\n          if (!(db_1 && typeof db_1.close === 'function')) return [3 /*break*/, 4];\n          return [4 /*yield*/, db_1.close()];\n        case 3:\n          _c.sent();\n          _c.label = 4;\n        case 4:\n          return [4 /*yield*/, indexedDB.deleteDatabase(dbName_1)];\n        case 5:\n          _c.sent();\n          if (result === undefined) {\n            safariCompatabilityModeResult = true;\n          } else {\n            safariCompatabilityModeResult = false;\n          }\n          return [3 /*break*/, 7];\n        case 6:\n          error_1 = _c.sent();\n          safariCompatabilityModeResult = false;\n          return [3 /*break*/, 7];\n        case 7:\n          return [2 /*return*/, safariCompatabilityModeResult];\n      }\n    });\n  });\n};\nvar randomBytes = function (nBytes) {\n  return Buffer.from(new WordArray().random(nBytes).toString(), 'hex');\n};\nvar prng = function () {\n  return randomBytes(1).readUInt8(0) / 0xff;\n};\nexport function monotonicUlidFactory(seed) {\n  var ulid = monotonicFactory(prng);\n  return function () {\n    return ulid(seed);\n  };\n}\n/**\n * Uses performance.now() if available, otherwise, uses Date.now() (e.g. react native without a polyfill)\n *\n * The values returned by performance.now() always increase at a constant rate,\n * independent of the system clock (which might be adjusted manually or skewed\n * by software like NTP).\n *\n * Otherwise, performance.timing.navigationStart + performance.now() will be\n * approximately equal to Date.now()\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Performance/now#Example\n */\nexport function getNow() {\n  if (typeof performance !== 'undefined' && performance && typeof performance.now === 'function') {\n    return performance.now() | 0; // convert to integer\n  } else {\n    return Date.now();\n  }\n}\nexport function sortCompareFunction(sortPredicates) {\n  return function compareFunction(a, b) {\n    var e_1, _c;\n    try {\n      // enable multi-field sort by iterating over predicates until\n      // a comparison returns -1 or 1\n      for (var sortPredicates_1 = __values(sortPredicates), sortPredicates_1_1 = sortPredicates_1.next(); !sortPredicates_1_1.done; sortPredicates_1_1 = sortPredicates_1.next()) {\n        var predicate = sortPredicates_1_1.value;\n        var field = predicate.field,\n          sortDirection = predicate.sortDirection;\n        // reverse result when direction is descending\n        var sortMultiplier = sortDirection === SortDirection.ASCENDING ? 1 : -1;\n        if (a[field] < b[field]) {\n          return -1 * sortMultiplier;\n        }\n        if (a[field] > b[field]) {\n          return 1 * sortMultiplier;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (sortPredicates_1_1 && !sortPredicates_1_1.done && (_c = sortPredicates_1.return)) _c.call(sortPredicates_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return 0;\n  };\n}\n// deep compare any 2 values\n// primitives or object types (including arrays, Sets, and Maps)\n// returns true if equal by value\n// if nullish is true, treat undefined and null values as equal\n// to normalize for GQL response values for undefined fields\nexport function valuesEqual(valA, valB, nullish) {\n  var e_2, _c;\n  if (nullish === void 0) {\n    nullish = false;\n  }\n  var a = valA;\n  var b = valB;\n  var nullishCompare = function (_a, _b) {\n    return (_a === undefined || _a === null) && (_b === undefined || _b === null);\n  };\n  // if one of the values is a primitive and the other is an object\n  if (a instanceof Object && !(b instanceof Object) || !(a instanceof Object) && b instanceof Object) {\n    return false;\n  }\n  // compare primitive types\n  if (!(a instanceof Object)) {\n    if (nullish && nullishCompare(a, b)) {\n      return true;\n    }\n    return a === b;\n  }\n  // make sure object types match\n  if (Array.isArray(a) && !Array.isArray(b) || Array.isArray(b) && !Array.isArray(a)) {\n    return false;\n  }\n  if (a instanceof Set && b instanceof Set) {\n    a = __spread(a);\n    b = __spread(b);\n  }\n  if (a instanceof Map && b instanceof Map) {\n    a = Object.fromEntries(a);\n    b = Object.fromEntries(b);\n  }\n  var aKeys = Object.keys(a);\n  var bKeys = Object.keys(b);\n  // last condition is to ensure that [] !== [null] even if nullish. However [undefined] === [null] when nullish\n  if (aKeys.length !== bKeys.length && (!nullish || Array.isArray(a))) {\n    return false;\n  }\n  // iterate through the longer set of keys\n  // e.g., for a nullish comparison of a={ a: 1 } and b={ a: 1, b: null }\n  // we want to iterate through bKeys\n  var keys = aKeys.length >= bKeys.length ? aKeys : bKeys;\n  try {\n    for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n      var key = keys_1_1.value;\n      var aVal = a[key];\n      var bVal = b[key];\n      if (!valuesEqual(aVal, bVal, nullish)) {\n        return false;\n      }\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (keys_1_1 && !keys_1_1.done && (_c = keys_1.return)) _c.call(keys_1);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n  return true;\n}\n/**\n * Statelessly extracts the specified page from an array.\n *\n * @param records - The source array to extract a page from.\n * @param pagination - A definition of the page to extract.\n * @returns This items from `records` matching the `pagination` definition.\n */\nexport function inMemoryPagination(records, pagination) {\n  if (pagination && records.length > 1) {\n    if (pagination.sort) {\n      var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n      if (sortPredicates.length) {\n        var compareFn = sortCompareFunction(sortPredicates);\n        records.sort(compareFn);\n      }\n    }\n    var _c = pagination.page,\n      page = _c === void 0 ? 0 : _c,\n      _d = pagination.limit,\n      limit = _d === void 0 ? 0 : _d;\n    var start = Math.max(0, page * limit) || 0;\n    var end = limit > 0 ? start + limit : records.length;\n    return records.slice(start, end);\n  }\n  return records;\n}\n/**\n * An `aysnc` implementation of `Array.some()`. Returns as soon as a match is found.\n * @param items The items to check.\n * @param matches The async matcher function, expected to\n * return Promise<boolean>: `true` for a matching item, `false` otherwise.\n * @returns A `Promise<boolean>`, `true` if \"some\" items match; `false` otherwise.\n */\nexport function asyncSome(items, matches) {\n  return __awaiter(this, void 0, void 0, function () {\n    var items_1, items_1_1, item, e_3_1;\n    var e_3, _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _d.trys.push([0, 5, 6, 7]);\n          items_1 = __values(items), items_1_1 = items_1.next();\n          _d.label = 1;\n        case 1:\n          if (!!items_1_1.done) return [3 /*break*/, 4];\n          item = items_1_1.value;\n          return [4 /*yield*/, matches(item)];\n        case 2:\n          if (_d.sent()) {\n            return [2 /*return*/, true];\n          }\n          _d.label = 3;\n        case 3:\n          items_1_1 = items_1.next();\n          return [3 /*break*/, 1];\n        case 4:\n          return [3 /*break*/, 7];\n        case 5:\n          e_3_1 = _d.sent();\n          e_3 = {\n            error: e_3_1\n          };\n          return [3 /*break*/, 7];\n        case 6:\n          try {\n            if (items_1_1 && !items_1_1.done && (_c = items_1.return)) _c.call(items_1);\n          } finally {\n            if (e_3) throw e_3.error;\n          }\n          return [7 /*endfinally*/];\n        case 7:\n          return [2 /*return*/, false];\n      }\n    });\n  });\n}\n/**\n * An `aysnc` implementation of `Array.every()`. Returns as soon as a non-match is found.\n * @param items The items to check.\n * @param matches The async matcher function, expected to\n * return Promise<boolean>: `true` for a matching item, `false` otherwise.\n * @returns A `Promise<boolean>`, `true` if every item matches; `false` otherwise.\n */\nexport function asyncEvery(items, matches) {\n  return __awaiter(this, void 0, void 0, function () {\n    var items_2, items_2_1, item, e_4_1;\n    var e_4, _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _d.trys.push([0, 5, 6, 7]);\n          items_2 = __values(items), items_2_1 = items_2.next();\n          _d.label = 1;\n        case 1:\n          if (!!items_2_1.done) return [3 /*break*/, 4];\n          item = items_2_1.value;\n          return [4 /*yield*/, matches(item)];\n        case 2:\n          if (!_d.sent()) {\n            return [2 /*return*/, false];\n          }\n          _d.label = 3;\n        case 3:\n          items_2_1 = items_2.next();\n          return [3 /*break*/, 1];\n        case 4:\n          return [3 /*break*/, 7];\n        case 5:\n          e_4_1 = _d.sent();\n          e_4 = {\n            error: e_4_1\n          };\n          return [3 /*break*/, 7];\n        case 6:\n          try {\n            if (items_2_1 && !items_2_1.done && (_c = items_2.return)) _c.call(items_2);\n          } finally {\n            if (e_4) throw e_4.error;\n          }\n          return [7 /*endfinally*/];\n        case 7:\n          return [2 /*return*/, true];\n      }\n    });\n  });\n}\n/**\n * An `async` implementation of `Array.filter()`. Returns after all items have been filtered.\n * TODO: Return AsyncIterable.\n * @param items The items to filter.\n * @param matches The `async` matcher function, expected to\n * return Promise<boolean>: `true` for a matching item, `false` otherwise.\n * @returns A `Promise<T>` of matching items.\n */\nexport function asyncFilter(items, matches) {\n  return __awaiter(this, void 0, void 0, function () {\n    var results, items_3, items_3_1, item, e_5_1;\n    var e_5, _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          results = [];\n          _d.label = 1;\n        case 1:\n          _d.trys.push([1, 6, 7, 8]);\n          items_3 = __values(items), items_3_1 = items_3.next();\n          _d.label = 2;\n        case 2:\n          if (!!items_3_1.done) return [3 /*break*/, 5];\n          item = items_3_1.value;\n          return [4 /*yield*/, matches(item)];\n        case 3:\n          if (_d.sent()) {\n            results.push(item);\n          }\n          _d.label = 4;\n        case 4:\n          items_3_1 = items_3.next();\n          return [3 /*break*/, 2];\n        case 5:\n          return [3 /*break*/, 8];\n        case 6:\n          e_5_1 = _d.sent();\n          e_5 = {\n            error: e_5_1\n          };\n          return [3 /*break*/, 8];\n        case 7:\n          try {\n            if (items_3_1 && !items_3_1.done && (_c = items_3.return)) _c.call(items_3);\n          } finally {\n            if (e_5) throw e_5.error;\n          }\n          return [7 /*endfinally*/];\n        case 8:\n          return [2 /*return*/, results];\n      }\n    });\n  });\n}\nexport var isAWSDate = function (val) {\n  return !!/^\\d{4}-\\d{2}-\\d{2}(Z|[+-]\\d{2}:\\d{2}($|:\\d{2}))?$/.exec(val);\n};\nexport var isAWSTime = function (val) {\n  return !!/^\\d{2}:\\d{2}(:\\d{2}(.\\d+)?)?(Z|[+-]\\d{2}:\\d{2}($|:\\d{2}))?$/.exec(val);\n};\nexport var isAWSDateTime = function (val) {\n  return !!/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}(:\\d{2}(.\\d+)?)?(Z|[+-]\\d{2}:\\d{2}($|:\\d{2}))?$/.exec(val);\n};\nexport var isAWSTimestamp = function (val) {\n  return !!/^\\d+$/.exec(String(val));\n};\nexport var isAWSEmail = function (val) {\n  return !!/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.exec(val);\n};\nexport var isAWSJSON = function (val) {\n  try {\n    JSON.parse(val);\n    return true;\n  } catch (_c) {\n    return false;\n  }\n};\nexport var isAWSURL = function (val) {\n  try {\n    return !!new URL(val);\n  } catch (_c) {\n    return false;\n  }\n};\nexport var isAWSPhone = function (val) {\n  return !!/^\\+?\\d[\\d\\s-]+$/.exec(val);\n};\nexport var isAWSIPAddress = function (val) {\n  return !!/((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$)|(^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?$))$/.exec(val);\n};\nvar DeferredPromise = /** @class */function () {\n  function DeferredPromise() {\n    var self = this;\n    this.promise = new Promise(function (resolve, reject) {\n      self.resolve = resolve;\n      self.reject = reject;\n    });\n  }\n  return DeferredPromise;\n}();\nexport { DeferredPromise };\nvar DeferredCallbackResolver = /** @class */function () {\n  function DeferredCallbackResolver(options) {\n    this.limitPromise = new DeferredPromise();\n    this.raceInFlight = false;\n    this.callback = function () {};\n    this.defaultErrorHandler = function (msg) {\n      if (msg === void 0) {\n        msg = 'DeferredCallbackResolver error';\n      }\n      throw new Error(msg);\n    };\n    this.callback = options.callback;\n    this.errorHandler = options.errorHandler || this.defaultErrorHandler;\n    this.maxInterval = options.maxInterval || 2000;\n  }\n  DeferredCallbackResolver.prototype.startTimer = function () {\n    var _this = this;\n    this.timerPromise = new Promise(function (resolve, reject) {\n      _this.timer = setTimeout(function () {\n        resolve(LimitTimerRaceResolvedValues.TIMER);\n      }, _this.maxInterval);\n    });\n  };\n  DeferredCallbackResolver.prototype.racePromises = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var winner, err_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 2, 3, 4]);\n            this.raceInFlight = true;\n            this.startTimer();\n            return [4 /*yield*/, Promise.race([this.timerPromise, this.limitPromise.promise])];\n          case 1:\n            winner = _c.sent();\n            this.callback();\n            return [3 /*break*/, 4];\n          case 2:\n            err_1 = _c.sent();\n            this.errorHandler(err_1);\n            return [3 /*break*/, 4];\n          case 3:\n            // reset for the next race\n            this.clear();\n            this.raceInFlight = false;\n            this.limitPromise = new DeferredPromise();\n            return [2 /*return*/, winner];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  DeferredCallbackResolver.prototype.start = function () {\n    if (!this.raceInFlight) this.racePromises();\n  };\n  DeferredCallbackResolver.prototype.clear = function () {\n    clearTimeout(this.timer);\n  };\n  DeferredCallbackResolver.prototype.resolve = function () {\n    this.limitPromise.resolve(LimitTimerRaceResolvedValues.LIMIT);\n  };\n  return DeferredCallbackResolver;\n}();\nexport { DeferredCallbackResolver };\n/**\n * merge two sets of patches created by immer produce.\n * newPatches take precedent over oldPatches for patches modifying the same path.\n * In the case many consecutive pathces are merged the original model should\n * always be the root model.\n *\n * Example:\n * A -> B, patches1\n * B -> C, patches2\n *\n * mergePatches(A, patches1, patches2) to get patches for A -> C\n *\n * @param originalSource the original Model the patches should be applied to\n * @param oldPatches immer produce patch list\n * @param newPatches immer produce patch list (will take precedence)\n * @return merged patches\n */\nexport function mergePatches(originalSource, oldPatches, newPatches) {\n  var patchesToMerge = oldPatches.concat(newPatches);\n  var patches;\n  produce(originalSource, function (draft) {\n    applyPatches(draft, patchesToMerge);\n  }, function (p) {\n    patches = p;\n  });\n  return patches;\n}\nexport var getStorename = function (namespace, modelName) {\n  var storeName = namespace + \"_\" + modelName;\n  return storeName;\n};\n//#region Key Utils\n/*\n  When we have GSI(s) with composite sort keys defined on a model\n    There are some very particular rules regarding which fields must be included in the update mutation input\n    The field selection becomes more complex as the number of GSIs with composite sort keys grows\n\n    To summarize: any time we update a field that is part of the composite sort key of a GSI, we must include:\n     1. all of the other fields in that composite sort key\n     2. all of the fields from any other composite sort key that intersect with the fields from 1.\n\n     E.g.,\n     Model @model\n        @key(name: 'key1' fields: ['hk', 'a', 'b', 'c'])\n        @key(name: 'key2' fields: ['hk', 'a', 'b', 'd'])\n        @key(name: 'key3' fields: ['hk', 'x', 'y', 'z'])\n\n    Model.a is updated => include ['a', 'b', 'c', 'd']\n    Model.c is updated => include ['a', 'b', 'c', 'd']\n    Model.d is updated => include ['a', 'b', 'c', 'd']\n    Model.x is updated => include ['x', 'y', 'z']\n\n    This function accepts a model's attributes and returns grouped sets of composite key fields\n    Using our example Model above, the function will return:\n    [\n        Set('a', 'b', 'c', 'd'),\n        Set('x', 'y', 'z'),\n    ]\n\n    This gives us the opportunity to correctly include the required fields for composite keys\n    When crafting the mutation input in Storage.getUpdateMutationInput\n\n    See 'processCompositeKeys' test in util.test.ts for more examples\n*/\nexport var processCompositeKeys = function (attributes) {\n  var extractCompositeSortKey = function (_c) {\n    var\n      // ignore the HK (fields[0]) we only need to include the composite sort key fields[1...n]\n      _d = __read(_c.properties.fields),\n      sortKeyFields = _d.slice(1);\n    return sortKeyFields;\n  };\n  var compositeKeyFields = attributes.filter(isModelAttributeCompositeKey).map(extractCompositeSortKey);\n  /*\n      if 2 sets of fields have any intersecting fields => combine them into 1 union set\n      e.g., ['a', 'b', 'c'] and ['a', 'b', 'd'] => ['a', 'b', 'c', 'd']\n  */\n  var combineIntersecting = function (fields) {\n    return fields.reduce(function (combined, sortKeyFields) {\n      var sortKeyFieldsSet = new Set(sortKeyFields);\n      if (combined.length === 0) {\n        combined.push(sortKeyFieldsSet);\n        return combined;\n      }\n      // does the current set share values with another set we've already added to `combined`?\n      var intersectingSetIdx = combined.findIndex(function (existingSet) {\n        return __spread(existingSet).some(function (f) {\n          return sortKeyFieldsSet.has(f);\n        });\n      });\n      if (intersectingSetIdx > -1) {\n        var union = new Set(__spread(combined[intersectingSetIdx], sortKeyFieldsSet));\n        // combine the current set with the intersecting set we found above\n        combined[intersectingSetIdx] = union;\n      } else {\n        // none of the sets in `combined` have intersecting values with the current set\n        combined.push(sortKeyFieldsSet);\n      }\n      return combined;\n    }, []);\n  };\n  var initial = combineIntersecting(compositeKeyFields);\n  // a single pass pay not be enough to correctly combine all the fields\n  // call the function once more to get a final merged list of sets\n  var combined = combineIntersecting(initial);\n  return combined;\n};\nexport var extractKeyIfExists = function (modelDefinition) {\n  var _c;\n  var keyAttribute = (_c = modelDefinition === null || modelDefinition === void 0 ? void 0 : modelDefinition.attributes) === null || _c === void 0 ? void 0 : _c.find(isModelAttributeKey);\n  return keyAttribute;\n};\nexport var extractPrimaryKeyFieldNames = function (modelDefinition) {\n  var keyAttribute = extractKeyIfExists(modelDefinition);\n  if (keyAttribute && isModelAttributePrimaryKey(keyAttribute)) {\n    return keyAttribute.properties.fields;\n  }\n  return [ID];\n};\nexport var extractPrimaryKeyValues = function (model, keyFields) {\n  return keyFields.map(function (key) {\n    return model[key];\n  });\n};\nexport var extractPrimaryKeysAndValues = function (model, keyFields) {\n  var primaryKeysAndValues = {};\n  keyFields.forEach(function (key) {\n    return primaryKeysAndValues[key] = model[key];\n  });\n  return primaryKeysAndValues;\n};\n// IdentifierFields<ManagedIdentifier>\n// Default behavior without explicit @primaryKey defined\nexport var isIdManaged = function (modelDefinition) {\n  var keyAttribute = extractKeyIfExists(modelDefinition);\n  if (keyAttribute && isModelAttributePrimaryKey(keyAttribute)) {\n    return false;\n  }\n  return true;\n};\n// IdentifierFields<OptionallyManagedIdentifier>\n// @primaryKey with explicit `id` in the PK. Single key or composite\nexport var isIdOptionallyManaged = function (modelDefinition) {\n  var keyAttribute = extractKeyIfExists(modelDefinition);\n  if (keyAttribute && isModelAttributePrimaryKey(keyAttribute)) {\n    return keyAttribute.properties.fields[0] === ID;\n  }\n  return false;\n};\nexport var establishRelationAndKeys = function (namespace) {\n  var relationship = {};\n  var keys = {};\n  Object.keys(namespace.models).forEach(function (mKey) {\n    var e_6, _c;\n    relationship[mKey] = {\n      indexes: [],\n      relationTypes: []\n    };\n    keys[mKey] = {};\n    var model = namespace.models[mKey];\n    Object.keys(model.fields).forEach(function (attr) {\n      var fieldAttribute = model.fields[attr];\n      if (typeof fieldAttribute.type === 'object' && 'model' in fieldAttribute.type) {\n        var connectionType = fieldAttribute.association.connectionType;\n        relationship[mKey].relationTypes.push({\n          fieldName: fieldAttribute.name,\n          modelName: fieldAttribute.type.model,\n          relationType: connectionType,\n          targetName: fieldAttribute.association['targetName'],\n          targetNames: fieldAttribute.association['targetNames'],\n          associatedWith: fieldAttribute.association['associatedWith']\n        });\n        if (connectionType === 'BELONGS_TO') {\n          var targetNames = extractTargetNamesFromSrc(fieldAttribute.association);\n          if (targetNames) {\n            var idxName_1 = indexNameFromKeys(targetNames);\n            var idxExists = relationship[mKey].indexes.find(function (_c) {\n              var _d = __read(_c, 1),\n                index = _d[0];\n              return index === idxName_1;\n            });\n            if (!idxExists) {\n              relationship[mKey].indexes.push([idxName_1, targetNames]);\n            }\n          }\n        }\n      }\n    });\n    if (model.attributes) {\n      keys[mKey].compositeKeys = processCompositeKeys(model.attributes);\n      var _loop_1 = function (attribute) {\n        if (!isModelAttributeKey(attribute)) {\n          return \"continue\";\n        }\n        var fields = attribute.properties.fields;\n        if (isModelAttributePrimaryKey(attribute)) {\n          keys[mKey].primaryKey = fields;\n          return \"continue\";\n        }\n        // create indexes for all other keys\n        var idxName = indexNameFromKeys(fields);\n        var idxExists = relationship[mKey].indexes.find(function (_c) {\n          var _d = __read(_c, 1),\n            index = _d[0];\n          return index === idxName;\n        });\n        if (!idxExists) {\n          relationship[mKey].indexes.push([idxName, fields]);\n        }\n      };\n      try {\n        for (var _d = __values(model.attributes), _e = _d.next(); !_e.done; _e = _d.next()) {\n          var attribute = _e.value;\n          _loop_1(attribute);\n        }\n      } catch (e_6_1) {\n        e_6 = {\n          error: e_6_1\n        };\n      } finally {\n        try {\n          if (_e && !_e.done && (_c = _d.return)) _c.call(_d);\n        } finally {\n          if (e_6) throw e_6.error;\n        }\n      }\n    }\n    // set 'id' as the PK for models without a custom PK explicitly defined\n    if (!keys[mKey].primaryKey) {\n      keys[mKey].primaryKey = [ID];\n    }\n    // create primary index\n    relationship[mKey].indexes.push(['byPk', keys[mKey].primaryKey, {\n      unique: true\n    }]);\n  });\n  return [relationship, keys];\n};\nexport var getIndex = function (rel, src) {\n  var indexName;\n  rel.some(function (relItem) {\n    if (relItem.modelName === src) {\n      var targetNames = extractTargetNamesFromSrc(relItem);\n      indexName = targetNames && indexNameFromKeys(targetNames);\n      return true;\n    }\n  });\n  return indexName;\n};\nexport var getIndexFromAssociation = function (indexes, src) {\n  var indexName;\n  if (Array.isArray(src)) {\n    indexName = indexNameFromKeys(src);\n  } else {\n    indexName = src;\n  }\n  var associationIndex = indexes.find(function (_c) {\n    var _d = __read(_c, 1),\n      idxName = _d[0];\n    return idxName === indexName;\n  });\n  return associationIndex && associationIndex[0];\n};\n/**\n * Backwards-compatability for schema generated prior to custom primary key support:\nthe single field `targetName` has been replaced with an array of `targetNames`.\n`targetName` and `targetNames` are exclusive (will never exist on the same schema)\n * @param src {RelationType | ModelAssociation | undefined}\n * @returns array of targetNames, or `undefined`\n */\nexport var extractTargetNamesFromSrc = function (src) {\n  var targetName = src === null || src === void 0 ? void 0 : src.targetName;\n  var targetNames = src === null || src === void 0 ? void 0 : src.targetNames;\n  if (Array.isArray(targetNames)) {\n    return targetNames;\n  } else if (typeof targetName === 'string') {\n    return [targetName];\n  } else {\n    return undefined;\n  }\n};\n// Generates spinal-cased index name from an array of key field names\n// E.g. for keys `[id, title]` => 'id-title'\nexport var indexNameFromKeys = function (keys) {\n  return keys.reduce(function (prev, cur, idx) {\n    if (idx === 0) {\n      return cur;\n    }\n    return \"\" + prev + IDENTIFIER_KEY_SEPARATOR + cur;\n  }, '');\n};\nexport var keysEqual = function (keysA, keysB) {\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n  return keysA.every(function (key, idx) {\n    return key === keysB[idx];\n  });\n};\n// Returns primary keys for a model\nexport var getIndexKeys = function (namespace, modelName) {\n  var _c, _d;\n  var keyPath = (_d = (_c = namespace === null || namespace === void 0 ? void 0 : namespace.keys) === null || _c === void 0 ? void 0 : _c[modelName]) === null || _d === void 0 ? void 0 : _d.primaryKey;\n  if (keyPath) {\n    return keyPath;\n  }\n  return [ID];\n};\n//#endregion\n/**\n * Determine what the managed timestamp field names are for the given model definition\n * and return the mapping.\n *\n * All timestamp fields are included in the mapping, regardless of whether the final field\n * names are the defaults or customized in the `@model` directive.\n *\n * @see https://docs.amplify.aws/cli/graphql/data-modeling/#customize-creation-and-update-timestamps\n *\n * @param definition modelDefinition to inspect.\n * @returns An object mapping `createdAt` and `updatedAt` to their field names.\n */\nexport var getTimestampFields = function (definition) {\n  var _c, _d;\n  var modelAttributes = (_c = definition.attributes) === null || _c === void 0 ? void 0 : _c.find(function (attr) {\n    return attr.type === 'model';\n  });\n  var timestampFieldsMap = (_d = modelAttributes === null || modelAttributes === void 0 ? void 0 : modelAttributes.properties) === null || _d === void 0 ? void 0 : _d.timestamps;\n  var defaultFields = {\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt'\n  };\n  var customFields = timestampFieldsMap || {};\n  return __assign(__assign({}, defaultFields), customFields);\n};","map":{"version":3,"mappings":"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","names":["Buffer","monotonicFactory","v4","uuid","produce","applyPatches","isPredicateGroup","isPredicateObj","SortDirection","isModelAttributeKey","isModelAttributePrimaryKey","isModelAttributeCompositeKey","LimitTimerRaceResolvedValues","WordArray","ModelSortPredicateCreator","ID","DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR","IDENTIFIER_KEY_SEPARATOR","errorMessages","idEmptyString","queryByPkWithCompositeKeyPresent","deleteByPkWithCompositeKeyPresent","observeWithObjectLiteral","NAMESPACES","DATASTORE","USER","SYNC","STORAGE","exhaustiveCheck","obj","throwOnError","Error","isNullOrUndefined","val","undefined","validatePredicate","model","groupType","predicatesOrGroups","filterType","isNegation","length","result","predicateOrGroup","operator","operand","value","field","validatePredicateField","predicates","type","min","max","startsWith","indexOf","isModelConstructor","copyOf","nonModelClasses","WeakSet","registerNonModelClass","clazz","add","isNonModelConstructor","has","topologicallySortedModels","WeakMap","traverseModel","srcModelName","instance","namespace","modelInstanceCreator","getModelConstructorByModelName","modelConstructor","name","newInstance","unshift","modelName","item","set","Array","from","modelTopologicalOrdering","keys","sortedModels","get","sort","a","b","privateModeCheckResult","isPrivateMode","Promise","dbname","db","isPrivate","resolve","isNotPrivate","close","_c","indexedDB","deleteDatabase","open","onerror","onsuccess","safariCompatabilityModeResult","isSafariCompatabilityMode","dbName_1","storeName_1","indexName_1","dbOpenRequest","onupgradeneeded","event","target","store","createObjectStore","autoIncrement","createIndex","db_1","rwTx","transaction","rwStore","objectStore","id","commit","tx","index","getRequest","randomBytes","nBytes","random","toString","prng","readUInt8","monotonicUlidFactory","seed","ulid","getNow","performance","now","Date","sortCompareFunction","sortPredicates","compareFunction","predicate","sortDirection","sortMultiplier","ASCENDING","valuesEqual","valA","valB","nullish","nullishCompare","_a","_b","Object","isArray","Set","Map","fromEntries","aKeys","bKeys","key","aVal","bVal","inMemoryPagination","records","pagination","getPredicates","compareFn","page","_d","limit","start","Math","end","slice","asyncSome","items","matches","items_1","asyncEvery","items_2","asyncFilter","results","items_3","push","isAWSDate","exec","isAWSTime","isAWSDateTime","isAWSTimestamp","String","isAWSEmail","isAWSJSON","JSON","parse","isAWSURL","URL","isAWSPhone","isAWSIPAddress","self","promise","reject","options","DeferredPromise","msg","callback","errorHandler","defaultErrorHandler","maxInterval","DeferredCallbackResolver","timerPromise","_this","timer","setTimeout","TIMER","raceInFlight","startTimer","race","limitPromise","winner","err_1","clear","racePromises","clearTimeout","LIMIT","mergePatches","originalSource","oldPatches","newPatches","patchesToMerge","concat","patches","draft","p","getStorename","storeName","processCompositeKeys","attributes","extractCompositeSortKey","sortKeyFields","compositeKeyFields","filter","map","combineIntersecting","fields","reduce","combined","sortKeyFieldsSet","intersectingSetIdx","findIndex","__spread","existingSet","some","f","union","initial","extractKeyIfExists","modelDefinition","keyAttribute","find","extractPrimaryKeyFieldNames","properties","extractPrimaryKeyValues","keyFields","extractPrimaryKeysAndValues","primaryKeysAndValues","forEach","isIdManaged","isIdOptionallyManaged","establishRelationAndKeys","relationship","models","mKey","indexes","relationTypes","attr","fieldAttribute","connectionType","association","fieldName","relationType","targetName","targetNames","associatedWith","extractTargetNamesFromSrc","idxName_1","indexNameFromKeys","idxExists","compositeKeys","attribute","primaryKey","idxName","unique","getIndex","rel","src","indexName","relItem","getIndexFromAssociation","associationIndex","prev","cur","idx","keysEqual","keysA","keysB","every","getIndexKeys","keyPath","getTimestampFields","definition","modelAttributes","timestampFieldsMap","timestamps","defaultFields","createdAt","updatedAt","customFields"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-amplify/datastore/src/util.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Buffer } from 'buffer';\nimport { monotonicFactory, ULID } from 'ulid';\nimport { v4 as uuid } from 'uuid';\nimport { produce, applyPatches, Patch } from 'immer';\nimport { ModelInstanceCreator } from './datastore/datastore';\nimport {\n\tAllOperators,\n\tisPredicateGroup,\n\tisPredicateObj,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tPredicateGroups,\n\tPredicateObject,\n\tPredicatesGroup,\n\tRelationshipType,\n\tRelationType,\n\tModelKeys,\n\tModelAttributes,\n\tSchemaNamespace,\n\tSortPredicatesGroup,\n\tSortDirection,\n\tisModelAttributeKey,\n\tisModelAttributePrimaryKey,\n\tisModelAttributeCompositeKey,\n\tNonModelTypeConstructor,\n\tPaginationInput,\n\tDeferredCallbackResolverOptions,\n\tLimitTimerRaceResolvedValues,\n\tSchemaModel,\n\tModelAttribute,\n\tIndexesType,\n\tModelAssociation,\n} from './types';\nimport { WordArray } from 'amazon-cognito-identity-js';\nimport { ModelSortPredicateCreator } from './predicates';\n\nexport const ID = 'id';\n\n/**\n * Used by the Async Storage Adapter to concatenate key values\n * for a record. For instance, if a model has the following keys:\n * `customId: ID! @primaryKey(sortKeyFields: [\"createdAt\"])`,\n * we concatenate the `customId` and `createdAt` as:\n * `12-234-5#2022-09-28T00:00:00.000Z`\n */\nexport const DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR = '#';\n\n/**\n * Used for generating spinal-cased index name from an array of\n * key field names.\n * E.g. for keys `[id, title]` => 'id-title'\n */\nexport const IDENTIFIER_KEY_SEPARATOR = '-';\n\nexport const errorMessages = {\n\tidEmptyString: 'An index field cannot contain an empty string value',\n\tqueryByPkWithCompositeKeyPresent:\n\t\t'Models with composite primary keys cannot be queried by a single key value. Use object literal syntax for composite keys instead: https://docs.amplify.aws/lib/datastore/advanced-workflows/q/platform/js/#querying-records-with-custom-primary-keys',\n\tdeleteByPkWithCompositeKeyPresent:\n\t\t'Models with composite primary keys cannot be deleted by a single key value, unless using a predicate. Use object literal syntax for composite keys instead: https://docs.amplify.aws/lib/datastore/advanced-workflows/q/platform/js/#querying-records-with-custom-primary-keys',\n\tobserveWithObjectLiteral:\n\t\t'Object literal syntax cannot be used with observe. Use a predicate instead: https://docs.amplify.aws/lib/datastore/data-access/q/platform/js/#predicates',\n};\n\nexport enum NAMESPACES {\n\tDATASTORE = 'datastore',\n\tUSER = 'user',\n\tSYNC = 'sync',\n\tSTORAGE = 'storage',\n}\n\nconst DATASTORE = NAMESPACES.DATASTORE;\nconst USER = NAMESPACES.USER;\nconst SYNC = NAMESPACES.SYNC;\nconst STORAGE = NAMESPACES.STORAGE;\n\nexport { USER, SYNC, STORAGE, DATASTORE };\n\nexport const exhaustiveCheck = (obj: never, throwOnError: boolean = true) => {\n\tif (throwOnError) {\n\t\tthrow new Error(`Invalid ${obj}`);\n\t}\n};\n\nexport const isNullOrUndefined = (val: any): boolean => {\n\treturn typeof val === 'undefined' || val === undefined || val === null;\n};\n\nexport const validatePredicate = <T extends PersistentModel>(\n\tmodel: T,\n\tgroupType: keyof PredicateGroups<T>,\n\tpredicatesOrGroups: (PredicateObject<T> | PredicatesGroup<T>)[]\n) => {\n\tlet filterType: keyof Pick<any[], 'every' | 'some'>;\n\tlet isNegation = false;\n\n\tif (predicatesOrGroups.length === 0) {\n\t\treturn true;\n\t}\n\n\tswitch (groupType) {\n\t\tcase 'not':\n\t\t\tfilterType = 'every';\n\t\t\tisNegation = true;\n\t\t\tbreak;\n\t\tcase 'and':\n\t\t\tfilterType = 'every';\n\t\t\tbreak;\n\t\tcase 'or':\n\t\t\tfilterType = 'some';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error(`Invalid ${groupType}`);\n\t}\n\n\tconst result: boolean = predicatesOrGroups[filterType](predicateOrGroup => {\n\t\tif (isPredicateObj(predicateOrGroup)) {\n\t\t\tconst { field, operator, operand } = predicateOrGroup;\n\t\t\tconst value = model[field];\n\n\t\t\treturn validatePredicateField(value, operator, operand);\n\t\t}\n\n\t\tif (isPredicateGroup(predicateOrGroup)) {\n\t\t\tconst { type, predicates } = predicateOrGroup;\n\t\t\treturn validatePredicate(model, type, predicates);\n\t\t}\n\n\t\tthrow new Error('Not a predicate or group');\n\t});\n\n\treturn isNegation ? !result : result;\n};\n\nexport const validatePredicateField = <T>(\n\tvalue: T,\n\toperator: keyof AllOperators,\n\toperand: T | [T, T]\n) => {\n\tswitch (operator) {\n\t\tcase 'ne':\n\t\t\treturn value !== operand;\n\t\tcase 'eq':\n\t\t\treturn value === operand;\n\t\tcase 'le':\n\t\t\treturn value <= operand;\n\t\tcase 'lt':\n\t\t\treturn value < operand;\n\t\tcase 'ge':\n\t\t\treturn value >= operand;\n\t\tcase 'gt':\n\t\t\treturn value > operand;\n\t\tcase 'between':\n\t\t\tconst [min, max] = <[T, T]>operand;\n\t\t\treturn value >= min && value <= max;\n\t\tcase 'beginsWith':\n\t\t\treturn (\n\t\t\t\t!isNullOrUndefined(value) &&\n\t\t\t\t(<string>(<unknown>value)).startsWith(<string>(<unknown>operand))\n\t\t\t);\n\t\tcase 'contains':\n\t\t\treturn (\n\t\t\t\t!isNullOrUndefined(value) &&\n\t\t\t\t(<string>(<unknown>value)).indexOf(<string>(<unknown>operand)) > -1\n\t\t\t);\n\t\tcase 'notContains':\n\t\t\treturn (\n\t\t\t\tisNullOrUndefined(value) ||\n\t\t\t\t(<string>(<unknown>value)).indexOf(<string>(<unknown>operand)) === -1\n\t\t\t);\n\t\tdefault:\n\t\t\treturn false;\n\t}\n};\n\nexport const isModelConstructor = <T extends PersistentModel>(\n\tobj: any\n): obj is PersistentModelConstructor<T> => {\n\treturn (\n\t\tobj && typeof (<PersistentModelConstructor<T>>obj).copyOf === 'function'\n\t);\n};\n\nconst nonModelClasses = new WeakSet<NonModelTypeConstructor<any>>();\n\nexport function registerNonModelClass(clazz: NonModelTypeConstructor<any>) {\n\tnonModelClasses.add(clazz);\n}\n\nexport const isNonModelConstructor = (\n\tobj: any\n): obj is NonModelTypeConstructor<any> => {\n\treturn nonModelClasses.has(obj);\n};\n\nconst topologicallySortedModels = new WeakMap<SchemaNamespace, string[]>();\n\nexport const traverseModel = <T extends PersistentModel>(\n\tsrcModelName: string,\n\tinstance: T,\n\tnamespace: SchemaNamespace,\n\tmodelInstanceCreator: ModelInstanceCreator,\n\tgetModelConstructorByModelName: (\n\t\tnamsespaceName: NAMESPACES,\n\t\tmodelName: string\n\t) => PersistentModelConstructor<any>\n) => {\n\tconst modelConstructor = getModelConstructorByModelName(\n\t\tnamespace.name as NAMESPACES,\n\t\tsrcModelName\n\t);\n\n\tconst result: {\n\t\tmodelName: string;\n\t\titem: T;\n\t\tinstance: T;\n\t}[] = [];\n\n\tconst newInstance = modelConstructor.copyOf(instance, () => {});\n\n\tresult.unshift({\n\t\tmodelName: srcModelName,\n\t\titem: newInstance,\n\t\tinstance: newInstance,\n\t});\n\n\tif (!topologicallySortedModels.has(namespace)) {\n\t\ttopologicallySortedModels.set(\n\t\t\tnamespace,\n\t\t\tArray.from(namespace.modelTopologicalOrdering!.keys())\n\t\t);\n\t}\n\n\tconst sortedModels = topologicallySortedModels.get(namespace);\n\n\tresult.sort((a, b) => {\n\t\treturn (\n\t\t\tsortedModels!.indexOf(a.modelName) - sortedModels!.indexOf(b.modelName)\n\t\t);\n\t});\n\n\treturn result;\n};\n\nlet privateModeCheckResult;\n\nexport const isPrivateMode = () => {\n\treturn new Promise(resolve => {\n\t\tconst dbname = uuid();\n\t\tlet db;\n\n\t\tconst isPrivate = () => {\n\t\t\tprivateModeCheckResult = false;\n\n\t\t\tresolve(true);\n\t\t};\n\n\t\tconst isNotPrivate = async () => {\n\t\t\tif (db && db.result && typeof db.result.close === 'function') {\n\t\t\t\tawait db.result.close();\n\t\t\t}\n\n\t\t\tawait indexedDB.deleteDatabase(dbname);\n\n\t\t\tprivateModeCheckResult = true;\n\n\t\t\treturn resolve(false);\n\t\t};\n\n\t\tif (privateModeCheckResult === true) {\n\t\t\treturn isNotPrivate();\n\t\t}\n\n\t\tif (privateModeCheckResult === false) {\n\t\t\treturn isPrivate();\n\t\t}\n\n\t\tif (indexedDB === null) return isPrivate();\n\n\t\tdb = indexedDB.open(dbname);\n\t\tdb.onerror = isPrivate;\n\t\tdb.onsuccess = isNotPrivate;\n\t});\n};\n\nlet safariCompatabilityModeResult;\n\n/**\n * Whether the browser's implementation of IndexedDB breaks on array lookups\n * against composite indexes whose keypath contains a single column.\n *\n * E.g., Whether `store.createIndex(indexName, ['id'])` followed by\n * `store.index(indexName).get([1])` will *ever* return records.\n *\n * In all known, modern Safari browsers as of Q4 2022, the query against an index like\n * this will *always* return `undefined`. So, the index needs to be created as a scalar.\n */\nexport const isSafariCompatabilityMode: () => Promise<boolean> = async () => {\n\ttry {\n\t\tconst dbName = uuid();\n\t\tconst storeName = 'indexedDBFeatureProbeStore';\n\t\tconst indexName = 'idx';\n\n\t\tif (indexedDB === null) return false;\n\n\t\tif (safariCompatabilityModeResult !== undefined) {\n\t\t\treturn safariCompatabilityModeResult;\n\t\t}\n\n\t\tconst db: IDBDatabase | false = await new Promise(resolve => {\n\t\t\tconst dbOpenRequest = indexedDB.open(dbName);\n\t\t\tdbOpenRequest.onerror = () => resolve(false);\n\n\t\t\tdbOpenRequest.onsuccess = () => {\n\t\t\t\tconst db = dbOpenRequest.result;\n\t\t\t\tresolve(db);\n\t\t\t};\n\n\t\t\tdbOpenRequest.onupgradeneeded = (event: any) => {\n\t\t\t\tconst db = event?.target?.result;\n\n\t\t\t\tdb.onerror = () => resolve(false);\n\n\t\t\t\tconst store = db.createObjectStore(storeName, {\n\t\t\t\t\tautoIncrement: true,\n\t\t\t\t});\n\n\t\t\t\tstore.createIndex(indexName, ['id']);\n\t\t\t};\n\t\t});\n\n\t\tif (!db) {\n\t\t\tthrow new Error('Could not open probe DB');\n\t\t}\n\n\t\tconst rwTx = db.transaction(storeName, 'readwrite');\n\t\tconst rwStore = rwTx.objectStore(storeName);\n\t\trwStore.add({\n\t\t\tid: 1,\n\t\t});\n\n\t\t(rwTx as any).commit();\n\n\t\tconst result = await new Promise(resolve => {\n\t\t\tconst tx = db.transaction(storeName, 'readonly');\n\t\t\tconst store = tx.objectStore(storeName);\n\t\t\tconst index = store.index(indexName);\n\n\t\t\tconst getRequest = index.get([1]);\n\n\t\t\tgetRequest.onerror = () => resolve(false);\n\n\t\t\tgetRequest.onsuccess = (event: any) => {\n\t\t\t\tresolve(event?.target?.result);\n\t\t\t};\n\t\t});\n\n\t\tif (db && typeof db.close === 'function') {\n\t\t\tawait db.close();\n\t\t}\n\n\t\tawait indexedDB.deleteDatabase(dbName);\n\n\t\tif (result === undefined) {\n\t\t\tsafariCompatabilityModeResult = true;\n\t\t} else {\n\t\t\tsafariCompatabilityModeResult = false;\n\t\t}\n\t} catch (error) {\n\t\tsafariCompatabilityModeResult = false;\n\t}\n\n\treturn safariCompatabilityModeResult;\n};\n\nconst randomBytes = (nBytes: number): Buffer => {\n\treturn Buffer.from(new WordArray().random(nBytes).toString(), 'hex');\n};\nconst prng = () => randomBytes(1).readUInt8(0) / 0xff;\nexport function monotonicUlidFactory(seed?: number): ULID {\n\tconst ulid = monotonicFactory(prng);\n\n\treturn () => {\n\t\treturn ulid(seed);\n\t};\n}\n\n/**\n * Uses performance.now() if available, otherwise, uses Date.now() (e.g. react native without a polyfill)\n *\n * The values returned by performance.now() always increase at a constant rate,\n * independent of the system clock (which might be adjusted manually or skewed\n * by software like NTP).\n *\n * Otherwise, performance.timing.navigationStart + performance.now() will be\n * approximately equal to Date.now()\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Performance/now#Example\n */\nexport function getNow() {\n\tif (\n\t\ttypeof performance !== 'undefined' &&\n\t\tperformance &&\n\t\ttypeof performance.now === 'function'\n\t) {\n\t\treturn performance.now() | 0; // convert to integer\n\t} else {\n\t\treturn Date.now();\n\t}\n}\n\nexport function sortCompareFunction<T extends PersistentModel>(\n\tsortPredicates: SortPredicatesGroup<T>\n) {\n\treturn function compareFunction(a, b) {\n\t\t// enable multi-field sort by iterating over predicates until\n\t\t// a comparison returns -1 or 1\n\t\tfor (const predicate of sortPredicates) {\n\t\t\tconst { field, sortDirection } = predicate;\n\n\t\t\t// reverse result when direction is descending\n\t\t\tconst sortMultiplier = sortDirection === SortDirection.ASCENDING ? 1 : -1;\n\n\t\t\tif (a[field] < b[field]) {\n\t\t\t\treturn -1 * sortMultiplier;\n\t\t\t}\n\n\t\t\tif (a[field] > b[field]) {\n\t\t\t\treturn 1 * sortMultiplier;\n\t\t\t}\n\t\t}\n\n\t\treturn 0;\n\t};\n}\n\n// deep compare any 2 values\n// primitives or object types (including arrays, Sets, and Maps)\n// returns true if equal by value\n// if nullish is true, treat undefined and null values as equal\n// to normalize for GQL response values for undefined fields\nexport function valuesEqual(\n\tvalA: any,\n\tvalB: any,\n\tnullish: boolean = false\n): boolean {\n\tlet a = valA;\n\tlet b = valB;\n\n\tconst nullishCompare = (_a, _b) => {\n\t\treturn (\n\t\t\t(_a === undefined || _a === null) && (_b === undefined || _b === null)\n\t\t);\n\t};\n\n\t// if one of the values is a primitive and the other is an object\n\tif (\n\t\t(a instanceof Object && !(b instanceof Object)) ||\n\t\t(!(a instanceof Object) && b instanceof Object)\n\t) {\n\t\treturn false;\n\t}\n\n\t// compare primitive types\n\tif (!(a instanceof Object)) {\n\t\tif (nullish && nullishCompare(a, b)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn a === b;\n\t}\n\n\t// make sure object types match\n\tif (\n\t\t(Array.isArray(a) && !Array.isArray(b)) ||\n\t\t(Array.isArray(b) && !Array.isArray(a))\n\t) {\n\t\treturn false;\n\t}\n\n\tif (a instanceof Set && b instanceof Set) {\n\t\ta = [...a];\n\t\tb = [...b];\n\t}\n\n\tif (a instanceof Map && b instanceof Map) {\n\t\ta = (Object as any).fromEntries(a);\n\t\tb = (Object as any).fromEntries(b);\n\t}\n\n\tconst aKeys = Object.keys(a);\n\tconst bKeys = Object.keys(b);\n\n\t// last condition is to ensure that [] !== [null] even if nullish. However [undefined] === [null] when nullish\n\tif (aKeys.length !== bKeys.length && (!nullish || Array.isArray(a))) {\n\t\treturn false;\n\t}\n\n\t// iterate through the longer set of keys\n\t// e.g., for a nullish comparison of a={ a: 1 } and b={ a: 1, b: null }\n\t// we want to iterate through bKeys\n\tconst keys = aKeys.length >= bKeys.length ? aKeys : bKeys;\n\n\tfor (const key of keys) {\n\t\tconst aVal = a[key];\n\t\tconst bVal = b[key];\n\n\t\tif (!valuesEqual(aVal, bVal, nullish)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n * Statelessly extracts the specified page from an array.\n *\n * @param records - The source array to extract a page from.\n * @param pagination - A definition of the page to extract.\n * @returns This items from `records` matching the `pagination` definition.\n */\nexport function inMemoryPagination<T extends PersistentModel>(\n\trecords: T[],\n\tpagination?: PaginationInput<T>\n): T[] {\n\tif (pagination && records.length > 1) {\n\t\tif (pagination.sort) {\n\t\t\tconst sortPredicates = ModelSortPredicateCreator.getPredicates(\n\t\t\t\tpagination.sort\n\t\t\t);\n\n\t\t\tif (sortPredicates.length) {\n\t\t\t\tconst compareFn = sortCompareFunction(sortPredicates);\n\t\t\t\trecords.sort(compareFn);\n\t\t\t}\n\t\t}\n\t\tconst { page = 0, limit = 0 } = pagination;\n\t\tconst start = Math.max(0, page * limit) || 0;\n\n\t\tconst end = limit > 0 ? start + limit : records.length;\n\n\t\treturn records.slice(start, end);\n\t}\n\treturn records;\n}\n\n/**\n * An `aysnc` implementation of `Array.some()`. Returns as soon as a match is found.\n * @param items The items to check.\n * @param matches The async matcher function, expected to\n * return Promise<boolean>: `true` for a matching item, `false` otherwise.\n * @returns A `Promise<boolean>`, `true` if \"some\" items match; `false` otherwise.\n */\nexport async function asyncSome(\n\titems: Record<string, any>[],\n\tmatches: (item: Record<string, any>) => Promise<boolean>\n): Promise<boolean> {\n\tfor (const item of items) {\n\t\tif (await matches(item)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * An `aysnc` implementation of `Array.every()`. Returns as soon as a non-match is found.\n * @param items The items to check.\n * @param matches The async matcher function, expected to\n * return Promise<boolean>: `true` for a matching item, `false` otherwise.\n * @returns A `Promise<boolean>`, `true` if every item matches; `false` otherwise.\n */\nexport async function asyncEvery(\n\titems: Record<string, any>[],\n\tmatches: (item: Record<string, any>) => Promise<boolean>\n): Promise<boolean> {\n\tfor (const item of items) {\n\t\tif (!(await matches(item))) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * An `async` implementation of `Array.filter()`. Returns after all items have been filtered.\n * TODO: Return AsyncIterable.\n * @param items The items to filter.\n * @param matches The `async` matcher function, expected to\n * return Promise<boolean>: `true` for a matching item, `false` otherwise.\n * @returns A `Promise<T>` of matching items.\n */\nexport async function asyncFilter<T>(\n\titems: T[],\n\tmatches: (item: T) => Promise<boolean>\n): Promise<T[]> {\n\tconst results: T[] = [];\n\tfor (const item of items) {\n\t\tif (await matches(item)) {\n\t\t\tresults.push(item);\n\t\t}\n\t}\n\treturn results;\n}\n\nexport const isAWSDate = (val: string): boolean => {\n\treturn !!/^\\d{4}-\\d{2}-\\d{2}(Z|[+-]\\d{2}:\\d{2}($|:\\d{2}))?$/.exec(val);\n};\n\nexport const isAWSTime = (val: string): boolean => {\n\treturn !!/^\\d{2}:\\d{2}(:\\d{2}(.\\d+)?)?(Z|[+-]\\d{2}:\\d{2}($|:\\d{2}))?$/.exec(\n\t\tval\n\t);\n};\n\nexport const isAWSDateTime = (val: string): boolean => {\n\treturn !!/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}(:\\d{2}(.\\d+)?)?(Z|[+-]\\d{2}:\\d{2}($|:\\d{2}))?$/.exec(\n\t\tval\n\t);\n};\n\nexport const isAWSTimestamp = (val: number): boolean => {\n\treturn !!/^\\d+$/.exec(String(val));\n};\n\nexport const isAWSEmail = (val: string): boolean => {\n\treturn !!/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.exec(\n\t\tval\n\t);\n};\n\nexport const isAWSJSON = (val: string): boolean => {\n\ttry {\n\t\tJSON.parse(val);\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n};\n\nexport const isAWSURL = (val: string): boolean => {\n\ttry {\n\t\treturn !!new URL(val);\n\t} catch {\n\t\treturn false;\n\t}\n};\n\nexport const isAWSPhone = (val: string): boolean => {\n\treturn !!/^\\+?\\d[\\d\\s-]+$/.exec(val);\n};\n\nexport const isAWSIPAddress = (val: string): boolean => {\n\treturn !!/((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$)|(^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?$))$/.exec(\n\t\tval\n\t);\n};\n\nexport class DeferredPromise {\n\tpublic promise: Promise<string>;\n\tpublic resolve: (value: string | PromiseLike<string>) => void;\n\tpublic reject: () => void;\n\tconstructor() {\n\t\tconst self = this;\n\t\tthis.promise = new Promise(\n\t\t\t(resolve: (value: string | PromiseLike<string>) => void, reject) => {\n\t\t\t\tself.resolve = resolve;\n\t\t\t\tself.reject = reject;\n\t\t\t}\n\t\t);\n\t}\n}\n\nexport class DeferredCallbackResolver {\n\tprivate limitPromise = new DeferredPromise();\n\tprivate timerPromise: Promise<string>;\n\tprivate maxInterval: number;\n\tprivate timer: ReturnType<typeof setTimeout>;\n\tprivate raceInFlight = false;\n\tprivate callback = () => {};\n\tprivate errorHandler: (error: string) => void;\n\tprivate defaultErrorHandler = (\n\t\tmsg = 'DeferredCallbackResolver error'\n\t): void => {\n\t\tthrow new Error(msg);\n\t};\n\n\tconstructor(options: DeferredCallbackResolverOptions) {\n\t\tthis.callback = options.callback;\n\t\tthis.errorHandler = options.errorHandler || this.defaultErrorHandler;\n\t\tthis.maxInterval = options.maxInterval || 2000;\n\t}\n\n\tprivate startTimer(): void {\n\t\tthis.timerPromise = new Promise((resolve, reject) => {\n\t\t\tthis.timer = setTimeout(() => {\n\t\t\t\tresolve(LimitTimerRaceResolvedValues.TIMER);\n\t\t\t}, this.maxInterval);\n\t\t});\n\t}\n\n\tprivate async racePromises(): Promise<string> {\n\t\tlet winner: string;\n\t\ttry {\n\t\t\tthis.raceInFlight = true;\n\t\t\tthis.startTimer();\n\t\t\twinner = await Promise.race([\n\t\t\t\tthis.timerPromise,\n\t\t\t\tthis.limitPromise.promise,\n\t\t\t]);\n\t\t\tthis.callback();\n\t\t} catch (err) {\n\t\t\tthis.errorHandler(err);\n\t\t} finally {\n\t\t\t// reset for the next race\n\t\t\tthis.clear();\n\t\t\tthis.raceInFlight = false;\n\t\t\tthis.limitPromise = new DeferredPromise();\n\n\t\t\treturn winner!;\n\t\t}\n\t}\n\n\tpublic start(): void {\n\t\tif (!this.raceInFlight) this.racePromises();\n\t}\n\n\tpublic clear(): void {\n\t\tclearTimeout(this.timer);\n\t}\n\n\tpublic resolve(): void {\n\t\tthis.limitPromise.resolve(LimitTimerRaceResolvedValues.LIMIT);\n\t}\n}\n\n/**\n * merge two sets of patches created by immer produce.\n * newPatches take precedent over oldPatches for patches modifying the same path.\n * In the case many consecutive pathces are merged the original model should\n * always be the root model.\n *\n * Example:\n * A -> B, patches1\n * B -> C, patches2\n *\n * mergePatches(A, patches1, patches2) to get patches for A -> C\n *\n * @param originalSource the original Model the patches should be applied to\n * @param oldPatches immer produce patch list\n * @param newPatches immer produce patch list (will take precedence)\n * @return merged patches\n */\nexport function mergePatches<T>(\n\toriginalSource: T,\n\toldPatches: Patch[],\n\tnewPatches: Patch[]\n): Patch[] {\n\tconst patchesToMerge = oldPatches.concat(newPatches);\n\tlet patches: Patch[];\n\tproduce(\n\t\toriginalSource,\n\t\tdraft => {\n\t\t\tapplyPatches(draft, patchesToMerge);\n\t\t},\n\t\tp => {\n\t\t\tpatches = p;\n\t\t}\n\t);\n\treturn patches!;\n}\n\nexport const getStorename = (namespace: string, modelName: string) => {\n\tconst storeName = `${namespace}_${modelName}`;\n\n\treturn storeName;\n};\n\n//#region Key Utils\n\n/*\n  When we have GSI(s) with composite sort keys defined on a model\n\tThere are some very particular rules regarding which fields must be included in the update mutation input\n\tThe field selection becomes more complex as the number of GSIs with composite sort keys grows\n\n\tTo summarize: any time we update a field that is part of the composite sort key of a GSI, we must include:\n\t 1. all of the other fields in that composite sort key\n\t 2. all of the fields from any other composite sort key that intersect with the fields from 1.\n\n\t E.g.,\n\t Model @model\n\t\t@key(name: 'key1' fields: ['hk', 'a', 'b', 'c'])\n\t\t@key(name: 'key2' fields: ['hk', 'a', 'b', 'd'])\n\t\t@key(name: 'key3' fields: ['hk', 'x', 'y', 'z'])\n\n\tModel.a is updated => include ['a', 'b', 'c', 'd']\n\tModel.c is updated => include ['a', 'b', 'c', 'd']\n\tModel.d is updated => include ['a', 'b', 'c', 'd']\n\tModel.x is updated => include ['x', 'y', 'z']\n\n\tThis function accepts a model's attributes and returns grouped sets of composite key fields\n\tUsing our example Model above, the function will return:\n\t[\n\t\tSet('a', 'b', 'c', 'd'),\n\t\tSet('x', 'y', 'z'),\n\t]\n\n\tThis gives us the opportunity to correctly include the required fields for composite keys\n\tWhen crafting the mutation input in Storage.getUpdateMutationInput\n\n\tSee 'processCompositeKeys' test in util.test.ts for more examples\n*/\nexport const processCompositeKeys = (\n\tattributes: ModelAttributes\n): Set<string>[] => {\n\tconst extractCompositeSortKey = ({\n\t\tproperties: {\n\t\t\t// ignore the HK (fields[0]) we only need to include the composite sort key fields[1...n]\n\t\t\tfields: [, ...sortKeyFields],\n\t\t},\n\t}) => sortKeyFields;\n\n\tconst compositeKeyFields = attributes\n\t\t.filter(isModelAttributeCompositeKey)\n\t\t.map(extractCompositeSortKey);\n\n\t/*\n\t\tif 2 sets of fields have any intersecting fields => combine them into 1 union set\n\t\te.g., ['a', 'b', 'c'] and ['a', 'b', 'd'] => ['a', 'b', 'c', 'd']\n\t*/\n\tconst combineIntersecting = (fields): Set<string>[] =>\n\t\tfields.reduce((combined, sortKeyFields) => {\n\t\t\tconst sortKeyFieldsSet = new Set(sortKeyFields);\n\n\t\t\tif (combined.length === 0) {\n\t\t\t\tcombined.push(sortKeyFieldsSet);\n\t\t\t\treturn combined;\n\t\t\t}\n\n\t\t\t// does the current set share values with another set we've already added to `combined`?\n\t\t\tconst intersectingSetIdx = combined.findIndex(existingSet => {\n\t\t\t\treturn [...existingSet].some(f => sortKeyFieldsSet.has(f));\n\t\t\t});\n\n\t\t\tif (intersectingSetIdx > -1) {\n\t\t\t\tconst union = new Set([\n\t\t\t\t\t...combined[intersectingSetIdx],\n\t\t\t\t\t...sortKeyFieldsSet,\n\t\t\t\t]);\n\t\t\t\t// combine the current set with the intersecting set we found above\n\t\t\t\tcombined[intersectingSetIdx] = union;\n\t\t\t} else {\n\t\t\t\t// none of the sets in `combined` have intersecting values with the current set\n\t\t\t\tcombined.push(sortKeyFieldsSet);\n\t\t\t}\n\n\t\t\treturn combined;\n\t\t}, []);\n\n\tconst initial = combineIntersecting(compositeKeyFields);\n\t// a single pass pay not be enough to correctly combine all the fields\n\t// call the function once more to get a final merged list of sets\n\tconst combined = combineIntersecting(initial);\n\n\treturn combined;\n};\n\nexport const extractKeyIfExists = (\n\tmodelDefinition: SchemaModel\n): ModelAttribute | undefined => {\n\tconst keyAttribute = modelDefinition?.attributes?.find(isModelAttributeKey);\n\n\treturn keyAttribute;\n};\n\nexport const extractPrimaryKeyFieldNames = (\n\tmodelDefinition: SchemaModel\n): string[] => {\n\tconst keyAttribute = extractKeyIfExists(modelDefinition);\n\tif (keyAttribute && isModelAttributePrimaryKey(keyAttribute)) {\n\t\treturn keyAttribute.properties.fields;\n\t}\n\n\treturn [ID];\n};\n\nexport const extractPrimaryKeyValues = <T extends PersistentModel>(\n\tmodel: T,\n\tkeyFields: string[]\n): string[] => {\n\treturn keyFields.map(key => model[key]);\n};\n\nexport const extractPrimaryKeysAndValues = <T extends PersistentModel>(\n\tmodel: T,\n\tkeyFields: string[]\n): any => {\n\tconst primaryKeysAndValues = {};\n\tkeyFields.forEach(key => (primaryKeysAndValues[key] = model[key]));\n\treturn primaryKeysAndValues;\n};\n\n// IdentifierFields<ManagedIdentifier>\n// Default behavior without explicit @primaryKey defined\nexport const isIdManaged = (modelDefinition: SchemaModel): boolean => {\n\tconst keyAttribute = extractKeyIfExists(modelDefinition);\n\n\tif (keyAttribute && isModelAttributePrimaryKey(keyAttribute)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n\n// IdentifierFields<OptionallyManagedIdentifier>\n// @primaryKey with explicit `id` in the PK. Single key or composite\nexport const isIdOptionallyManaged = (\n\tmodelDefinition: SchemaModel\n): boolean => {\n\tconst keyAttribute = extractKeyIfExists(modelDefinition);\n\n\tif (keyAttribute && isModelAttributePrimaryKey(keyAttribute)) {\n\t\treturn keyAttribute.properties.fields[0] === ID;\n\t}\n\n\treturn false;\n};\n\nexport const establishRelationAndKeys = (\n\tnamespace: SchemaNamespace\n): [RelationshipType, ModelKeys] => {\n\tconst relationship: RelationshipType = {};\n\tconst keys: ModelKeys = {};\n\n\tObject.keys(namespace.models).forEach((mKey: string) => {\n\t\trelationship[mKey] = { indexes: [], relationTypes: [] };\n\t\tkeys[mKey] = {};\n\n\t\tconst model = namespace.models[mKey];\n\t\tObject.keys(model.fields).forEach((attr: string) => {\n\t\t\tconst fieldAttribute = model.fields[attr];\n\t\t\tif (\n\t\t\t\ttypeof fieldAttribute.type === 'object' &&\n\t\t\t\t'model' in fieldAttribute.type\n\t\t\t) {\n\t\t\t\tconst connectionType = fieldAttribute.association!.connectionType;\n\t\t\t\trelationship[mKey].relationTypes.push({\n\t\t\t\t\tfieldName: fieldAttribute.name,\n\t\t\t\t\tmodelName: fieldAttribute.type.model,\n\t\t\t\t\trelationType: connectionType,\n\t\t\t\t\ttargetName: fieldAttribute.association!['targetName'],\n\t\t\t\t\ttargetNames: fieldAttribute.association!['targetNames'],\n\t\t\t\t\tassociatedWith: fieldAttribute.association!['associatedWith'],\n\t\t\t\t});\n\n\t\t\t\tif (connectionType === 'BELONGS_TO') {\n\t\t\t\t\tconst targetNames = extractTargetNamesFromSrc(\n\t\t\t\t\t\tfieldAttribute.association\n\t\t\t\t\t);\n\n\t\t\t\t\tif (targetNames) {\n\t\t\t\t\t\tconst idxName = indexNameFromKeys(targetNames);\n\t\t\t\t\t\tconst idxExists = relationship[mKey].indexes.find(\n\t\t\t\t\t\t\t([index]) => index === idxName\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (!idxExists) {\n\t\t\t\t\t\t\trelationship[mKey].indexes.push([idxName, targetNames]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (model.attributes) {\n\t\t\tkeys[mKey].compositeKeys = processCompositeKeys(model.attributes);\n\n\t\t\tfor (const attribute of model.attributes) {\n\t\t\t\tif (!isModelAttributeKey(attribute)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst { fields } = attribute.properties;\n\n\t\t\t\tif (isModelAttributePrimaryKey(attribute)) {\n\t\t\t\t\tkeys[mKey].primaryKey = fields;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// create indexes for all other keys\n\t\t\t\tconst idxName = indexNameFromKeys(fields);\n\t\t\t\tconst idxExists = relationship[mKey].indexes.find(\n\t\t\t\t\t([index]) => index === idxName\n\t\t\t\t);\n\n\t\t\t\tif (!idxExists) {\n\t\t\t\t\trelationship[mKey].indexes.push([idxName, fields]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// set 'id' as the PK for models without a custom PK explicitly defined\n\t\tif (!keys[mKey].primaryKey) {\n\t\t\tkeys[mKey].primaryKey = [ID];\n\t\t}\n\n\t\t// create primary index\n\t\trelationship[mKey].indexes.push([\n\t\t\t'byPk',\n\t\t\tkeys[mKey].primaryKey as string[],\n\t\t\t{ unique: true },\n\t\t]);\n\t});\n\n\treturn [relationship, keys];\n};\n\nexport const getIndex = (\n\trel: RelationType[],\n\tsrc: string\n): string | undefined => {\n\tlet indexName;\n\trel.some((relItem: RelationType) => {\n\t\tif (relItem.modelName === src) {\n\t\t\tconst targetNames = extractTargetNamesFromSrc(relItem);\n\t\t\tindexName = targetNames && indexNameFromKeys(targetNames);\n\t\t\treturn true;\n\t\t}\n\t});\n\treturn indexName;\n};\n\nexport const getIndexFromAssociation = (\n\tindexes: IndexesType,\n\tsrc: string | string[]\n): string | undefined => {\n\tlet indexName: string;\n\n\tif (Array.isArray(src)) {\n\t\tindexName = indexNameFromKeys(src);\n\t} else {\n\t\tindexName = src;\n\t}\n\n\tconst associationIndex = indexes.find(([idxName]) => idxName === indexName);\n\treturn associationIndex && associationIndex[0];\n};\n\n/**\n * Backwards-compatability for schema generated prior to custom primary key support:\nthe single field `targetName` has been replaced with an array of `targetNames`.\n`targetName` and `targetNames` are exclusive (will never exist on the same schema)\n * @param src {RelationType | ModelAssociation | undefined}\n * @returns array of targetNames, or `undefined`\n */\nexport const extractTargetNamesFromSrc = (\n\tsrc: RelationType | ModelAssociation | undefined\n): string[] | undefined => {\n\tconst targetName = src?.targetName;\n\tconst targetNames = src?.targetNames;\n\n\tif (Array.isArray(targetNames)) {\n\t\treturn targetNames;\n\t} else if (typeof targetName === 'string') {\n\t\treturn [targetName];\n\t} else {\n\t\treturn undefined;\n\t}\n};\n\n// Generates spinal-cased index name from an array of key field names\n// E.g. for keys `[id, title]` => 'id-title'\nexport const indexNameFromKeys = (keys: string[]): string => {\n\treturn keys.reduce((prev: string, cur: string, idx: number) => {\n\t\tif (idx === 0) {\n\t\t\treturn cur;\n\t\t}\n\t\treturn `${prev}${IDENTIFIER_KEY_SEPARATOR}${cur}`;\n\t}, '');\n};\n\nexport const keysEqual = (keysA, keysB): boolean => {\n\tif (keysA.length !== keysB.length) {\n\t\treturn false;\n\t}\n\n\treturn keysA.every((key, idx) => key === keysB[idx]);\n};\n\n// Returns primary keys for a model\nexport const getIndexKeys = (\n\tnamespace: SchemaNamespace,\n\tmodelName: string\n): string[] => {\n\tconst keyPath = namespace?.keys?.[modelName]?.primaryKey;\n\n\tif (keyPath) {\n\t\treturn keyPath;\n\t}\n\n\treturn [ID];\n};\n\n//#endregion\n\n/**\n * Determine what the managed timestamp field names are for the given model definition\n * and return the mapping.\n *\n * All timestamp fields are included in the mapping, regardless of whether the final field\n * names are the defaults or customized in the `@model` directive.\n *\n * @see https://docs.amplify.aws/cli/graphql/data-modeling/#customize-creation-and-update-timestamps\n *\n * @param definition modelDefinition to inspect.\n * @returns An object mapping `createdAt` and `updatedAt` to their field names.\n */\nexport const getTimestampFields = (\n\tdefinition: SchemaModel\n): { createdAt: string; updatedAt: string } => {\n\tconst modelAttributes = definition.attributes?.find(\n\t\tattr => attr.type === 'model'\n\t);\n\tconst timestampFieldsMap = modelAttributes?.properties?.timestamps;\n\n\tconst defaultFields = {\n\t\tcreatedAt: 'createdAt',\n\t\tupdatedAt: 'updatedAt',\n\t};\n\n\tconst customFields = timestampFieldsMap || {};\n\n\treturn {\n\t\t...defaultFields,\n\t\t...customFields,\n\t};\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}