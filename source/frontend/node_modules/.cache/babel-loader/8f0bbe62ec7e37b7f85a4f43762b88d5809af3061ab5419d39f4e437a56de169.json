{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractConvertPredictionsProvider } from '../types/Providers/AbstractConvertPredictionsProvider';\nimport { TranslateClient, TranslateTextCommand } from '@aws-sdk/client-translate';\nimport { PollyClient, SynthesizeSpeechCommand } from '@aws-sdk/client-polly';\nimport { isBytesSource } from '../types';\nimport { Credentials, ConsoleLogger as Logger, Signer, getAmplifyUserAgentObject, Category, PredictionsAction } from '@aws-amplify/core';\nimport { EventStreamMarshaller } from '@aws-sdk/eventstream-marshaller';\nimport { fromUtf8, toUtf8 } from '@aws-sdk/util-utf8-node';\nimport { Buffer } from 'buffer';\nvar logger = new Logger('AmazonAIConvertPredictionsProvider');\nvar eventBuilder = new EventStreamMarshaller(toUtf8, fromUtf8);\nvar LANGUAGES_CODE_IN_8KHZ = ['fr-FR', 'en-AU', 'en-GB', 'fr-CA'];\nvar AmazonAIConvertPredictionsProvider = /** @class */function (_super) {\n  __extends(AmazonAIConvertPredictionsProvider, _super);\n  function AmazonAIConvertPredictionsProvider() {\n    var _this = _super.call(this) || this;\n    _this.inputSampleRate = 44100;\n    return _this;\n  }\n  AmazonAIConvertPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIConvertPredictionsProvider';\n  };\n  AmazonAIConvertPredictionsProvider.prototype.translateText = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, _c, _d, _e, sourceLanguage, _f, targetLanguage, _g, region, credentials, sourceLanguageCode, targetLanguageCode, translateTextCommand, data, err_1;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            logger.debug('Starting translation');\n            _a = this._config.translateText, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = _c === void 0 ? {} : _c, _e = _d.sourceLanguage, sourceLanguage = _e === void 0 ? '' : _e, _f = _d.targetLanguage, targetLanguage = _f === void 0 ? '' : _f, _g = _b.region, region = _g === void 0 ? '' : _g;\n            if (!region) {\n              return [2 /*return*/, Promise.reject('region not configured for transcription')];\n            }\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _h.sent();\n            if (!credentials) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            sourceLanguageCode = input.translateText.source.language || sourceLanguage;\n            targetLanguageCode = input.translateText.targetLanguage || targetLanguage;\n            if (!sourceLanguageCode || !targetLanguageCode) {\n              return [2 /*return*/, Promise.reject('Please provide both source and target language')];\n            }\n            this.translateClient = new TranslateClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgentObject({\n                category: Category.Predictions,\n                action: PredictionsAction.Convert\n              })\n            });\n            translateTextCommand = new TranslateTextCommand({\n              SourceLanguageCode: sourceLanguageCode,\n              TargetLanguageCode: targetLanguageCode,\n              Text: input.translateText.source.text\n            });\n            _h.label = 2;\n          case 2:\n            _h.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, this.translateClient.send(translateTextCommand)];\n          case 3:\n            data = _h.sent();\n            return [2 /*return*/, {\n              text: data.TranslatedText,\n              language: data.TargetLanguageCode\n            }];\n          case 4:\n            err_1 = _h.sent();\n            return [2 /*return*/, Promise.reject(err_1)];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.convertTextToSpeech = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, _d, VoiceId, _e, region, voiceId, synthesizeSpeechCommand, data, response, arrayBuffer, blob, url, err_2;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _f.sent();\n            if (!credentials) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            _a = this._config.speechGenerator, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).VoiceId, VoiceId = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n            if (!input.textToSpeech.source) {\n              return [2 /*return*/, Promise.reject('Source needs to be provided in the input')];\n            }\n            voiceId = input.textToSpeech.voiceId || VoiceId;\n            if (!region) {\n              return [2 /*return*/, Promise.reject('Region was undefined. Did you enable speech generator using amplify CLI?')];\n            }\n            if (!voiceId) {\n              return [2 /*return*/, Promise.reject('VoiceId was undefined.')];\n            }\n            this.pollyClient = new PollyClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgentObject({\n                category: Category.Predictions,\n                action: PredictionsAction.Convert\n              })\n            });\n            synthesizeSpeechCommand = new SynthesizeSpeechCommand({\n              OutputFormat: 'mp3',\n              Text: input.textToSpeech.source.text,\n              VoiceId: voiceId,\n              TextType: 'text',\n              SampleRate: '24000'\n            });\n            _f.label = 2;\n          case 2:\n            _f.trys.push([2, 5,, 6]);\n            return [4 /*yield*/, this.pollyClient.send(synthesizeSpeechCommand)];\n          case 3:\n            data = _f.sent();\n            response = new Response(data.AudioStream);\n            return [4 /*yield*/, response.arrayBuffer()];\n          case 4:\n            arrayBuffer = _f.sent();\n            blob = new Blob([arrayBuffer], {\n              type: data.ContentType\n            });\n            url = URL.createObjectURL(blob);\n            return [2 /*return*/, {\n              speech: {\n                url: url\n              },\n              audioStream: arrayBuffer,\n              text: input.textToSpeech.source.text\n            }];\n          case 5:\n            err_2 = _f.sent();\n            return [2 /*return*/, Promise.reject(err_2)];\n          case 6:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.convertSpeechToText = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, _d, languageCode, _e, region, _f, source, _g, language, connection, fullText, err_3, err_4;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            _h.trys.push([0, 7,, 8]);\n            logger.debug('starting transcription..');\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _h.sent();\n            if (!credentials) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            _a = this._config.transcription, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).language, languageCode = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n            if (!region) {\n              return [2 /*return*/, Promise.reject('region not configured for transcription')];\n            }\n            if (!languageCode) {\n              return [2 /*return*/, Promise.reject('languageCode not configured or provided for transcription')];\n            }\n            _f = input.transcription, source = _f.source, _g = _f.language, language = _g === void 0 ? languageCode : _g;\n            if (!isBytesSource(source)) return [3 /*break*/, 6];\n            return [4 /*yield*/, this.openConnectionWithTranscribe({\n              credentials: credentials,\n              region: region,\n              languageCode: language\n            })];\n          case 2:\n            connection = _h.sent();\n            _h.label = 3;\n          case 3:\n            _h.trys.push([3, 5,, 6]);\n            return [4 /*yield*/, this.sendDataToTranscribe({\n              connection: connection,\n              raw: source.bytes,\n              languageCode: language\n            })];\n          case 4:\n            fullText = _h.sent();\n            return [2 /*return*/, {\n              transcription: {\n                fullText: fullText\n              }\n            }];\n          case 5:\n            err_3 = _h.sent();\n            return [2 /*return*/, Promise.reject(err_3)];\n          case 6:\n            return [2 /*return*/, Promise.reject('Source types other than byte source are not supported.')];\n          case 7:\n            err_4 = _h.sent();\n            return [2 /*return*/, Promise.reject(err_4.name + ': ' + err_4.message)];\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe = function (message) {\n    var decodedMessage = '';\n    var transcribeMessage = eventBuilder.unmarshall(Buffer.from(message.data));\n    var transcribeMessageJson = JSON.parse(toUtf8(transcribeMessage.body));\n    if (transcribeMessage.headers[':message-type'].value === 'exception') {\n      logger.debug('exception', JSON.stringify(transcribeMessageJson.Message, null, 2));\n      throw new Error(transcribeMessageJson.Message);\n    } else if (transcribeMessage.headers[':message-type'].value === 'event') {\n      if (transcribeMessageJson.Transcript.Results.length > 0) {\n        if (transcribeMessageJson.Transcript.Results[0].Alternatives.length > 0) {\n          if (transcribeMessageJson.Transcript.Results[0].Alternatives[0].Transcript.length > 0) {\n            if (transcribeMessageJson.Transcript.Results[0].IsPartial === false) {\n              decodedMessage = transcribeMessageJson.Transcript.Results[0].Alternatives[0].Transcript + '\\n';\n              logger.debug({\n                decodedMessage: decodedMessage\n              });\n            } else {\n              logger.debug({\n                transcript: transcribeMessageJson.Transcript.Results[0].Alternatives[0]\n              });\n            }\n          }\n        }\n      }\n    }\n    return decodedMessage;\n  };\n  AmazonAIConvertPredictionsProvider.prototype.sendDataToTranscribe = function (_a) {\n    var _this = this;\n    var connection = _a.connection,\n      raw = _a.raw,\n      languageCode = _a.languageCode;\n    return new Promise(function (res, rej) {\n      var fullText = '';\n      connection.onmessage = function (message) {\n        try {\n          var decodedMessage = AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe(message);\n          if (decodedMessage) {\n            fullText += decodedMessage + ' ';\n          }\n        } catch (err) {\n          logger.debug(err);\n          rej(err.message);\n        }\n      };\n      connection.onerror = function (errorEvent) {\n        logger.debug({\n          errorEvent: errorEvent\n        });\n        rej('failed to transcribe, network error');\n      };\n      connection.onclose = function (closeEvent) {\n        logger.debug({\n          closeEvent: closeEvent\n        });\n        return res(fullText.trim());\n      };\n      logger.debug({\n        raw: raw\n      });\n      if (Array.isArray(raw)) {\n        for (var i = 0; i < raw.length - 1023; i += 1024) {\n          var data = raw.slice(i, i + 1024);\n          _this.sendEncodedDataToTranscribe(connection, data, languageCode);\n        }\n      } else {\n        // If Buffer\n        _this.sendEncodedDataToTranscribe(connection, raw, languageCode);\n      }\n      // sending end frame\n      var endFrameEventMessage = _this.getAudioEventMessage(Buffer.from([]));\n      var endFrameBinary = eventBuilder.marshall(endFrameEventMessage);\n      connection.send(endFrameBinary);\n    });\n  };\n  AmazonAIConvertPredictionsProvider.prototype.sendEncodedDataToTranscribe = function (connection, data, languageCode) {\n    var downsampledBuffer = this.downsampleBuffer({\n      buffer: data,\n      outputSampleRate: LANGUAGES_CODE_IN_8KHZ.includes(languageCode) ? 8000 : 16000\n    });\n    var pcmEncodedBuffer = this.pcmEncode(downsampledBuffer);\n    var audioEventMessage = this.getAudioEventMessage(Buffer.from(pcmEncodedBuffer));\n    var binary = eventBuilder.marshall(audioEventMessage);\n    connection.send(binary);\n  };\n  AmazonAIConvertPredictionsProvider.prototype.getAudioEventMessage = function (buffer) {\n    var audioEventMessage = {\n      body: buffer,\n      headers: {\n        ':message-type': {\n          type: 'string',\n          value: 'event'\n        },\n        ':event-type': {\n          type: 'string',\n          value: 'AudioEvent'\n        }\n      }\n    };\n    return audioEventMessage;\n  };\n  AmazonAIConvertPredictionsProvider.prototype.pcmEncode = function (input) {\n    var offset = 0;\n    var buffer = new ArrayBuffer(input.length * 2);\n    var view = new DataView(buffer);\n    for (var i = 0; i < input.length; i++, offset += 2) {\n      var s = Math.max(-1, Math.min(1, input[i]));\n      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n    }\n    return buffer;\n  };\n  AmazonAIConvertPredictionsProvider.prototype.downsampleBuffer = function (_a) {\n    var buffer = _a.buffer,\n      _b = _a.outputSampleRate,\n      outputSampleRate = _b === void 0 ? 16000 : _b;\n    if (outputSampleRate === this.inputSampleRate) {\n      return buffer;\n    }\n    var sampleRateRatio = this.inputSampleRate / outputSampleRate;\n    var newLength = Math.round(buffer.length / sampleRateRatio);\n    var result = new Float32Array(newLength);\n    var offsetResult = 0;\n    var offsetBuffer = 0;\n    while (offsetResult < result.length) {\n      var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n      var accum = 0,\n        count = 0;\n      for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n        accum += buffer[i];\n        count++;\n      }\n      result[offsetResult] = accum / count;\n      offsetResult++;\n      offsetBuffer = nextOffsetBuffer;\n    }\n    return result;\n  };\n  AmazonAIConvertPredictionsProvider.prototype.openConnectionWithTranscribe = function (_a) {\n    var _this = this;\n    var userCredentials = _a.credentials,\n      region = _a.region,\n      languageCode = _a.languageCode;\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var access_key, secret_key, session_token, credentials, signedUrl, connection;\n        return __generator(this, function (_a) {\n          access_key = userCredentials.accessKeyId, secret_key = userCredentials.secretAccessKey, session_token = userCredentials.sessionToken;\n          credentials = {\n            access_key: access_key,\n            secret_key: secret_key,\n            session_token: session_token\n          };\n          signedUrl = this.generateTranscribeUrl({\n            credentials: credentials,\n            region: region,\n            languageCode: languageCode\n          });\n          logger.debug('connecting...');\n          connection = new WebSocket(signedUrl);\n          connection.binaryType = 'arraybuffer';\n          connection.onopen = function () {\n            logger.debug('connected');\n            res(connection);\n          };\n          return [2 /*return*/];\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.generateTranscribeUrl = function (_a) {\n    var credentials = _a.credentials,\n      region = _a.region,\n      languageCode = _a.languageCode;\n    var url = [\"wss://transcribestreaming.\" + region + \".amazonaws.com:8443\", '/stream-transcription-websocket?', \"media-encoding=pcm&\", \"sample-rate=\" + (LANGUAGES_CODE_IN_8KHZ.includes(languageCode) ? '8000' : '16000') + \"&\", \"language-code=\" + languageCode].join('');\n    var signedUrl = Signer.signUrl(url, credentials, {\n      region: region,\n      service: 'transcribe'\n    }, 300);\n    return signedUrl;\n  };\n  return AmazonAIConvertPredictionsProvider;\n}(AbstractConvertPredictionsProvider);\nexport { AmazonAIConvertPredictionsProvider };","map":{"version":3,"mappings":"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","names":["AbstractConvertPredictionsProvider","TranslateClient","TranslateTextCommand","PollyClient","SynthesizeSpeechCommand","isBytesSource","Credentials","ConsoleLogger","Logger","Signer","getAmplifyUserAgentObject","Category","PredictionsAction","EventStreamMarshaller","fromUtf8","toUtf8","Buffer","logger","eventBuilder","LANGUAGES_CODE_IN_8KHZ","__extends","_super","_this","AmazonAIConvertPredictionsProvider","input","debug","_a","_config","_b","_c","_d","_e","sourceLanguage","_f","targetLanguage","_g","region","Promise","reject","get","credentials","_h","sourceLanguageCode","translateText","source","language","targetLanguageCode","translateClient","customUserAgent","category","Predictions","action","Convert","translateTextCommand","SourceLanguageCode","TargetLanguageCode","Text","text","send","data","TranslatedText","err_1","VoiceId","textToSpeech","voiceId","pollyClient","synthesizeSpeechCommand","OutputFormat","TextType","SampleRate","response","Response","AudioStream","arrayBuffer","blob","Blob","type","ContentType","url","URL","createObjectURL","speech","audioStream","err_2","languageCode","openConnectionWithTranscribe","connection","sendDataToTranscribe","raw","bytes","fullText","transcription","err_3","err_4","name","message","decodedMessage","transcribeMessage","unmarshall","from","transcribeMessageJson","JSON","parse","body","headers","value","stringify","Message","Error","Transcript","Results","length","Alternatives","IsPartial","transcript","res","rej","onmessage","serializeDataFromTranscribe","err","onerror","errorEvent","onclose","closeEvent","trim","Array","isArray","i","slice","sendEncodedDataToTranscribe","endFrameEventMessage","getAudioEventMessage","endFrameBinary","marshall","downsampledBuffer","downsampleBuffer","buffer","outputSampleRate","includes","pcmEncodedBuffer","pcmEncode","audioEventMessage","binary","offset","ArrayBuffer","view","DataView","s","Math","max","min","setInt16","inputSampleRate","sampleRateRatio","newLength","round","result","Float32Array","offsetResult","offsetBuffer","nextOffsetBuffer","accum","count","userCredentials","access_key","secret_key","session_token","signedUrl","generateTranscribeUrl","WebSocket","binaryType","onopen","join","signUrl","service"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-amplify/predictions/src/Providers/AmazonAIConvertPredictionsProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractConvertPredictionsProvider } from '../types/Providers/AbstractConvertPredictionsProvider';\nimport {\n\tTranslateClient,\n\tTranslateTextCommand,\n} from '@aws-sdk/client-translate';\nimport { PollyClient, SynthesizeSpeechCommand } from '@aws-sdk/client-polly';\nimport {\n\tTranslateTextInput,\n\tTextToSpeechInput,\n\tSpeechToTextInput,\n\tTranslateTextOutput,\n\tTextToSpeechOutput,\n\tSpeechToTextOutput,\n\tisBytesSource,\n} from '../types';\nimport {\n\tCredentials,\n\tConsoleLogger as Logger,\n\tSigner,\n\tgetAmplifyUserAgentObject,\n\tCategory,\n\tPredictionsAction,\n} from '@aws-amplify/core';\nimport {\n\tEventStreamMarshaller,\n\tMessageHeaderValue,\n} from '@aws-sdk/eventstream-marshaller';\nimport { fromUtf8, toUtf8 } from '@aws-sdk/util-utf8-node';\nimport { Buffer } from 'buffer';\n\nconst logger = new Logger('AmazonAIConvertPredictionsProvider');\nconst eventBuilder = new EventStreamMarshaller(toUtf8, fromUtf8);\n\nconst LANGUAGES_CODE_IN_8KHZ = ['fr-FR', 'en-AU', 'en-GB', 'fr-CA'];\n\nexport class AmazonAIConvertPredictionsProvider extends AbstractConvertPredictionsProvider {\n\tprivate translateClient: TranslateClient;\n\tprivate pollyClient: PollyClient;\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AmazonAIConvertPredictionsProvider';\n\t}\n\n\tprotected async translateText(\n\t\tinput: TranslateTextInput\n\t): Promise<TranslateTextOutput> {\n\t\tlogger.debug('Starting translation');\n\t\tconst {\n\t\t\ttranslateText: {\n\t\t\t\tdefaults: { sourceLanguage = '', targetLanguage = '' } = {},\n\t\t\t\tregion = '',\n\t\t\t} = {},\n\t\t} = this._config;\n\n\t\tif (!region) {\n\t\t\treturn Promise.reject('region not configured for transcription');\n\t\t}\n\n\t\tconst credentials = await Credentials.get();\n\t\tif (!credentials) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\t\tconst sourceLanguageCode =\n\t\t\tinput.translateText.source.language || sourceLanguage;\n\t\tconst targetLanguageCode =\n\t\t\tinput.translateText.targetLanguage || targetLanguage;\n\t\tif (!sourceLanguageCode || !targetLanguageCode) {\n\t\t\treturn Promise.reject('Please provide both source and target language');\n\t\t}\n\n\t\tthis.translateClient = new TranslateClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgentObject({\n\t\t\t\tcategory: Category.Predictions,\n\t\t\t\taction: PredictionsAction.Convert,\n\t\t\t}),\n\t\t});\n\t\tconst translateTextCommand = new TranslateTextCommand({\n\t\t\tSourceLanguageCode: sourceLanguageCode,\n\t\t\tTargetLanguageCode: targetLanguageCode,\n\t\t\tText: input.translateText.source.text,\n\t\t});\n\t\ttry {\n\t\t\tconst data = await this.translateClient.send(translateTextCommand);\n\t\t\treturn {\n\t\t\t\ttext: data.TranslatedText,\n\t\t\t\tlanguage: data.TargetLanguageCode,\n\t\t\t} as TranslateTextOutput;\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\tprotected async convertTextToSpeech(\n\t\tinput: TextToSpeechInput\n\t): Promise<TextToSpeechOutput> {\n\t\tconst credentials = await Credentials.get();\n\t\tif (!credentials) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\t\tconst {\n\t\t\tspeechGenerator: { defaults: { VoiceId = '' } = {}, region = '' } = {},\n\t\t} = this._config;\n\n\t\tif (!input.textToSpeech.source) {\n\t\t\treturn Promise.reject('Source needs to be provided in the input');\n\t\t}\n\t\tconst voiceId = input.textToSpeech.voiceId || VoiceId;\n\t\tif (!region) {\n\t\t\treturn Promise.reject(\n\t\t\t\t'Region was undefined. Did you enable speech generator using amplify CLI?'\n\t\t\t);\n\t\t}\n\n\t\tif (!voiceId) {\n\t\t\treturn Promise.reject('VoiceId was undefined.');\n\t\t}\n\n\t\tthis.pollyClient = new PollyClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgentObject({\n\t\t\t\tcategory: Category.Predictions,\n\t\t\t\taction: PredictionsAction.Convert,\n\t\t\t}),\n\t\t});\n\t\tconst synthesizeSpeechCommand = new SynthesizeSpeechCommand({\n\t\t\tOutputFormat: 'mp3',\n\t\t\tText: input.textToSpeech.source.text,\n\t\t\tVoiceId: voiceId,\n\t\t\tTextType: 'text',\n\t\t\tSampleRate: '24000',\n\t\t\t// tslint:disable-next-line: align\n\t\t});\n\t\ttry {\n\t\t\tconst data = await this.pollyClient.send(synthesizeSpeechCommand);\n\t\t\tconst response = new Response(data.AudioStream as ReadableStream);\n\t\t\tconst arrayBuffer = await response.arrayBuffer();\n\t\t\tconst blob = new Blob([arrayBuffer], {\n\t\t\t\ttype: data.ContentType,\n\t\t\t});\n\t\t\tconst url = URL.createObjectURL(blob);\n\t\t\treturn {\n\t\t\t\tspeech: { url },\n\t\t\t\taudioStream: arrayBuffer,\n\t\t\t\ttext: input.textToSpeech.source.text,\n\t\t\t} as TextToSpeechOutput;\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\tprotected async convertSpeechToText(\n\t\tinput: SpeechToTextInput\n\t): Promise<SpeechToTextOutput> {\n\t\ttry {\n\t\t\tlogger.debug('starting transcription..');\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) {\n\t\t\t\treturn Promise.reject('No credentials');\n\t\t\t}\n\t\t\tconst {\n\t\t\t\ttranscription: {\n\t\t\t\t\tdefaults: { language: languageCode = '' } = {},\n\t\t\t\t\tregion = '',\n\t\t\t\t} = {},\n\t\t\t} = this._config;\n\t\t\tif (!region) {\n\t\t\t\treturn Promise.reject('region not configured for transcription');\n\t\t\t}\n\t\t\tif (!languageCode) {\n\t\t\t\treturn Promise.reject(\n\t\t\t\t\t'languageCode not configured or provided for transcription'\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst {\n\t\t\t\ttranscription: { source, language = languageCode },\n\t\t\t} = input;\n\n\t\t\tif (isBytesSource(source)) {\n\t\t\t\tconst connection = await this.openConnectionWithTranscribe({\n\t\t\t\t\tcredentials,\n\t\t\t\t\tregion,\n\t\t\t\t\tlanguageCode: language,\n\t\t\t\t});\n\n\t\t\t\ttry {\n\t\t\t\t\tconst fullText = await this.sendDataToTranscribe({\n\t\t\t\t\t\tconnection,\n\t\t\t\t\t\traw: source.bytes,\n\t\t\t\t\t\tlanguageCode: language,\n\t\t\t\t\t});\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttranscription: {\n\t\t\t\t\t\t\tfullText,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn Promise.reject(err);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn Promise.reject(\n\t\t\t\t'Source types other than byte source are not supported.'\n\t\t\t);\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err.name + ': ' + err.message);\n\t\t}\n\t}\n\n\tpublic static serializeDataFromTranscribe(message) {\n\t\tlet decodedMessage = '';\n\t\tconst transcribeMessage = eventBuilder.unmarshall(\n\t\t\tBuffer.from(message.data)\n\t\t);\n\t\tconst transcribeMessageJson = JSON.parse(toUtf8(transcribeMessage.body));\n\t\tif (transcribeMessage.headers[':message-type'].value === 'exception') {\n\t\t\tlogger.debug(\n\t\t\t\t'exception',\n\t\t\t\tJSON.stringify(transcribeMessageJson.Message, null, 2)\n\t\t\t);\n\t\t\tthrow new Error(transcribeMessageJson.Message);\n\t\t} else if (transcribeMessage.headers[':message-type'].value === 'event') {\n\t\t\tif (transcribeMessageJson.Transcript.Results.length > 0) {\n\t\t\t\tif (\n\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].Alternatives.length > 0\n\t\t\t\t) {\n\t\t\t\t\tif (\n\t\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].Alternatives[0]\n\t\t\t\t\t\t\t.Transcript.length > 0\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].IsPartial === false\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tdecodedMessage =\n\t\t\t\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].Alternatives[0]\n\t\t\t\t\t\t\t\t\t.Transcript + '\\n';\n\t\t\t\t\t\t\tlogger.debug({ decodedMessage });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlogger.debug({\n\t\t\t\t\t\t\t\ttranscript:\n\t\t\t\t\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].Alternatives[0],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn decodedMessage;\n\t}\n\n\tprivate sendDataToTranscribe({\n\t\tconnection,\n\t\traw,\n\t\tlanguageCode,\n\t}): Promise<string> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tlet fullText = '';\n\t\t\tconnection.onmessage = message => {\n\t\t\t\ttry {\n\t\t\t\t\tconst decodedMessage =\n\t\t\t\t\t\tAmazonAIConvertPredictionsProvider.serializeDataFromTranscribe(\n\t\t\t\t\t\t\tmessage\n\t\t\t\t\t\t);\n\t\t\t\t\tif (decodedMessage) {\n\t\t\t\t\t\tfullText += decodedMessage + ' ';\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.debug(err);\n\t\t\t\t\trej(err.message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconnection.onerror = errorEvent => {\n\t\t\t\tlogger.debug({ errorEvent });\n\t\t\t\trej('failed to transcribe, network error');\n\t\t\t};\n\n\t\t\tconnection.onclose = closeEvent => {\n\t\t\t\tlogger.debug({ closeEvent });\n\t\t\t\treturn res(fullText.trim());\n\t\t\t};\n\n\t\t\tlogger.debug({ raw });\n\n\t\t\tif (Array.isArray(raw)) {\n\t\t\t\tfor (let i = 0; i < raw.length - 1023; i += 1024) {\n\t\t\t\t\tconst data = raw.slice(i, i + 1024);\n\t\t\t\t\tthis.sendEncodedDataToTranscribe(connection, data, languageCode);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If Buffer\n\t\t\t\tthis.sendEncodedDataToTranscribe(connection, raw, languageCode);\n\t\t\t}\n\n\t\t\t// sending end frame\n\t\t\tconst endFrameEventMessage = this.getAudioEventMessage(Buffer.from([]));\n\t\t\tconst endFrameBinary = eventBuilder.marshall(endFrameEventMessage);\n\t\t\tconnection.send(endFrameBinary);\n\t\t});\n\t}\n\n\tprivate sendEncodedDataToTranscribe(connection, data, languageCode) {\n\t\tconst downsampledBuffer = this.downsampleBuffer({\n\t\t\tbuffer: data,\n\t\t\toutputSampleRate: LANGUAGES_CODE_IN_8KHZ.includes(languageCode)\n\t\t\t\t? 8000\n\t\t\t\t: 16000,\n\t\t});\n\t\tconst pcmEncodedBuffer = this.pcmEncode(downsampledBuffer);\n\t\tconst audioEventMessage = this.getAudioEventMessage(\n\t\t\tBuffer.from(pcmEncodedBuffer)\n\t\t);\n\t\tconst binary = eventBuilder.marshall(audioEventMessage);\n\t\tconnection.send(binary);\n\t}\n\n\tprivate getAudioEventMessage(buffer) {\n\t\tconst audioEventMessage = {\n\t\t\tbody: buffer as Uint8Array,\n\t\t\theaders: {\n\t\t\t\t':message-type': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tvalue: 'event',\n\t\t\t\t} as MessageHeaderValue,\n\t\t\t\t':event-type': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tvalue: 'AudioEvent',\n\t\t\t\t} as MessageHeaderValue,\n\t\t\t},\n\t\t};\n\n\t\treturn audioEventMessage;\n\t}\n\n\tprivate pcmEncode(input) {\n\t\tlet offset = 0;\n\t\tconst buffer = new ArrayBuffer(input.length * 2);\n\t\tconst view = new DataView(buffer);\n\t\tfor (let i = 0; i < input.length; i++, offset += 2) {\n\t\t\tconst s = Math.max(-1, Math.min(1, input[i]));\n\t\t\tview.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n\t\t}\n\t\treturn buffer;\n\t}\n\n\tprivate inputSampleRate = 44100;\n\n\tprivate downsampleBuffer({ buffer, outputSampleRate = 16000 }) {\n\t\tif (outputSampleRate === this.inputSampleRate) {\n\t\t\treturn buffer;\n\t\t}\n\n\t\tconst sampleRateRatio = this.inputSampleRate / outputSampleRate;\n\t\tconst newLength = Math.round(buffer.length / sampleRateRatio);\n\t\tconst result = new Float32Array(newLength);\n\t\tlet offsetResult = 0;\n\t\tlet offsetBuffer = 0;\n\t\twhile (offsetResult < result.length) {\n\t\t\tconst nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n\t\t\tlet accum = 0,\n\t\t\t\tcount = 0;\n\t\t\tfor (\n\t\t\t\tlet i = offsetBuffer;\n\t\t\t\ti < nextOffsetBuffer && i < buffer.length;\n\t\t\t\ti++\n\t\t\t) {\n\t\t\t\taccum += buffer[i];\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tresult[offsetResult] = accum / count;\n\t\t\toffsetResult++;\n\t\t\toffsetBuffer = nextOffsetBuffer;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate openConnectionWithTranscribe({\n\t\tcredentials: userCredentials,\n\t\tregion,\n\t\tlanguageCode,\n\t}): Promise<WebSocket> {\n\t\treturn new Promise(async (res, rej) => {\n\t\t\tconst {\n\t\t\t\taccessKeyId: access_key,\n\t\t\t\tsecretAccessKey: secret_key,\n\t\t\t\tsessionToken: session_token,\n\t\t\t} = userCredentials;\n\n\t\t\tconst credentials = {\n\t\t\t\taccess_key,\n\t\t\t\tsecret_key,\n\t\t\t\tsession_token,\n\t\t\t};\n\n\t\t\tconst signedUrl = this.generateTranscribeUrl({\n\t\t\t\tcredentials,\n\t\t\t\tregion,\n\t\t\t\tlanguageCode,\n\t\t\t});\n\n\t\t\tlogger.debug('connecting...');\n\t\t\tconst connection = new WebSocket(signedUrl);\n\n\t\t\tconnection.binaryType = 'arraybuffer';\n\t\t\tconnection.onopen = () => {\n\t\t\t\tlogger.debug('connected');\n\t\t\t\tres(connection);\n\t\t\t};\n\t\t});\n\t}\n\n\tprivate generateTranscribeUrl({ credentials, region, languageCode }): string {\n\t\tconst url = [\n\t\t\t`wss://transcribestreaming.${region}.amazonaws.com:8443`,\n\t\t\t'/stream-transcription-websocket?',\n\t\t\t`media-encoding=pcm&`,\n\t\t\t`sample-rate=${\n\t\t\t\tLANGUAGES_CODE_IN_8KHZ.includes(languageCode) ? '8000' : '16000'\n\t\t\t}&`,\n\t\t\t`language-code=${languageCode}`,\n\t\t].join('');\n\n\t\tconst signedUrl = Signer.signUrl(\n\t\t\turl,\n\t\t\tcredentials,\n\t\t\t{ region, service: 'transcribe' },\n\t\t\t300\n\t\t);\n\n\t\treturn signedUrl;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}