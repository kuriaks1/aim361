{"ast":null,"code":"import { __awaiter, __generator, __read } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, ConsoleLogger as Logger, parseAWSExports } from '@aws-amplify/core';\nimport { AmazonLocationServiceProvider } from './Providers/AmazonLocationServiceProvider';\nimport { validateCoordinates } from './util';\nvar logger = new Logger('Geo');\nvar DEFAULT_PROVIDER = 'AmazonLocationService';\nvar GeoClass = /** @class */function () {\n  function GeoClass() {\n    this._config = {};\n    this._pluggables = [];\n    logger.debug('Geo Options', this._config);\n  }\n  /**\n   * get the name of the module category\n   * @returns {string} name of the module category\n   */\n  GeoClass.prototype.getModuleName = function () {\n    return GeoClass.MODULE;\n  };\n  /**\n   * add plugin into Geo category\n   * @param {Object} pluggable - an instance of the plugin\n   */\n  GeoClass.prototype.addPluggable = function (pluggable) {\n    if (pluggable && pluggable.getCategory() === 'Geo') {\n      this._pluggables.push(pluggable);\n      var config = pluggable.configure(this._config[pluggable.getProviderName()]);\n      return config;\n    }\n  };\n  /**\n   * Get the plugin object\n   * @param providerName - the name of the plugin\n   */\n  GeoClass.prototype.getPluggable = function (providerName) {\n    var pluggable = this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === providerName;\n    });\n    if (pluggable === undefined) {\n      logger.debug('No plugin found with providerName', providerName);\n      throw new Error('No plugin found in Geo for the provider');\n    } else return pluggable;\n  };\n  /**\n   * Remove the plugin object\n   * @param providerName - the name of the plugin\n   */\n  GeoClass.prototype.removePluggable = function (providerName) {\n    this._pluggables = this._pluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    return;\n  };\n  /**\n   * Configure Geo\n   * @param {Object} config - Configuration object for Geo\n   * @return {Object} - Current configuration\n   */\n  GeoClass.prototype.configure = function (config) {\n    var _this = this;\n    logger.debug('configure Geo');\n    if (!config) return this._config;\n    var amplifyConfig = parseAWSExports(config);\n    this._config = Object.assign({}, this._config, amplifyConfig.Geo, config);\n    this._pluggables.forEach(function (pluggable) {\n      pluggable.configure(_this._config[pluggable.getProviderName()]);\n    });\n    if (this._pluggables.length === 0) {\n      this.addPluggable(new AmazonLocationServiceProvider());\n    }\n    return this._config;\n  };\n  /**\n   * Get the map resources that are currently available through the provider\n   * @param {string} provider\n   * @returns - Array of available map resources\n   */\n  GeoClass.prototype.getAvailableMaps = function (provider) {\n    if (provider === void 0) {\n      provider = DEFAULT_PROVIDER;\n    }\n    var prov = this.getPluggable(provider);\n    return prov.getAvailableMaps();\n  };\n  /**\n   * Get the map resource set as default in amplify config\n   * @param {string} provider\n   * @returns - Map resource set as the default in amplify config\n   */\n  GeoClass.prototype.getDefaultMap = function (provider) {\n    if (provider === void 0) {\n      provider = DEFAULT_PROVIDER;\n    }\n    var prov = this.getPluggable(provider);\n    return prov.getDefaultMap();\n  };\n  /**\n   * Search by text input with optional parameters\n   * @param  {string} text - The text string that is to be searched for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n   */\n  GeoClass.prototype.searchByText = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, providerName, prov, error_1;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;\n            prov = this.getPluggable(providerName);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, prov.searchByText(text, options)];\n          case 2:\n            return [2 /*return*/, _b.sent()];\n          case 3:\n            error_1 = _b.sent();\n            logger.debug(error_1);\n            throw error_1;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Search for search term suggestions based on input text\n   * @param  {string} text - The text string that is to be search for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<SearchForSuggestionsResults>} - Resolves to an array of search suggestion strings\n   */\n  GeoClass.prototype.searchForSuggestions = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, providerName, prov, error_2;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;\n            prov = this.getPluggable(providerName);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, prov.searchForSuggestions(text, options)];\n          case 2:\n            return [2 /*return*/, _b.sent()];\n          case 3:\n            error_2 = _b.sent();\n            logger.debug(error_2);\n            throw error_2;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Search for location by unique ID\n   * @param  {string} placeId - Unique ID of the location that is to be searched for\n   * @param  {searchByPlaceIdOptions} options? - Optional parameters to the search\n   * @returns {Promise<Place>} - Resolves to a place with the given placeId\n   */\n  GeoClass.prototype.searchByPlaceId = function (placeId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var providerName, prov, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            providerName = DEFAULT_PROVIDER;\n            prov = this.getPluggable(providerName);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, prov.searchByPlaceId(placeId, options)];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n          case 3:\n            error_3 = _a.sent();\n            logger.debug(error_3);\n            throw error_3;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Reverse geocoding search via a coordinate point on the map\n   * @param coordinates - Coordinates array for the search input\n   * @param options - Options parameters for the search\n   * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n   */\n  GeoClass.prototype.searchByCoordinates = function (coordinates, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, providerName, prov, _b, lng, lat, error_4;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;\n            prov = this.getPluggable(providerName);\n            _b = __read(coordinates, 2), lng = _b[0], lat = _b[1];\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1, 3,, 4]);\n            validateCoordinates(lng, lat);\n            return [4 /*yield*/, prov.searchByCoordinates(coordinates, options)];\n          case 2:\n            return [2 /*return*/, _c.sent()];\n          case 3:\n            error_4 = _c.sent();\n            logger.debug(error_4);\n            throw error_4;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Create geofences\n   * @param geofences - Single or array of geofence objects to create\n   * @param options? - Optional parameters for creating geofences\n   * @returns {Promise<SaveGeofencesResults>} - Promise that resolves to an object with:\n   *   successes: list of geofences successfully created\n   *   errors: list of geofences that failed to create\n   */\n  GeoClass.prototype.saveGeofences = function (geofences, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, providerName, prov, geofenceInputArray, error_5;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;\n            prov = this.getPluggable(providerName);\n            if (!Array.isArray(geofences)) {\n              geofenceInputArray = [geofences];\n            } else {\n              geofenceInputArray = geofences;\n            }\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, prov.saveGeofences(geofenceInputArray, options)];\n          case 2:\n            return [2 /*return*/, _b.sent()];\n          case 3:\n            error_5 = _b.sent();\n            logger.debug(error_5);\n            throw error_5;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Get a single geofence by geofenceId\n   * @param geofenceId: GeofenceId - The string id of the geofence to get\n   * @param options?: GeofenceOptions - Optional parameters for getting a geofence\n   * @returns Promise<Geofence> - Promise that resolves to a geofence object\n   */\n  GeoClass.prototype.getGeofence = function (geofenceId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, providerName, prov, error_6;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;\n            prov = this.getPluggable(providerName);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, prov.getGeofence(geofenceId, options)];\n          case 2:\n            return [2 /*return*/, _b.sent()];\n          case 3:\n            error_6 = _b.sent();\n            logger.debug(error_6);\n            throw error_6;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * List geofences\n   * @param  options?: ListGeofenceOptions\n   * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n   *   entries: list of geofences - 100 geofences are listed per page\n   *   nextToken: token for next page of geofences\n   */\n  GeoClass.prototype.listGeofences = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, providerName, prov, error_7;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;\n            prov = this.getPluggable(providerName);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, prov.listGeofences(options)];\n          case 2:\n            return [2 /*return*/, _b.sent()];\n          case 3:\n            error_7 = _b.sent();\n            logger.debug(error_7);\n            throw error_7;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Delete geofences\n   * @param geofenceIds: string|string[]\n   * @param options?: GeofenceOptions\n   * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n   *  successes: list of geofences successfully deleted\n   *  errors: list of geofences that failed to delete\n   */\n  GeoClass.prototype.deleteGeofences = function (geofenceIds, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, providerName, prov, geofenceIdsInputArray, error_8;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;\n            prov = this.getPluggable(providerName);\n            if (!Array.isArray(geofenceIds)) {\n              geofenceIdsInputArray = [geofenceIds];\n            } else {\n              geofenceIdsInputArray = geofenceIds;\n            }\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, prov.deleteGeofences(geofenceIdsInputArray, options)];\n          case 2:\n            return [2 /*return*/, _b.sent()];\n          case 3:\n            error_8 = _b.sent();\n            logger.debug(error_8);\n            throw error_8;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  GeoClass.MODULE = 'Geo';\n  return GeoClass;\n}();\nexport { GeoClass };\nexport var Geo = new GeoClass();\nAmplify.register(Geo);","map":{"version":3,"mappings":"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","names":["Amplify","ConsoleLogger","Logger","parseAWSExports","AmazonLocationServiceProvider","validateCoordinates","logger","DEFAULT_PROVIDER","_config","_pluggables","debug","GeoClass","MODULE","pluggable","getCategory","push","config","configure","getProviderName","providerName","find","undefined","Error","filter","amplifyConfig","Object","assign","Geo","forEach","_this","length","addPluggable","provider","prov","getPluggable","getAvailableMaps","getDefaultMap","text","options","_a","searchByText","_b","error_1","searchForSuggestions","error_2","placeId","searchByPlaceId","error_3","coordinates","lng","lat","searchByCoordinates","_c","error_4","geofences","Array","isArray","geofenceInputArray","saveGeofences","error_5","geofenceId","getGeofence","error_6","listGeofences","error_7","geofenceIds","geofenceIdsInputArray","deleteGeofences","error_8","register"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-amplify/geo/src/Geo.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport {\n\tAmplify,\n\tConsoleLogger as Logger,\n\tparseAWSExports,\n} from '@aws-amplify/core';\nimport { AmazonLocationServiceProvider } from './Providers/AmazonLocationServiceProvider';\n\nimport { validateCoordinates } from './util';\n\nimport {\n\tPlace,\n\tGeoConfig,\n\tCoordinates,\n\tSearchByTextOptions,\n\tSearchByCoordinatesOptions,\n\tGeoProvider,\n\tMapStyle,\n\tGeofenceId,\n\tGeofenceInput,\n\tGeofenceOptions,\n\tSaveGeofencesResults,\n\tGeofence,\n\tListGeofenceOptions,\n\tListGeofenceResults,\n\tDeleteGeofencesResults,\n\tsearchByPlaceIdOptions,\n} from './types';\n\nconst logger = new Logger('Geo');\n\nconst DEFAULT_PROVIDER = 'AmazonLocationService';\nexport class GeoClass {\n\tstatic MODULE = 'Geo';\n\t/**\n\t * @private\n\t */\n\tprivate _config: GeoConfig;\n\tprivate _pluggables: GeoProvider[];\n\n\tconstructor() {\n\t\tthis._config = {};\n\t\tthis._pluggables = [];\n\t\tlogger.debug('Geo Options', this._config);\n\t}\n\n\t/**\n\t * get the name of the module category\n\t * @returns {string} name of the module category\n\t */\n\tpublic getModuleName() {\n\t\treturn GeoClass.MODULE;\n\t}\n\n\t/**\n\t * add plugin into Geo category\n\t * @param {Object} pluggable - an instance of the plugin\n\t */\n\tpublic addPluggable(pluggable: GeoProvider) {\n\t\tif (pluggable && pluggable.getCategory() === 'Geo') {\n\t\t\tthis._pluggables.push(pluggable);\n\t\t\tconst config = pluggable.configure(\n\t\t\t\tthis._config[pluggable.getProviderName()]\n\t\t\t);\n\n\t\t\treturn config;\n\t\t}\n\t}\n\n\t/**\n\t * Get the plugin object\n\t * @param providerName - the name of the plugin\n\t */\n\tpublic getPluggable(providerName: string) {\n\t\tconst pluggable = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === providerName\n\t\t);\n\t\tif (pluggable === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', providerName);\n\t\t\tthrow new Error('No plugin found in Geo for the provider');\n\t\t} else return pluggable;\n\t}\n\n\t/**\n\t * Remove the plugin object\n\t * @param providerName - the name of the plugin\n\t */\n\tpublic removePluggable(providerName: string) {\n\t\tthis._pluggables = this._pluggables.filter(\n\t\t\tpluggable => pluggable.getProviderName() !== providerName\n\t\t);\n\t\treturn;\n\t}\n\n\t/**\n\t * Configure Geo\n\t * @param {Object} config - Configuration object for Geo\n\t * @return {Object} - Current configuration\n\t */\n\tconfigure(config?) {\n\t\tlogger.debug('configure Geo');\n\n\t\tif (!config) return this._config;\n\n\t\tconst amplifyConfig = parseAWSExports(config);\n\t\tthis._config = Object.assign({}, this._config, amplifyConfig.Geo, config);\n\n\t\tthis._pluggables.forEach(pluggable => {\n\t\t\tpluggable.configure(this._config[pluggable.getProviderName()]);\n\t\t});\n\n\t\tif (this._pluggables.length === 0) {\n\t\t\tthis.addPluggable(new AmazonLocationServiceProvider());\n\t\t}\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * Get the map resources that are currently available through the provider\n\t * @param {string} provider\n\t * @returns - Array of available map resources\n\t */\n\tpublic getAvailableMaps(provider = DEFAULT_PROVIDER): MapStyle[] {\n\t\tconst prov = this.getPluggable(provider);\n\n\t\treturn prov.getAvailableMaps();\n\t}\n\n\t/**\n\t * Get the map resource set as default in amplify config\n\t * @param {string} provider\n\t * @returns - Map resource set as the default in amplify config\n\t */\n\tpublic getDefaultMap(provider = DEFAULT_PROVIDER): MapStyle {\n\t\tconst prov = this.getPluggable(provider);\n\n\t\treturn prov.getDefaultMap();\n\t}\n\n\t/**\n\t * Search by text input with optional parameters\n\t * @param  {string} text - The text string that is to be searched for\n\t * @param  {SearchByTextOptions} options? - Optional parameters to the search\n\t * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n\t */\n\tpublic async searchByText(\n\t\ttext: string,\n\t\toptions?: SearchByTextOptions\n\t): Promise<Place[]> {\n\t\tconst { providerName = DEFAULT_PROVIDER } = options || {};\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\ttry {\n\t\t\treturn await prov.searchByText(text, options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Search for search term suggestions based on input text\n\t * @param  {string} text - The text string that is to be search for\n\t * @param  {SearchByTextOptions} options? - Optional parameters to the search\n\t * @returns {Promise<SearchForSuggestionsResults>} - Resolves to an array of search suggestion strings\n\t */\n\tpublic async searchForSuggestions(\n\t\ttext: string,\n\t\toptions?: SearchByTextOptions\n\t) {\n\t\tconst { providerName = DEFAULT_PROVIDER } = options || {};\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\ttry {\n\t\t\treturn await prov.searchForSuggestions(text, options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Search for location by unique ID\n\t * @param  {string} placeId - Unique ID of the location that is to be searched for\n\t * @param  {searchByPlaceIdOptions} options? - Optional parameters to the search\n\t * @returns {Promise<Place>} - Resolves to a place with the given placeId\n\t */\n\tpublic async searchByPlaceId(\n\t\tplaceId: string,\n\t\toptions?: searchByPlaceIdOptions\n\t) {\n\t\tconst providerName = DEFAULT_PROVIDER;\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\ttry {\n\t\t\treturn await prov.searchByPlaceId(placeId, options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Reverse geocoding search via a coordinate point on the map\n\t * @param coordinates - Coordinates array for the search input\n\t * @param options - Options parameters for the search\n\t * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n\t */\n\tpublic async searchByCoordinates(\n\t\tcoordinates: Coordinates,\n\t\toptions?: SearchByCoordinatesOptions\n\t): Promise<Place> {\n\t\tconst { providerName = DEFAULT_PROVIDER } = options || {};\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\tconst [lng, lat] = coordinates;\n\t\ttry {\n\t\t\tvalidateCoordinates(lng, lat);\n\t\t\treturn await prov.searchByCoordinates(coordinates, options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Create geofences\n\t * @param geofences - Single or array of geofence objects to create\n\t * @param options? - Optional parameters for creating geofences\n\t * @returns {Promise<SaveGeofencesResults>} - Promise that resolves to an object with:\n\t *   successes: list of geofences successfully created\n\t *   errors: list of geofences that failed to create\n\t */\n\tpublic async saveGeofences(\n\t\tgeofences: GeofenceInput | GeofenceInput[],\n\t\toptions?: GeofenceOptions\n\t): Promise<SaveGeofencesResults> {\n\t\tconst { providerName = DEFAULT_PROVIDER } = options || {};\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\t// If single geofence input, make it an array for batch call\n\t\tlet geofenceInputArray;\n\t\tif (!Array.isArray(geofences)) {\n\t\t\tgeofenceInputArray = [geofences];\n\t\t} else {\n\t\t\tgeofenceInputArray = geofences;\n\t\t}\n\n\t\ttry {\n\t\t\treturn await prov.saveGeofences(geofenceInputArray, options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Get a single geofence by geofenceId\n\t * @param geofenceId: GeofenceId - The string id of the geofence to get\n\t * @param options?: GeofenceOptions - Optional parameters for getting a geofence\n\t * @returns Promise<Geofence> - Promise that resolves to a geofence object\n\t */\n\tpublic async getGeofence(\n\t\tgeofenceId: GeofenceId,\n\t\toptions?: GeofenceOptions\n\t): Promise<Geofence> {\n\t\tconst { providerName = DEFAULT_PROVIDER } = options || {};\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\ttry {\n\t\t\treturn await prov.getGeofence(geofenceId, options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * List geofences\n\t * @param  options?: ListGeofenceOptions\n\t * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n\t *   entries: list of geofences - 100 geofences are listed per page\n\t *   nextToken: token for next page of geofences\n\t */\n\tpublic async listGeofences(\n\t\toptions?: ListGeofenceOptions\n\t): Promise<ListGeofenceResults> {\n\t\tconst { providerName = DEFAULT_PROVIDER } = options || {};\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\ttry {\n\t\t\treturn await prov.listGeofences(options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Delete geofences\n\t * @param geofenceIds: string|string[]\n\t * @param options?: GeofenceOptions\n\t * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n\t *  successes: list of geofences successfully deleted\n\t *  errors: list of geofences that failed to delete\n\t */\n\tpublic async deleteGeofences(\n\t\tgeofenceIds: string | string[],\n\t\toptions?: GeofenceOptions\n\t): Promise<DeleteGeofencesResults> {\n\t\tconst { providerName = DEFAULT_PROVIDER } = options || {};\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\t// If single geofence input, make it an array for batch call\n\t\tlet geofenceIdsInputArray;\n\t\tif (!Array.isArray(geofenceIds)) {\n\t\t\tgeofenceIdsInputArray = [geofenceIds];\n\t\t} else {\n\t\t\tgeofenceIdsInputArray = geofenceIds;\n\t\t}\n\n\t\t//  Delete geofences\n\t\ttry {\n\t\t\treturn await prov.deleteGeofences(geofenceIdsInputArray, options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\nexport const Geo = new GeoClass();\nAmplify.register(Geo);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}