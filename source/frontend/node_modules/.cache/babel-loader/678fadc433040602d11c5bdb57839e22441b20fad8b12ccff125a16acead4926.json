{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spread } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport camelcaseKeys from 'camelcase-keys';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgentObject } from '@aws-amplify/core';\nimport { LocationClient, SearchPlaceIndexForTextCommand, SearchPlaceIndexForSuggestionsCommand, SearchPlaceIndexForPositionCommand, BatchPutGeofenceCommand, GetPlaceCommand, GetGeofenceCommand, ListGeofencesCommand, BatchDeleteGeofenceCommand } from '@aws-sdk/client-location';\nimport { mapSearchOptions, validateGeofenceId, validateGeofencesInput } from '../util';\nvar logger = new Logger('AmazonLocationServiceProvider');\nvar AmazonLocationServiceProvider = /** @class */function () {\n  /**\n   * Initialize Geo with AWS configurations\n   * @param {Object} config - Configuration object for Geo\n   */\n  function AmazonLocationServiceProvider(config) {\n    this._config = config ? config : {};\n    logger.debug('Geo Options', this._config);\n  }\n  /**\n   * get the category of the plugin\n   * @returns {string} name of the category\n   */\n  AmazonLocationServiceProvider.prototype.getCategory = function () {\n    return AmazonLocationServiceProvider.CATEGORY;\n  };\n  /**\n   * get provider name of the plugin\n   * @returns {string} name of the provider\n   */\n  AmazonLocationServiceProvider.prototype.getProviderName = function () {\n    return AmazonLocationServiceProvider.PROVIDER_NAME;\n  };\n  /**\n   * Configure Geo part with aws configuration\n   * @param {Object} config - Configuration of the Geo\n   * @return {Object} - Current configuration\n   */\n  AmazonLocationServiceProvider.prototype.configure = function (config) {\n    logger.debug('configure Amazon Location Service Provider', config);\n    if (!config) return this._config;\n    this._config = Object.assign({}, this._config, config);\n    return this._config;\n  };\n  /**\n   * Get the map resources that are currently available through the provider\n   * @returns {AmazonLocationServiceMapStyle[]}- Array of available map resources\n   */\n  AmazonLocationServiceProvider.prototype.getAvailableMaps = function () {\n    this._verifyMapResources();\n    var mapStyles = [];\n    var availableMaps = this._config.maps.items;\n    var region = this._config.region;\n    for (var mapName in availableMaps) {\n      var style = availableMaps[mapName].style;\n      mapStyles.push({\n        mapName: mapName,\n        style: style,\n        region: region\n      });\n    }\n    return mapStyles;\n  };\n  /**\n   * Get the map resource set as default in amplify config\n   * @returns {AmazonLocationServiceMapStyle} - Map resource set as the default in amplify config\n   */\n  AmazonLocationServiceProvider.prototype.getDefaultMap = function () {\n    this._verifyMapResources();\n    var mapName = this._config.maps.default;\n    var style = this._config.maps.items[mapName].style;\n    var region = this._config.region;\n    return {\n      mapName: mapName,\n      style: style,\n      region: region\n    };\n  };\n  /**\n   * Search by text input with optional parameters\n   * @param  {string} text - The text string that is to be searched for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n   */\n  AmazonLocationServiceProvider.prototype.searchByText = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_1, PascalResults, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n            locationServiceInput = {\n              Text: text,\n              IndexName: this._config.search_indices.default\n            };\n            /**\n             * Map search options to Amazon Location Service input object\n             */\n            if (options) {\n              locationServiceInput = __assign(__assign({}, locationServiceInput), mapSearchOptions(options, locationServiceInput));\n            }\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            command = new SearchPlaceIndexForTextCommand(locationServiceInput);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, client.send(command)];\n          case 3:\n            response = _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            error_1 = _a.sent();\n            logger.debug(error_1);\n            throw error_1;\n          case 5:\n            PascalResults = response.Results.map(function (result) {\n              return result.Place;\n            });\n            results = camelcaseKeys(PascalResults, {\n              deep: true\n            });\n            return [2 /*return*/, results];\n        }\n      });\n    });\n  };\n  /**\n   * Search for suggestions based on the input text\n   * @param  {string} text - The text string that is to be searched for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<SearchForSuggestionsResults>} - Resolves to an array of search suggestion strings\n   */\n  AmazonLocationServiceProvider.prototype.searchForSuggestions = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_2, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n            locationServiceInput = {\n              Text: text,\n              IndexName: this._config.search_indices.default\n            };\n            /**\n             * Map search options to Amazon Location Service input object\n             */\n            if (options) {\n              locationServiceInput = __assign(__assign({}, locationServiceInput), mapSearchOptions(options, locationServiceInput));\n            }\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            command = new SearchPlaceIndexForSuggestionsCommand(locationServiceInput);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, client.send(command)];\n          case 3:\n            response = _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            error_2 = _a.sent();\n            logger.debug(error_2);\n            throw error_2;\n          case 5:\n            results = response.Results.map(function (result) {\n              return {\n                text: result.Text,\n                placeId: result.PlaceId\n              };\n            });\n            return [2 /*return*/, results];\n        }\n      });\n    });\n  };\n  AmazonLocationServiceProvider.prototype._verifyPlaceId = function (placeId) {\n    if (placeId.length === 0) {\n      var errorString = 'PlaceId cannot be an empty string.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n  AmazonLocationServiceProvider.prototype.searchByPlaceId = function (placeId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, searchByPlaceIdInput, command, response, error_3, place;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n            this._verifyPlaceId(placeId);\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            searchByPlaceIdInput = {\n              PlaceId: placeId,\n              IndexName: (options === null || options === void 0 ? void 0 : options.searchIndexName) || this._config.search_indices.default\n            };\n            command = new GetPlaceCommand(searchByPlaceIdInput);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, client.send(command)];\n          case 3:\n            response = _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            error_3 = _a.sent();\n            logger.debug(error_3);\n            throw error_3;\n          case 5:\n            place = response.Place;\n            if (place) {\n              return [2 /*return*/, camelcaseKeys(place, {\n                deep: true\n              })];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Reverse geocoding search via a coordinate point on the map\n   * @param coordinates - Coordinates array for the search input\n   * @param options - Options parameters for the search\n   * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n   */\n  AmazonLocationServiceProvider.prototype.searchByCoordinates = function (coordinates, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_4, PascalResults, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n            locationServiceInput = {\n              Position: coordinates,\n              IndexName: this._config.search_indices.default\n            };\n            if (options) {\n              if (options.searchIndexName) {\n                locationServiceInput.IndexName = options.searchIndexName;\n              }\n              locationServiceInput.MaxResults = options.maxResults;\n            }\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            command = new SearchPlaceIndexForPositionCommand(locationServiceInput);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, client.send(command)];\n          case 3:\n            response = _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            error_4 = _a.sent();\n            logger.debug(error_4);\n            throw error_4;\n          case 5:\n            PascalResults = response.Results.map(function (result) {\n              return result.Place;\n            });\n            results = camelcaseKeys(PascalResults[0], {\n              deep: true\n            });\n            return [2 /*return*/, results];\n        }\n      });\n    });\n  };\n  /**\n   * Create geofences inside of a geofence collection\n   * @param geofences - Array of geofence objects to create\n   * @param options? - Optional parameters for creating geofences\n   * @returns {Promise<AmazonLocationServiceSaveGeofencesResults>} - Promise that resolves to an object with:\n   *   successes: list of geofences successfully created\n   *   errors: list of geofences that failed to create\n   */\n  AmazonLocationServiceProvider.prototype.saveGeofences = function (geofences, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, PascalGeofences, results, geofenceBatches, apiLimit;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (geofences.length < 1) {\n              throw new Error('Geofence input array is empty');\n            }\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            // Verify geofence collection exists in aws-config.js\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n            validateGeofencesInput(geofences);\n            PascalGeofences = geofences.map(function (_a) {\n              var geofenceId = _a.geofenceId,\n                polygon = _a.geometry.polygon;\n              return {\n                GeofenceId: geofenceId,\n                Geometry: {\n                  Polygon: polygon\n                }\n              };\n            });\n            results = {\n              successes: [],\n              errors: []\n            };\n            geofenceBatches = [];\n            while (PascalGeofences.length > 0) {\n              apiLimit = 10;\n              geofenceBatches.push(PascalGeofences.splice(0, apiLimit));\n            }\n            return [4 /*yield*/, Promise.all(geofenceBatches.map(function (batch) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_5;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      _a.trys.push([0, 2,, 3]);\n                      return [4 /*yield*/, this._AmazonLocationServiceBatchPutGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n                    case 1:\n                      response = _a.sent();\n                      return [3 /*break*/, 3];\n                    case 2:\n                      error_5 = _a.sent();\n                      // If the API call fails, add the geofences to the errors array and move to next batch\n                      batch.forEach(function (geofence) {\n                        results.errors.push({\n                          geofenceId: geofence.GeofenceId,\n                          error: {\n                            code: 'APIConnectionError',\n                            message: error_5.message\n                          }\n                        });\n                      });\n                      return [2 /*return*/];\n                    case 3:\n                      // Push all successes to results\n                      response.Successes.forEach(function (success) {\n                        var GeofenceId = success.GeofenceId,\n                          CreateTime = success.CreateTime,\n                          UpdateTime = success.UpdateTime;\n                        results.successes.push({\n                          geofenceId: GeofenceId,\n                          createTime: CreateTime,\n                          updateTime: UpdateTime\n                        });\n                      });\n                      // Push all errors to results\n                      response.Errors.forEach(function (error) {\n                        var _a = error.Error,\n                          Code = _a.Code,\n                          Message = _a.Message,\n                          GeofenceId = error.GeofenceId;\n                        results.errors.push({\n                          error: {\n                            code: Code,\n                            message: Message\n                          },\n                          geofenceId: GeofenceId\n                        });\n                      });\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            }))];\n\n          case 2:\n            _a.sent();\n            return [2 /*return*/, results];\n        }\n      });\n    });\n  };\n  /**\n   * Get geofence from a geofence collection\n   * @param geofenceId:string\n   * @param options?: Optional parameters for getGeofence\n   * @returns {Promise<AmazonLocationServiceGeofence>} - Promise that resolves to a geofence object\n   */\n  AmazonLocationServiceProvider.prototype.getGeofence = function (geofenceId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, commandInput, command, response, error_6, GeofenceId, CreateTime, UpdateTime, Status, Geometry, geofence;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            // Verify geofence collection exists in aws-config.js\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n            validateGeofenceId(geofenceId);\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            commandInput = {\n              GeofenceId: geofenceId,\n              CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default\n            };\n            command = new GetGeofenceCommand(commandInput);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, client.send(command)];\n          case 3:\n            response = _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            error_6 = _a.sent();\n            logger.debug(error_6);\n            throw error_6;\n          case 5:\n            GeofenceId = response.GeofenceId, CreateTime = response.CreateTime, UpdateTime = response.UpdateTime, Status = response.Status, Geometry = response.Geometry;\n            geofence = {\n              createTime: CreateTime,\n              geofenceId: GeofenceId,\n              geometry: {\n                polygon: Geometry.Polygon\n              },\n              status: Status,\n              updateTime: UpdateTime\n            };\n            return [2 /*return*/, geofence];\n        }\n      });\n    });\n  };\n  /**\n   * List geofences from a geofence collection\n   * @param  options?: ListGeofenceOptions\n   * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n   *   entries: list of geofences - 100 geofences are listed per page\n   *   nextToken: token for next page of geofences\n   */\n  AmazonLocationServiceProvider.prototype.listGeofences = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, listGeofencesInput, command, response, error_7, NextToken, Entries, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            // Verify geofence collection exists in aws-config.js\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            listGeofencesInput = {\n              NextToken: options === null || options === void 0 ? void 0 : options.nextToken,\n              CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default\n            };\n            command = new ListGeofencesCommand(listGeofencesInput);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, client.send(command)];\n          case 3:\n            response = _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            error_7 = _a.sent();\n            logger.debug(error_7);\n            throw error_7;\n          case 5:\n            NextToken = response.NextToken, Entries = response.Entries;\n            results = {\n              entries: Entries.map(function (_a) {\n                var GeofenceId = _a.GeofenceId,\n                  CreateTime = _a.CreateTime,\n                  UpdateTime = _a.UpdateTime,\n                  Status = _a.Status,\n                  Polygon = _a.Geometry.Polygon;\n                return {\n                  geofenceId: GeofenceId,\n                  createTime: CreateTime,\n                  updateTime: UpdateTime,\n                  status: Status,\n                  geometry: {\n                    polygon: Polygon\n                  }\n                };\n              }),\n              nextToken: NextToken\n            };\n            return [2 /*return*/, results];\n        }\n      });\n    });\n  };\n  /**\n   * Delete geofences from a geofence collection\n   * @param geofenceIds: string|string[]\n   * @param options?: GeofenceOptions\n   * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n   *  successes: list of geofences successfully deleted\n   *  errors: list of geofences that failed to delete\n   */\n  AmazonLocationServiceProvider.prototype.deleteGeofences = function (geofenceIds, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, badGeofenceIds, results, geofenceIdBatches, count;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (geofenceIds.length < 1) {\n              throw new Error('GeofenceId input array is empty');\n            }\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            badGeofenceIds = geofenceIds.filter(function (geofenceId) {\n              try {\n                validateGeofenceId(geofenceId);\n              } catch (error) {\n                return true;\n              }\n            });\n            if (badGeofenceIds.length > 0) {\n              throw new Error(\"Invalid geofence ids: \" + badGeofenceIds.join(', '));\n            }\n            results = {\n              successes: [],\n              errors: []\n            };\n            geofenceIdBatches = [];\n            count = 0;\n            while (count < geofenceIds.length) {\n              geofenceIdBatches.push(geofenceIds.slice(count, count += 10));\n            }\n            return [4 /*yield*/, Promise.all(geofenceIdBatches.map(function (batch) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_8, badGeofenceIds;\n                var _a;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      _b.trys.push([0, 2,, 3]);\n                      return [4 /*yield*/, this._AmazonLocationServiceBatchDeleteGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n                    case 1:\n                      response = _b.sent();\n                      return [3 /*break*/, 3];\n                    case 2:\n                      error_8 = _b.sent();\n                      // If the API call fails, add the geofences to the errors array and move to next batch\n                      batch.forEach(function (geofenceId) {\n                        var errorObject = {\n                          geofenceId: geofenceId,\n                          error: {\n                            code: error_8.message,\n                            message: error_8.message\n                          }\n                        };\n                        results.errors.push(errorObject);\n                      });\n                      return [2 /*return*/];\n                    case 3:\n                      badGeofenceIds = response.Errors.map(function (_a) {\n                        var geofenceId = _a.geofenceId;\n                        return geofenceId;\n                      });\n                      (_a = results.successes).push.apply(_a, __spread(batch.filter(function (Id) {\n                        return !badGeofenceIds.includes(Id);\n                      })));\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            }))];\n\n          case 2:\n            _a.sent();\n            return [2 /*return*/, results];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n  AmazonLocationServiceProvider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, cred, error_9;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2 /*return*/, false];\n            cred = Credentials.shear(credentials);\n            logger.debug('Set credentials for storage. Credentials are:', cred);\n            this._config.credentials = cred;\n            return [2 /*return*/, true];\n          case 2:\n            error_9 = _a.sent();\n            logger.debug('Ensure credentials error. Credentials are:', error_9);\n            return [2 /*return*/, false];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.prototype._verifyMapResources = function () {\n    if (!this._config.maps) {\n      var errorString = \"No map resources found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n    if (!this._config.maps.default) {\n      var errorString = \"No default map resource found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n  AmazonLocationServiceProvider.prototype._verifySearchIndex = function (optionalSearchIndex) {\n    if ((!this._config.search_indices || !this._config.search_indices.default) && !optionalSearchIndex) {\n      var errorString = 'No Search Index found in amplify config, please run `amplify add geo` to create one and run `amplify push` after.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n  AmazonLocationServiceProvider.prototype._verifyGeofenceCollections = function (optionalGeofenceCollectionName) {\n    if ((!this._config.geofenceCollections || !this._config.geofenceCollections.default) && !optionalGeofenceCollectionName) {\n      var errorString = 'No Geofence Collections found, please run `amplify add geo` to create one and run `amplify push` after.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n  AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchPutGeofenceCall = function (PascalGeofences, collectionName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var geofenceInput, client, command, response, error_10;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            geofenceInput = {\n              Entries: PascalGeofences,\n              CollectionName: collectionName || this._config.geofenceCollections.default\n            };\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            command = new BatchPutGeofenceCommand(geofenceInput);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, client.send(command)];\n          case 2:\n            response = _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            error_10 = _a.sent();\n            throw error_10;\n          case 4:\n            return [2 /*return*/, response];\n        }\n      });\n    });\n  };\n  AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchDeleteGeofenceCall = function (geofenceIds, collectionName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteGeofencesInput, client, command, response, error_11;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            deleteGeofencesInput = {\n              GeofenceIds: geofenceIds,\n              CollectionName: collectionName || this._config.geofenceCollections.default\n            };\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            command = new BatchDeleteGeofenceCommand(deleteGeofencesInput);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, client.send(command)];\n          case 2:\n            response = _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            error_11 = _a.sent();\n            throw error_11;\n          case 4:\n            return [2 /*return*/, response];\n        }\n      });\n    });\n  };\n  AmazonLocationServiceProvider.CATEGORY = 'Geo';\n  AmazonLocationServiceProvider.PROVIDER_NAME = 'AmazonLocationService';\n  return AmazonLocationServiceProvider;\n}();\nexport { AmazonLocationServiceProvider };","map":{"version":3,"mappings":"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","names":["camelcaseKeys","ConsoleLogger","Logger","Credentials","getAmplifyUserAgentObject","LocationClient","SearchPlaceIndexForTextCommand","SearchPlaceIndexForSuggestionsCommand","SearchPlaceIndexForPositionCommand","BatchPutGeofenceCommand","GetPlaceCommand","GetGeofenceCommand","ListGeofencesCommand","BatchDeleteGeofenceCommand","mapSearchOptions","validateGeofenceId","validateGeofencesInput","logger","config","_config","debug","AmazonLocationServiceProvider","CATEGORY","PROVIDER_NAME","Object","assign","_verifyMapResources","mapStyles","availableMaps","maps","items","region","mapName","style","push","default","text","options","_ensureCredentials","credentialsOK","_a","Error","_verifySearchIndex","searchIndexName","locationServiceInput","Text","IndexName","search_indices","client","credentials","customUserAgent","command","send","response","error_1","PascalResults","Results","map","Place","results","deep","error_2","result","placeId","PlaceId","length","errorString","_verifyPlaceId","searchByPlaceIdInput","error_3","place","coordinates","Position","MaxResults","maxResults","error_4","geofences","_verifyGeofenceCollections","collectionName","error","PascalGeofences","geofenceId","polygon","GeofenceId","Geometry","Polygon","successes","errors","geofenceBatches","apiLimit","splice","Promise","all","batch","_AmazonLocationServiceBatchPutGeofenceCall","geofenceCollections","forEach","geofence","code","message","error_5","Successes","CreateTime","UpdateTime","createTime","updateTime","Errors","Code","Message","commandInput","CollectionName","error_6","Status","geometry","status","listGeofencesInput","NextToken","nextToken","error_7","Entries","entries","geofenceIds","badGeofenceIds","filter","join","geofenceIdBatches","count","slice","_AmazonLocationServiceBatchDeleteGeofenceCall","_b","errorObject","error_8","includes","Id","get","cred","shear","error_9","optionalSearchIndex","optionalGeofenceCollectionName","geofenceInput","error_10","deleteGeofencesInput","GeofenceIds","error_11"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-amplify/geo/src/Providers/AmazonLocationServiceProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport camelcaseKeys from 'camelcase-keys';\n\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tgetAmplifyUserAgentObject,\n} from '@aws-amplify/core';\nimport {\n\tPlace as PlaceResult,\n\tLocationClient,\n\tSearchPlaceIndexForTextCommand,\n\tSearchPlaceIndexForTextCommandInput,\n\tSearchPlaceIndexForSuggestionsCommand,\n\tSearchPlaceIndexForSuggestionsCommandInput,\n\tSearchPlaceIndexForPositionCommand,\n\tSearchPlaceIndexForPositionCommandInput,\n\tBatchPutGeofenceCommand,\n\tBatchPutGeofenceCommandInput,\n\tBatchPutGeofenceRequestEntry,\n\tBatchPutGeofenceCommandOutput,\n\tGetPlaceCommand,\n\tGetPlaceCommandInput,\n\tGetPlaceCommandOutput,\n\tGetGeofenceCommand,\n\tGetGeofenceCommandInput,\n\tGetGeofenceCommandOutput,\n\tListGeofencesCommand,\n\tListGeofencesCommandInput,\n\tListGeofencesCommandOutput,\n\tBatchDeleteGeofenceCommand,\n\tBatchDeleteGeofenceCommandInput,\n\tBatchDeleteGeofenceCommandOutput,\n} from '@aws-sdk/client-location';\n\nimport {\n\tmapSearchOptions,\n\tvalidateGeofenceId,\n\tvalidateGeofencesInput,\n} from '../util';\n\nimport {\n\tGeoConfig,\n\tSearchByTextOptions,\n\tSearchByCoordinatesOptions,\n\tGeoProvider,\n\tPlace,\n\tAmazonLocationServiceMapStyle,\n\tCoordinates,\n\tSearchForSuggestionsResults,\n\tGeofenceId,\n\tGeofenceInput,\n\tAmazonLocationServiceGeofenceOptions,\n\tAmazonLocationServiceListGeofenceOptions,\n\tListGeofenceResults,\n\tAmazonLocationServiceGeofenceStatus,\n\tSaveGeofencesResults,\n\tAmazonLocationServiceGeofence,\n\tGeofencePolygon,\n\tAmazonLocationServiceDeleteGeofencesResults,\n\tsearchByPlaceIdOptions,\n} from '../types';\n\nconst logger = new Logger('AmazonLocationServiceProvider');\n\nexport class AmazonLocationServiceProvider implements GeoProvider {\n\tstatic CATEGORY = 'Geo';\n\tstatic PROVIDER_NAME = 'AmazonLocationService';\n\n\t/**\n\t * @private\n\t */\n\tprivate _config;\n\n\t/**\n\t * Initialize Geo with AWS configurations\n\t * @param {Object} config - Configuration object for Geo\n\t */\n\tconstructor(config?: GeoConfig) {\n\t\tthis._config = config ? config : {};\n\t\tlogger.debug('Geo Options', this._config);\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t * @returns {string} name of the category\n\t */\n\tpublic getCategory(): string {\n\t\treturn AmazonLocationServiceProvider.CATEGORY;\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t * @returns {string} name of the provider\n\t */\n\tpublic getProviderName(): string {\n\t\treturn AmazonLocationServiceProvider.PROVIDER_NAME;\n\t}\n\n\t/**\n\t * Configure Geo part with aws configuration\n\t * @param {Object} config - Configuration of the Geo\n\t * @return {Object} - Current configuration\n\t */\n\tpublic configure(config?): object {\n\t\tlogger.debug('configure Amazon Location Service Provider', config);\n\t\tif (!config) return this._config;\n\t\tthis._config = Object.assign({}, this._config, config);\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * Get the map resources that are currently available through the provider\n\t * @returns {AmazonLocationServiceMapStyle[]}- Array of available map resources\n\t */\n\tpublic getAvailableMaps(): AmazonLocationServiceMapStyle[] {\n\t\tthis._verifyMapResources();\n\n\t\tconst mapStyles: AmazonLocationServiceMapStyle[] = [];\n\t\tconst availableMaps = this._config.maps.items;\n\t\tconst region = this._config.region;\n\n\t\tfor (const mapName in availableMaps) {\n\t\t\tconst style = availableMaps[mapName].style;\n\t\t\tmapStyles.push({ mapName, style, region });\n\t\t}\n\n\t\treturn mapStyles;\n\t}\n\n\t/**\n\t * Get the map resource set as default in amplify config\n\t * @returns {AmazonLocationServiceMapStyle} - Map resource set as the default in amplify config\n\t */\n\tpublic getDefaultMap(): AmazonLocationServiceMapStyle {\n\t\tthis._verifyMapResources();\n\n\t\tconst mapName = this._config.maps.default;\n\t\tconst style = this._config.maps.items[mapName].style;\n\t\tconst region = this._config.region;\n\n\t\treturn { mapName, style, region };\n\t}\n\n\t/**\n\t * Search by text input with optional parameters\n\t * @param  {string} text - The text string that is to be searched for\n\t * @param  {SearchByTextOptions} options? - Optional parameters to the search\n\t * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n\t */\n\tpublic async searchByText(\n\t\ttext: string,\n\t\toptions?: SearchByTextOptions\n\t): Promise<Place[]> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\tthis._verifySearchIndex(options?.searchIndexName);\n\n\t\t/**\n\t\t * Setup the searchInput\n\t\t */\n\t\tlet locationServiceInput: SearchPlaceIndexForTextCommandInput = {\n\t\t\tText: text,\n\t\t\tIndexName: this._config.search_indices.default,\n\t\t};\n\n\t\t/**\n\t\t * Map search options to Amazon Location Service input object\n\t\t */\n\t\tif (options) {\n\t\t\tlocationServiceInput = {\n\t\t\t\t...locationServiceInput,\n\t\t\t\t...mapSearchOptions(options, locationServiceInput),\n\t\t\t};\n\t\t}\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgentObject(),\n\t\t});\n\t\tconst command = new SearchPlaceIndexForTextCommand(locationServiceInput);\n\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t/**\n\t\t * The response from Amazon Location Service is a \"Results\" array of objects with a single `Place` item,\n\t\t * which are Place objects in PascalCase.\n\t\t * Here we want to flatten that to an array of results and change them to camelCase\n\t\t */\n\t\tconst PascalResults: PlaceResult[] = response.Results.map(\n\t\t\tresult => result.Place\n\t\t);\n\t\tconst results: Place[] = camelcaseKeys(PascalResults, {\n\t\t\tdeep: true,\n\t\t}) as undefined as Place[];\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Search for suggestions based on the input text\n\t * @param  {string} text - The text string that is to be searched for\n\t * @param  {SearchByTextOptions} options? - Optional parameters to the search\n\t * @returns {Promise<SearchForSuggestionsResults>} - Resolves to an array of search suggestion strings\n\t */\n\n\tpublic async searchForSuggestions(\n\t\ttext: string,\n\t\toptions?: SearchByTextOptions\n\t): Promise<SearchForSuggestionsResults> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\tthis._verifySearchIndex(options?.searchIndexName);\n\n\t\t/**\n\t\t * Setup the searchInput\n\t\t */\n\t\tlet locationServiceInput: SearchPlaceIndexForSuggestionsCommandInput = {\n\t\t\tText: text,\n\t\t\tIndexName: this._config.search_indices.default,\n\t\t};\n\n\t\t/**\n\t\t * Map search options to Amazon Location Service input object\n\t\t */\n\t\tif (options) {\n\t\t\tlocationServiceInput = {\n\t\t\t\t...locationServiceInput,\n\t\t\t\t...mapSearchOptions(options, locationServiceInput),\n\t\t\t};\n\t\t}\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgentObject(),\n\t\t});\n\t\tconst command = new SearchPlaceIndexForSuggestionsCommand(\n\t\t\tlocationServiceInput\n\t\t);\n\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t/**\n\t\t * The response from Amazon Location Service is a \"Results\" array of objects with `Text` and `PlaceId`.\n\t\t */\n\t\tconst results = response.Results.map(result => ({\n\t\t\ttext: result.Text,\n\t\t\tplaceId: result.PlaceId,\n\t\t}));\n\n\t\treturn results;\n\t}\n\n\tprivate _verifyPlaceId(placeId: string) {\n\t\tif (placeId.length === 0) {\n\t\t\tconst errorString = 'PlaceId cannot be an empty string.';\n\t\t\tlogger.debug(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t}\n\n\tpublic async searchByPlaceId(\n\t\tplaceId: string,\n\t\toptions?: searchByPlaceIdOptions\n\t): Promise<Place | undefined> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\tthis._verifySearchIndex(options?.searchIndexName);\n\t\tthis._verifyPlaceId(placeId);\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgentObject(),\n\t\t});\n\n\t\tconst searchByPlaceIdInput: GetPlaceCommandInput = {\n\t\t\tPlaceId: placeId,\n\t\t\tIndexName:\n\t\t\t\toptions?.searchIndexName || this._config.search_indices.default,\n\t\t};\n\t\tconst command = new GetPlaceCommand(searchByPlaceIdInput);\n\n\t\tlet response: GetPlaceCommandOutput;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\tconst place: PlaceResult | undefined = response.Place;\n\n\t\tif (place) {\n\t\t\treturn camelcaseKeys(place, { deep: true }) as unknown as Place;\n\t\t}\n\t\treturn;\n\t}\n\n\t/**\n\t * Reverse geocoding search via a coordinate point on the map\n\t * @param coordinates - Coordinates array for the search input\n\t * @param options - Options parameters for the search\n\t * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n\t */\n\tpublic async searchByCoordinates(\n\t\tcoordinates: Coordinates,\n\t\toptions?: SearchByCoordinatesOptions\n\t): Promise<Place> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\tthis._verifySearchIndex(options?.searchIndexName);\n\n\t\tconst locationServiceInput: SearchPlaceIndexForPositionCommandInput = {\n\t\t\tPosition: coordinates,\n\t\t\tIndexName: this._config.search_indices.default,\n\t\t};\n\n\t\tif (options) {\n\t\t\tif (options.searchIndexName) {\n\t\t\t\tlocationServiceInput.IndexName = options.searchIndexName;\n\t\t\t}\n\t\t\tlocationServiceInput.MaxResults = options.maxResults;\n\t\t}\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgentObject(),\n\t\t});\n\t\tconst command = new SearchPlaceIndexForPositionCommand(\n\t\t\tlocationServiceInput\n\t\t);\n\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t/**\n\t\t * The response from Amazon Location Service is a \"Results\" array with a single `Place` object\n\t\t * which are Place objects in PascalCase.\n\t\t * Here we want to flatten that to an array of results and change them to camelCase\n\t\t */\n\t\tconst PascalResults = response.Results.map(result => result.Place);\n\t\tconst results: Place = camelcaseKeys(PascalResults[0], {\n\t\t\tdeep: true,\n\t\t}) as any as Place;\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Create geofences inside of a geofence collection\n\t * @param geofences - Array of geofence objects to create\n\t * @param options? - Optional parameters for creating geofences\n\t * @returns {Promise<AmazonLocationServiceSaveGeofencesResults>} - Promise that resolves to an object with:\n\t *   successes: list of geofences successfully created\n\t *   errors: list of geofences that failed to create\n\t */\n\tpublic async saveGeofences(\n\t\tgeofences: GeofenceInput[],\n\t\toptions?: AmazonLocationServiceGeofenceOptions\n\t): Promise<SaveGeofencesResults> {\n\t\tif (geofences.length < 1) {\n\t\t\tthrow new Error('Geofence input array is empty');\n\t\t}\n\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\t// Verify geofence collection exists in aws-config.js\n\t\ttry {\n\t\t\tthis._verifyGeofenceCollections(options?.collectionName);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\tvalidateGeofencesInput(geofences);\n\n\t\t// Convert geofences to PascalCase for Amazon Location Service format\n\t\tconst PascalGeofences: BatchPutGeofenceRequestEntry[] = geofences.map(\n\t\t\t({ geofenceId, geometry: { polygon } }) => {\n\t\t\t\treturn {\n\t\t\t\t\tGeofenceId: geofenceId,\n\t\t\t\t\tGeometry: {\n\t\t\t\t\t\tPolygon: polygon,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t);\n\t\tconst results: SaveGeofencesResults = {\n\t\t\tsuccesses: [],\n\t\t\terrors: [],\n\t\t};\n\n\t\tconst geofenceBatches: BatchPutGeofenceRequestEntry[][] = [];\n\n\t\twhile (PascalGeofences.length > 0) {\n\t\t\t// Splice off 10 geofences from input clone due to Amazon Location Service API limit\n\t\t\tconst apiLimit = 10;\n\t\t\tgeofenceBatches.push(PascalGeofences.splice(0, apiLimit));\n\t\t}\n\n\t\tawait Promise.all(\n\t\t\tgeofenceBatches.map(async batch => {\n\t\t\t\t// Make API call for the 10 geofences\n\t\t\t\tlet response: BatchPutGeofenceCommandOutput;\n\t\t\t\ttry {\n\t\t\t\t\tresponse = await this._AmazonLocationServiceBatchPutGeofenceCall(\n\t\t\t\t\t\tbatch,\n\t\t\t\t\t\toptions?.collectionName || this._config.geofenceCollections.default\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// If the API call fails, add the geofences to the errors array and move to next batch\n\t\t\t\t\tbatch.forEach(geofence => {\n\t\t\t\t\t\tresults.errors.push({\n\t\t\t\t\t\t\tgeofenceId: geofence.GeofenceId,\n\t\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\t\tcode: 'APIConnectionError',\n\t\t\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Push all successes to results\n\t\t\t\tresponse.Successes.forEach(success => {\n\t\t\t\t\tconst { GeofenceId, CreateTime, UpdateTime } = success;\n\t\t\t\t\tresults.successes.push({\n\t\t\t\t\t\tgeofenceId: GeofenceId,\n\t\t\t\t\t\tcreateTime: CreateTime,\n\t\t\t\t\t\tupdateTime: UpdateTime,\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t// Push all errors to results\n\t\t\t\tresponse.Errors.forEach(error => {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tError: { Code, Message },\n\t\t\t\t\t\tGeofenceId,\n\t\t\t\t\t} = error;\n\t\t\t\t\tresults.errors.push({\n\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\tcode: Code,\n\t\t\t\t\t\t\tmessage: Message,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgeofenceId: GeofenceId,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Get geofence from a geofence collection\n\t * @param geofenceId:string\n\t * @param options?: Optional parameters for getGeofence\n\t * @returns {Promise<AmazonLocationServiceGeofence>} - Promise that resolves to a geofence object\n\t */\n\tpublic async getGeofence(\n\t\tgeofenceId: GeofenceId,\n\t\toptions?: AmazonLocationServiceGeofenceOptions\n\t): Promise<AmazonLocationServiceGeofence> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\t// Verify geofence collection exists in aws-config.js\n\t\ttry {\n\t\t\tthis._verifyGeofenceCollections(options?.collectionName);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\tvalidateGeofenceId(geofenceId);\n\n\t\t// Create Amazon Location Service Client\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgentObject(),\n\t\t});\n\n\t\t// Create Amazon Location Service command\n\t\tconst commandInput: GetGeofenceCommandInput = {\n\t\t\tGeofenceId: geofenceId,\n\t\t\tCollectionName:\n\t\t\t\toptions?.collectionName || this._config.geofenceCollections.default,\n\t\t};\n\t\tconst command = new GetGeofenceCommand(commandInput);\n\n\t\t// Make API call\n\t\tlet response: GetGeofenceCommandOutput;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t// Convert response to camelCase for return\n\t\tconst { GeofenceId, CreateTime, UpdateTime, Status, Geometry } = response;\n\t\tconst geofence: AmazonLocationServiceGeofence = {\n\t\t\tcreateTime: CreateTime,\n\t\t\tgeofenceId: GeofenceId,\n\t\t\tgeometry: {\n\t\t\t\tpolygon: Geometry.Polygon as GeofencePolygon,\n\t\t\t},\n\t\t\tstatus: Status as AmazonLocationServiceGeofenceStatus,\n\t\t\tupdateTime: UpdateTime,\n\t\t};\n\n\t\treturn geofence;\n\t}\n\n\t/**\n\t * List geofences from a geofence collection\n\t * @param  options?: ListGeofenceOptions\n\t * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n\t *   entries: list of geofences - 100 geofences are listed per page\n\t *   nextToken: token for next page of geofences\n\t */\n\tpublic async listGeofences(\n\t\toptions?: AmazonLocationServiceListGeofenceOptions\n\t): Promise<ListGeofenceResults> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\t// Verify geofence collection exists in aws-config.js\n\t\ttry {\n\t\t\tthis._verifyGeofenceCollections(options?.collectionName);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t// Create Amazon Location Service Client\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgentObject(),\n\t\t});\n\n\t\t// Create Amazon Location Service input\n\t\tconst listGeofencesInput: ListGeofencesCommandInput = {\n\t\t\tNextToken: options?.nextToken,\n\t\t\tCollectionName:\n\t\t\t\toptions?.collectionName || this._config.geofenceCollections.default,\n\t\t};\n\n\t\t// Create Amazon Location Service command\n\t\tconst command: ListGeofencesCommand = new ListGeofencesCommand(\n\t\t\tlistGeofencesInput\n\t\t);\n\n\t\t// Make API call\n\t\tlet response: ListGeofencesCommandOutput;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t// Convert response to camelCase for return\n\t\tconst { NextToken, Entries } = response;\n\n\t\tconst results: ListGeofenceResults = {\n\t\t\tentries: Entries.map(\n\t\t\t\t({\n\t\t\t\t\tGeofenceId,\n\t\t\t\t\tCreateTime,\n\t\t\t\t\tUpdateTime,\n\t\t\t\t\tStatus,\n\t\t\t\t\tGeometry: { Polygon },\n\t\t\t\t}) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tgeofenceId: GeofenceId,\n\t\t\t\t\t\tcreateTime: CreateTime,\n\t\t\t\t\t\tupdateTime: UpdateTime,\n\t\t\t\t\t\tstatus: Status,\n\t\t\t\t\t\tgeometry: {\n\t\t\t\t\t\t\tpolygon: Polygon as GeofencePolygon,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t),\n\t\t\tnextToken: NextToken,\n\t\t};\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Delete geofences from a geofence collection\n\t * @param geofenceIds: string|string[]\n\t * @param options?: GeofenceOptions\n\t * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n\t *  successes: list of geofences successfully deleted\n\t *  errors: list of geofences that failed to delete\n\t */\n\tpublic async deleteGeofences(\n\t\tgeofenceIds: string[],\n\t\toptions?: AmazonLocationServiceGeofenceOptions\n\t): Promise<AmazonLocationServiceDeleteGeofencesResults> {\n\t\tif (geofenceIds.length < 1) {\n\t\t\tthrow new Error('GeofenceId input array is empty');\n\t\t}\n\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\tthis._verifyGeofenceCollections(options?.collectionName);\n\n\t\t// Validate all geofenceIds are valid\n\t\tconst badGeofenceIds = geofenceIds.filter(geofenceId => {\n\t\t\ttry {\n\t\t\t\tvalidateGeofenceId(geofenceId);\n\t\t\t} catch (error) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\tif (badGeofenceIds.length > 0) {\n\t\t\tthrow new Error(`Invalid geofence ids: ${badGeofenceIds.join(', ')}`);\n\t\t}\n\n\t\tconst results: AmazonLocationServiceDeleteGeofencesResults = {\n\t\t\tsuccesses: [],\n\t\t\terrors: [],\n\t\t};\n\n\t\tconst geofenceIdBatches: string[][] = [];\n\n\t\tlet count = 0;\n\t\twhile (count < geofenceIds.length) {\n\t\t\tgeofenceIdBatches.push(geofenceIds.slice(count, (count += 10)));\n\t\t}\n\n\t\tawait Promise.all(\n\t\t\tgeofenceIdBatches.map(async batch => {\n\t\t\t\tlet response;\n\t\t\t\ttry {\n\t\t\t\t\tresponse = await this._AmazonLocationServiceBatchDeleteGeofenceCall(\n\t\t\t\t\t\tbatch,\n\t\t\t\t\t\toptions?.collectionName || this._config.geofenceCollections.default\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// If the API call fails, add the geofences to the errors array and move to next batch\n\t\t\t\t\tbatch.forEach(geofenceId => {\n\t\t\t\t\t\tconst errorObject = {\n\t\t\t\t\t\t\tgeofenceId,\n\t\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\t\tcode: error.message,\n\t\t\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresults.errors.push(errorObject);\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst badGeofenceIds = response.Errors.map(\n\t\t\t\t\t({ geofenceId }) => geofenceId\n\t\t\t\t);\n\t\t\t\tresults.successes.push(\n\t\t\t\t\t...batch.filter(Id => !badGeofenceIds.includes(Id))\n\t\t\t\t);\n\t\t\t})\n\t\t);\n\t\treturn results;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tprivate async _ensureCredentials(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) return false;\n\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\tlogger.debug('Set credentials for storage. Credentials are:', cred);\n\t\t\tthis._config.credentials = cred;\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tlogger.debug('Ensure credentials error. Credentials are:', error);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate _verifyMapResources() {\n\t\tif (!this._config.maps) {\n\t\t\tconst errorString =\n\t\t\t\t\"No map resources found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n\t\t\tlogger.debug(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t\tif (!this._config.maps.default) {\n\t\t\tconst errorString =\n\t\t\t\t\"No default map resource found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n\t\t\tlogger.debug(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t}\n\n\tprivate _verifySearchIndex(optionalSearchIndex?: string) {\n\t\tif (\n\t\t\t(!this._config.search_indices || !this._config.search_indices.default) &&\n\t\t\t!optionalSearchIndex\n\t\t) {\n\t\t\tconst errorString =\n\t\t\t\t'No Search Index found in amplify config, please run `amplify add geo` to create one and run `amplify push` after.';\n\t\t\tlogger.debug(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t}\n\n\tprivate _verifyGeofenceCollections(optionalGeofenceCollectionName?: string) {\n\t\tif (\n\t\t\t(!this._config.geofenceCollections ||\n\t\t\t\t!this._config.geofenceCollections.default) &&\n\t\t\t!optionalGeofenceCollectionName\n\t\t) {\n\t\t\tconst errorString =\n\t\t\t\t'No Geofence Collections found, please run `amplify add geo` to create one and run `amplify push` after.';\n\t\t\tlogger.debug(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t}\n\n\tprivate async _AmazonLocationServiceBatchPutGeofenceCall(\n\t\tPascalGeofences: BatchPutGeofenceRequestEntry[],\n\t\tcollectionName?: string\n\t) {\n\t\t// Create the BatchPutGeofence input\n\t\tconst geofenceInput: BatchPutGeofenceCommandInput = {\n\t\t\tEntries: PascalGeofences,\n\t\t\tCollectionName:\n\t\t\t\tcollectionName || this._config.geofenceCollections.default,\n\t\t};\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgentObject(),\n\t\t});\n\t\tconst command = new BatchPutGeofenceCommand(geofenceInput);\n\n\t\tlet response: BatchPutGeofenceCommandOutput;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t\treturn response;\n\t}\n\n\tprivate async _AmazonLocationServiceBatchDeleteGeofenceCall(\n\t\tgeofenceIds: string[],\n\t\tcollectionName?: string\n\t): Promise<BatchDeleteGeofenceCommandOutput> {\n\t\t// Create the BatchDeleteGeofence input\n\t\tconst deleteGeofencesInput: BatchDeleteGeofenceCommandInput = {\n\t\t\tGeofenceIds: geofenceIds,\n\t\t\tCollectionName:\n\t\t\t\tcollectionName || this._config.geofenceCollections.default,\n\t\t};\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgentObject(),\n\t\t});\n\t\tconst command = new BatchDeleteGeofenceCommand(deleteGeofencesInput);\n\n\t\tlet response: BatchDeleteGeofenceCommandOutput;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t\treturn response;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}