{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutRecordInput, PutRecordOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1PutRecordCommand, serializeAws_json1_1PutRecordCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Writes a single data record into an Amazon Kinesis data stream. Call\n *                 <code>PutRecord</code> to send data into the stream for real-time ingestion and\n *             subsequent processing, one record at a time. Each shard can support writes up to 1,000\n *             records per second, up to a maximum data write total of 1 MiB per second.</p>\n *         <p>You must specify the name of the stream that captures, stores, and transports the\n *             data; a partition key; and the data blob itself.</p>\n *         <p>The data blob can be any type of data; for example, a segment from a log file,\n *             geographic/location data, website clickstream data, and so on.</p>\n *         <p>The partition key is used by Kinesis Data Streams to distribute data across shards.\n *             Kinesis Data Streams segregates the data records that belong to a stream into multiple\n *             shards, using the partition key associated with each data record to determine the shard\n *             to which a given data record belongs.</p>\n *         <p>Partition keys are Unicode strings, with a maximum length limit of 256 characters\n *             for each key. An MD5 hash function is used to map partition keys to 128-bit integer\n *             values and to map associated data records to shards using the hash key ranges of the\n *             shards. You can override hashing the partition key to determine the shard by explicitly\n *             specifying a hash value using the <code>ExplicitHashKey</code> parameter. For more\n *             information, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream\">Adding Data to a Stream</a> in the <i>Amazon Kinesis Data Streams\n *                 Developer Guide</i>.</p>\n *         <p>\n *             <code>PutRecord</code> returns the shard ID of where the data record was placed and the\n *             sequence number that was assigned to the data record.</p>\n *         <p>Sequence numbers increase over time and are specific to a shard within a stream,\n *             not across all shards within a stream. To guarantee strictly increasing ordering, write\n *             serially to a shard and use the <code>SequenceNumberForOrdering</code> parameter. For\n *             more information, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream\">Adding Data to a Stream</a> in the <i>Amazon Kinesis Data Streams\n *                 Developer Guide</i>.</p>\n *         <important>\n *             <p>After you write a record to a stream, you cannot modify that record or its order\n *                 within the stream.</p>\n *         </important>\n *         <p>If a <code>PutRecord</code> request cannot be processed because of insufficient\n *             provisioned throughput on the shard involved in the request, <code>PutRecord</code>\n *             throws <code>ProvisionedThroughputExceededException</code>. </p>\n *         <p>By default, data records are accessible for 24 hours from the time that they are\n *             added to a stream. You can use <a>IncreaseStreamRetentionPeriod</a> or <a>DecreaseStreamRetentionPeriod</a> to modify this retention period.</p>\n */\nvar PutRecordCommand = /** @class */function (_super) {\n  __extends(PutRecordCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function PutRecordCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  PutRecordCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"PutRecordCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutRecordInput.filterSensitiveLog,\n      outputFilterSensitiveLog: PutRecordOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  PutRecordCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1PutRecordCommand(input, context);\n  };\n  PutRecordCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1PutRecordCommand(output, context);\n  };\n  return PutRecordCommand;\n}($Command);\nexport { PutRecordCommand };","map":{"version":3,"mappings":";AACA,SAASA,cAAc,EAAEC,eAAe,QAAQ,oBAAoB;AACpE,SAASC,sCAAsC,EAAEC,oCAAoC,QAAQ,0BAA0B;AACvH,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;EAAsCC;EAKpC;EACA;EAEA,0BAAqBC,KAA4B;IAAjD;IACE;IACAC,iBAAO;IAFYC,WAAK,GAALF,KAAK;;IAGxB;EACF;EAEA;;;EAGAG,4CAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA0C,EAC1CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACZ,cAAc,CAACS,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,UAAM,GAAKF,aAAa,OAAlB;IACd,IAAMQ,UAAU,GAAG,eAAe;IAClC,IAAMC,WAAW,GAAG,kBAAkB;IACtC,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM;MACNH,UAAU;MACVC,WAAW;MACXG,uBAAuB,EAAEzB,cAAc,CAAC0B,kBAAkB;MAC1DC,wBAAwB,EAAE1B,eAAe,CAACyB;KAC3C;IACO,kBAAc,GAAKb,aAAa,eAAlB;IACtB,OAAOM,KAAK,CAACS,OAAO,CAClB,UAACC,OAAsC;MACrC,qBAAc,CAACC,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEf,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxES,uBAAuB,CACxB;EACH,CAAC;EAEOZ,oCAAS,GAAjB,UAAkBH,KAA4B,EAAEuB,OAAuB;IACrE,OAAO5B,oCAAoC,CAACK,KAAK,EAAEuB,OAAO,CAAC;EAC7D,CAAC;EAEOpB,sCAAW,GAAnB,UAAoBqB,MAAsB,EAAED,OAAuB;IACjE,OAAO7B,sCAAsC,CAAC8B,MAAM,EAAED,OAAO,CAAC;EAChE,CAAC;EAIH,uBAAC;AAAD,CAAC,CAtDqCzB,QAAQ","names":["PutRecordInput","PutRecordOutput","deserializeAws_json1_1PutRecordCommand","serializeAws_json1_1PutRecordCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","PutRecordCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-sdk/client-kinesis/commands/PutRecordCommand.ts"],"sourcesContent":["import { KinesisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../KinesisClient\";\nimport { PutRecordInput, PutRecordOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1PutRecordCommand, serializeAws_json1_1PutRecordCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type PutRecordCommandInput = PutRecordInput;\nexport type PutRecordCommandOutput = PutRecordOutput & __MetadataBearer;\n\n/**\n * <p>Writes a single data record into an Amazon Kinesis data stream. Call\n *                 <code>PutRecord</code> to send data into the stream for real-time ingestion and\n *             subsequent processing, one record at a time. Each shard can support writes up to 1,000\n *             records per second, up to a maximum data write total of 1 MiB per second.</p>\n *         <p>You must specify the name of the stream that captures, stores, and transports the\n *             data; a partition key; and the data blob itself.</p>\n *         <p>The data blob can be any type of data; for example, a segment from a log file,\n *             geographic/location data, website clickstream data, and so on.</p>\n *         <p>The partition key is used by Kinesis Data Streams to distribute data across shards.\n *             Kinesis Data Streams segregates the data records that belong to a stream into multiple\n *             shards, using the partition key associated with each data record to determine the shard\n *             to which a given data record belongs.</p>\n *         <p>Partition keys are Unicode strings, with a maximum length limit of 256 characters\n *             for each key. An MD5 hash function is used to map partition keys to 128-bit integer\n *             values and to map associated data records to shards using the hash key ranges of the\n *             shards. You can override hashing the partition key to determine the shard by explicitly\n *             specifying a hash value using the <code>ExplicitHashKey</code> parameter. For more\n *             information, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream\">Adding Data to a Stream</a> in the <i>Amazon Kinesis Data Streams\n *                 Developer Guide</i>.</p>\n *         <p>\n *             <code>PutRecord</code> returns the shard ID of where the data record was placed and the\n *             sequence number that was assigned to the data record.</p>\n *         <p>Sequence numbers increase over time and are specific to a shard within a stream,\n *             not across all shards within a stream. To guarantee strictly increasing ordering, write\n *             serially to a shard and use the <code>SequenceNumberForOrdering</code> parameter. For\n *             more information, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream\">Adding Data to a Stream</a> in the <i>Amazon Kinesis Data Streams\n *                 Developer Guide</i>.</p>\n *         <important>\n *             <p>After you write a record to a stream, you cannot modify that record or its order\n *                 within the stream.</p>\n *         </important>\n *         <p>If a <code>PutRecord</code> request cannot be processed because of insufficient\n *             provisioned throughput on the shard involved in the request, <code>PutRecord</code>\n *             throws <code>ProvisionedThroughputExceededException</code>. </p>\n *         <p>By default, data records are accessible for 24 hours from the time that they are\n *             added to a stream. You can use <a>IncreaseStreamRetentionPeriod</a> or <a>DecreaseStreamRetentionPeriod</a> to modify this retention period.</p>\n */\nexport class PutRecordCommand extends $Command<\n  PutRecordCommandInput,\n  PutRecordCommandOutput,\n  KinesisClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: PutRecordCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: KinesisClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<PutRecordCommandInput, PutRecordCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"KinesisClient\";\n    const commandName = \"PutRecordCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: PutRecordInput.filterSensitiveLog,\n      outputFilterSensitiveLog: PutRecordOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: PutRecordCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1PutRecordCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<PutRecordCommandOutput> {\n    return deserializeAws_json1_1PutRecordCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}