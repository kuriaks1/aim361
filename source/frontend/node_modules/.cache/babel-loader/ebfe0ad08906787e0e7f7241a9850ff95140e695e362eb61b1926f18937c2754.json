{"ast":null,"code":"import { __awaiter, __generator, __read, __spread } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AnalyticsAction, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { putEvents } from '@aws-amplify/core/internals/aws-clients/pinpoint';\nimport { isAppInForeground } from '../utils/AppUtils';\nimport { getAnalyticsUserAgentString } from '../utils/UserAgent';\nvar logger = new Logger('EventsBuffer');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\nvar EventsBuffer = /** @class */function () {\n  function EventsBuffer(config) {\n    this._pause = false;\n    this._flush = false;\n    logger.debug('Instantiating buffer with config:', config);\n    this._buffer = [];\n    this._config = config;\n    this._sendBatch = this._sendBatch.bind(this);\n    this._startLoop();\n  }\n  EventsBuffer.prototype.push = function (event) {\n    var _a;\n    // if the buffer is currently at the configured limit, pushing would exceed it\n    if (this._buffer.length >= this._config.bufferSize) {\n      logger.debug('Exceeded analytics events buffer size');\n      return event.handlers.reject(new Error('Exceeded the size of analytics events buffer'));\n    }\n    var eventId = event.params.event.eventId;\n    var bufferElement = (_a = {}, _a[eventId] = event, _a);\n    this._buffer.push(bufferElement);\n  };\n  EventsBuffer.prototype.pause = function () {\n    this._pause = true;\n  };\n  EventsBuffer.prototype.resume = function () {\n    this._pause = false;\n  };\n  EventsBuffer.prototype.flush = function () {\n    this._flush = true;\n  };\n  EventsBuffer.prototype._startLoop = function () {\n    if (this._interval) {\n      clearInterval(this._interval);\n    }\n    var flushInterval = this._config.flushInterval;\n    this._interval = setInterval(this._sendBatch, flushInterval);\n  };\n  EventsBuffer.prototype._sendBatch = function () {\n    var bufferLength = this._buffer.length;\n    if (this._flush && !bufferLength) {\n      clearInterval(this._interval);\n    }\n    // Do not send the batch of events if\n    // the Buffer is paused or is empty or the App is not in the foreground\n    // Apps should be in the foreground since\n    // the OS may restrict access to the network in the background\n    if (this._pause || !bufferLength || !isAppInForeground()) {\n      return;\n    }\n    var flushSize = this._config.flushSize;\n    var batchSize = Math.min(flushSize, bufferLength);\n    var bufferSubset = this._buffer.splice(0, batchSize);\n    this._putEvents(bufferSubset);\n  };\n  EventsBuffer.prototype._putEvents = function (buffer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventMap, batchEventParams, _a, credentials, region, data, err_1;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            eventMap = this._bufferToMap(buffer);\n            batchEventParams = this._generateBatchEventParams(eventMap);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            _a = this._config, credentials = _a.credentials, region = _a.region;\n            return [4 /*yield*/, putEvents({\n              credentials: credentials,\n              region: region,\n              userAgentValue: getAnalyticsUserAgentString(AnalyticsAction.Record)\n            }, batchEventParams)];\n          case 2:\n            data = _b.sent();\n            this._processPutEventsSuccessResponse(data, eventMap);\n            return [3 /*break*/, 4];\n          case 3:\n            err_1 = _b.sent();\n            return [2 /*return*/, this._handlePutEventsFailure(err_1, eventMap)];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  EventsBuffer.prototype._generateBatchEventParams = function (eventMap) {\n    var batchEventParams = {\n      ApplicationId: '',\n      EventsRequest: {\n        BatchItem: {}\n      }\n    };\n    Object.values(eventMap).forEach(function (item) {\n      var params = item.params;\n      var event = params.event,\n        timestamp = params.timestamp,\n        config = params.config;\n      var name = event.name,\n        attributes = event.attributes,\n        metrics = event.metrics,\n        eventId = event.eventId,\n        session = event.session;\n      var appId = config.appId,\n        endpointId = config.endpointId;\n      var batchItem = batchEventParams.EventsRequest.BatchItem;\n      batchEventParams.ApplicationId = batchEventParams.ApplicationId || appId;\n      if (!batchItem[endpointId]) {\n        batchItem[endpointId] = {\n          Endpoint: {},\n          Events: {}\n        };\n      }\n      batchItem[endpointId].Events[eventId] = {\n        EventType: name,\n        Timestamp: new Date(timestamp).toISOString(),\n        Attributes: attributes,\n        Metrics: metrics,\n        Session: session\n      };\n    });\n    return batchEventParams;\n  };\n  EventsBuffer.prototype._handlePutEventsFailure = function (err, eventMap) {\n    logger.debug('_putEvents Failed: ', err);\n    var statusCode = err.$metadata && err.$metadata.httpStatusCode;\n    if (RETRYABLE_CODES.includes(statusCode)) {\n      var retryableEvents = Object.values(eventMap);\n      this._retry(retryableEvents);\n      return;\n    }\n  };\n  EventsBuffer.prototype._processPutEventsSuccessResponse = function (data, eventMap) {\n    var _a;\n    var _b = ((_a = data.EventsResponse) !== null && _a !== void 0 ? _a : {}).Results,\n      Results = _b === void 0 ? {} : _b;\n    var retryableEvents = [];\n    Object.entries(Results).forEach(function (_a) {\n      var _b = __read(_a, 2),\n        endpointId = _b[0],\n        endpointValues = _b[1];\n      var _c;\n      var responses = (_c = endpointValues.EventsItemResponse) !== null && _c !== void 0 ? _c : {};\n      Object.entries(responses).forEach(function (_a) {\n        var _b, _c;\n        var _d = __read(_a, 2),\n          eventId = _d[0],\n          eventValues = _d[1];\n        var eventObject = eventMap[eventId];\n        if (!eventObject) {\n          return;\n        }\n        var _e = eventValues !== null && eventValues !== void 0 ? eventValues : {},\n          StatusCode = _e.StatusCode,\n          Message = _e.Message;\n        // manually crafting handlers response to keep API consistant\n        var response = {\n          EventsResponse: {\n            Results: (_b = {}, _b[endpointId] = {\n              EventsItemResponse: (_c = {}, _c[eventId] = {\n                StatusCode: StatusCode,\n                Message: Message\n              }, _c)\n            }, _b)\n          }\n        };\n        if (StatusCode && ACCEPTED_CODES.includes(StatusCode)) {\n          eventObject.handlers.resolve(response);\n          return;\n        }\n        if (StatusCode && RETRYABLE_CODES.includes(StatusCode)) {\n          retryableEvents.push(eventObject);\n          return;\n        }\n        var name = eventObject.params.event.name;\n        logger.error(\"event \" + eventId + \" : \" + name + \" failed with error: \" + Message);\n        return eventObject.handlers.reject(response);\n      });\n    });\n    if (retryableEvents.length) {\n      this._retry(retryableEvents);\n    }\n  };\n  EventsBuffer.prototype._retry = function (retryableEvents) {\n    var _a;\n    // retryable events that haven't reached the resendLimit\n    var eligibleEvents = [];\n    retryableEvents.forEach(function (event) {\n      var _a;\n      var params = event.params;\n      var _b = params.event,\n        eventId = _b.eventId,\n        name = _b.name;\n      if (params.resendLimit-- > 0) {\n        logger.debug(\"resending event \" + eventId + \" : \" + name + \" with \" + params.resendLimit + \" retry attempts remaining\");\n        eligibleEvents.push((_a = {}, _a[eventId] = event, _a));\n        return;\n      }\n      logger.debug(\"no retry attempts remaining for event \" + eventId + \" : \" + name);\n    });\n    // add the events to the front of the buffer\n    (_a = this._buffer).unshift.apply(_a, __spread(eligibleEvents));\n  };\n  // convert buffer to map, i.e. { eventId1: { params, handler }, eventId2: { params, handlers } }\n  // this allows us to easily access the handlers after receiving a batch response\n  EventsBuffer.prototype._bufferToMap = function (buffer) {\n    return buffer.reduce(function (acc, curVal) {\n      var _a = __read(Object.entries(curVal), 1),\n        _b = __read(_a[0], 2),\n        key = _b[0],\n        value = _b[1];\n      acc[key] = value;\n      return acc;\n    }, {});\n  };\n  return EventsBuffer;\n}();\nexport default EventsBuffer;","map":{"version":3,"mappings":"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","names":["AnalyticsAction","ConsoleLogger","Logger","putEvents","isAppInForeground","getAnalyticsUserAgentString","logger","RETRYABLE_CODES","ACCEPTED_CODES","config","debug","_buffer","_config","_sendBatch","bind","_startLoop","EventsBuffer","event","length","bufferSize","handlers","reject","Error","bufferElement","_a","eventId","push","_pause","_flush","_interval","clearInterval","setInterval","flushInterval","bufferLength","batchSize","Math","min","flushSize","bufferSubset","splice","_putEvents","buffer","eventMap","_bufferToMap","batchEventParams","_generateBatchEventParams","credentials","region","userAgentValue","Record","data","_b","_processPutEventsSuccessResponse","_handlePutEventsFailure","err_1","ApplicationId","EventsRequest","BatchItem","Object","values","forEach","timestamp","attributes","metrics","session","endpointId","batchItem","appId","Endpoint","Events","EventType","name","Timestamp","Date","toISOString","Attributes","Metrics","Session","err","statusCode","$metadata","httpStatusCode","includes","retryableEvents","_retry","Results","entries","endpointValues","responses","EventsItemResponse","_d","eventValues","eventObject","StatusCode","Message","response","EventsResponse","_c","resolve","error","eligibleEvents","params","resendLimit","unshift","reduce","acc","curVal","key","value"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-amplify/analytics/src/Providers/EventBuffer.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AnalyticsAction, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport {\n\tputEvents,\n\tPutEventsInput,\n\tPutEventsOutput,\n} from '@aws-amplify/core/internals/aws-clients/pinpoint';\nimport { EventBuffer, EventObject, EventMap } from '../types';\nimport { isAppInForeground } from '../utils/AppUtils';\nimport { getAnalyticsUserAgentString } from '../utils/UserAgent';\n\nconst logger = new Logger('EventsBuffer');\nconst RETRYABLE_CODES = [429, 500];\nconst ACCEPTED_CODES = [202];\n\ntype EventsBufferConfig = {\n\tbufferSize: number;\n\tflushSize: number;\n\tflushInterval: number;\n\tresendLimit: number;\n};\n\nexport default class EventsBuffer {\n\tprivate _config;\n\tprivate _interval;\n\tprivate _buffer: EventBuffer;\n\tprivate _pause = false;\n\tprivate _flush = false;\n\n\tconstructor(config: EventsBufferConfig) {\n\t\tlogger.debug('Instantiating buffer with config:', config);\n\t\tthis._buffer = [];\n\t\tthis._config = config;\n\n\t\tthis._sendBatch = this._sendBatch.bind(this);\n\n\t\tthis._startLoop();\n\t}\n\n\tpublic push(event: EventObject) {\n\t\t// if the buffer is currently at the configured limit, pushing would exceed it\n\t\tif (this._buffer.length >= this._config.bufferSize) {\n\t\t\tlogger.debug('Exceeded analytics events buffer size');\n\t\t\treturn event.handlers.reject(\n\t\t\t\tnew Error('Exceeded the size of analytics events buffer')\n\t\t\t);\n\t\t}\n\n\t\tconst { eventId } = event.params.event;\n\t\tconst bufferElement = { [eventId]: event };\n\t\tthis._buffer.push(bufferElement);\n\t}\n\n\tpublic pause() {\n\t\tthis._pause = true;\n\t}\n\n\tpublic resume() {\n\t\tthis._pause = false;\n\t}\n\n\tpublic flush() {\n\t\tthis._flush = true;\n\t}\n\n\tprivate _startLoop() {\n\t\tif (this._interval) {\n\t\t\tclearInterval(this._interval);\n\t\t}\n\n\t\tconst { flushInterval } = this._config;\n\n\t\tthis._interval = setInterval(this._sendBatch, flushInterval);\n\t}\n\n\tprivate _sendBatch() {\n\t\tconst bufferLength = this._buffer.length;\n\n\t\tif (this._flush && !bufferLength) {\n\t\t\tclearInterval(this._interval);\n\t\t}\n\n\t\t// Do not send the batch of events if\n\t\t// the Buffer is paused or is empty or the App is not in the foreground\n\t\t// Apps should be in the foreground since\n\t\t// the OS may restrict access to the network in the background\n\t\tif (this._pause || !bufferLength || !isAppInForeground()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { flushSize } = this._config;\n\n\t\tconst batchSize = Math.min(flushSize, bufferLength);\n\t\tconst bufferSubset = this._buffer.splice(0, batchSize);\n\n\t\tthis._putEvents(bufferSubset);\n\t}\n\n\tprivate async _putEvents(buffer: EventBuffer) {\n\t\tconst eventMap: EventMap = this._bufferToMap(buffer);\n\t\tconst batchEventParams = this._generateBatchEventParams(eventMap);\n\n\t\ttry {\n\t\t\tconst { credentials, region } = this._config;\n\t\t\tconst data: PutEventsOutput = await putEvents(\n\t\t\t\t{\n\t\t\t\t\tcredentials,\n\t\t\t\t\tregion,\n\t\t\t\t\tuserAgentValue: getAnalyticsUserAgentString(AnalyticsAction.Record),\n\t\t\t\t},\n\t\t\t\tbatchEventParams\n\t\t\t);\n\t\t\tthis._processPutEventsSuccessResponse(data, eventMap);\n\t\t} catch (err) {\n\t\t\treturn this._handlePutEventsFailure(err, eventMap);\n\t\t}\n\t}\n\n\tprivate _generateBatchEventParams(eventMap: EventMap): PutEventsInput {\n\t\tconst batchEventParams = {\n\t\t\tApplicationId: '',\n\t\t\tEventsRequest: {\n\t\t\t\tBatchItem: {},\n\t\t\t},\n\t\t};\n\n\t\tObject.values(eventMap).forEach(item => {\n\t\t\tconst { params } = item;\n\t\t\tconst { event, timestamp, config } = params;\n\t\t\tconst { name, attributes, metrics, eventId, session } = event;\n\t\t\tconst { appId, endpointId } = config;\n\n\t\t\tconst batchItem = batchEventParams.EventsRequest.BatchItem;\n\n\t\t\tbatchEventParams.ApplicationId = batchEventParams.ApplicationId || appId;\n\n\t\t\tif (!batchItem[endpointId]) {\n\t\t\t\tbatchItem[endpointId] = {\n\t\t\t\t\tEndpoint: {},\n\t\t\t\t\tEvents: {},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tbatchItem[endpointId].Events[eventId] = {\n\t\t\t\tEventType: name,\n\t\t\t\tTimestamp: new Date(timestamp).toISOString(),\n\t\t\t\tAttributes: attributes,\n\t\t\t\tMetrics: metrics,\n\t\t\t\tSession: session,\n\t\t\t};\n\t\t});\n\n\t\treturn batchEventParams;\n\t}\n\n\tprivate _handlePutEventsFailure(err, eventMap: EventMap) {\n\t\tlogger.debug('_putEvents Failed: ', err);\n\t\tconst statusCode = err.$metadata && err.$metadata.httpStatusCode;\n\n\t\tif (RETRYABLE_CODES.includes(statusCode)) {\n\t\t\tconst retryableEvents = Object.values(eventMap);\n\t\t\tthis._retry(retryableEvents);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate _processPutEventsSuccessResponse(\n\t\tdata: PutEventsOutput,\n\t\teventMap: EventMap\n\t) {\n\t\tconst { Results = {} } = data.EventsResponse ?? {};\n\t\tconst retryableEvents: EventObject[] = [];\n\n\t\tObject.entries(Results).forEach(([endpointId, endpointValues]) => {\n\t\t\tconst responses = endpointValues.EventsItemResponse ?? {};\n\n\t\t\tObject.entries(responses).forEach(([eventId, eventValues]) => {\n\t\t\t\tconst eventObject = eventMap[eventId];\n\t\t\t\tif (!eventObject) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { StatusCode, Message } = eventValues ?? {};\n\n\t\t\t\t// manually crafting handlers response to keep API consistant\n\t\t\t\tconst response = {\n\t\t\t\t\tEventsResponse: {\n\t\t\t\t\t\tResults: {\n\t\t\t\t\t\t\t[endpointId]: {\n\t\t\t\t\t\t\t\tEventsItemResponse: {\n\t\t\t\t\t\t\t\t\t[eventId]: { StatusCode, Message },\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tif (StatusCode && ACCEPTED_CODES.includes(StatusCode)) {\n\t\t\t\t\teventObject.handlers.resolve(response);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (StatusCode && RETRYABLE_CODES.includes(StatusCode)) {\n\t\t\t\t\tretryableEvents.push(eventObject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { name } = eventObject.params.event;\n\n\t\t\t\tlogger.error(\n\t\t\t\t\t`event ${eventId} : ${name} failed with error: ${Message}`\n\t\t\t\t);\n\t\t\t\treturn eventObject.handlers.reject(response);\n\t\t\t});\n\t\t});\n\n\t\tif (retryableEvents.length) {\n\t\t\tthis._retry(retryableEvents);\n\t\t}\n\t}\n\n\tprivate _retry(retryableEvents: EventObject[]) {\n\t\t// retryable events that haven't reached the resendLimit\n\t\tconst eligibleEvents: EventBuffer = [];\n\n\t\tretryableEvents.forEach((event: EventObject) => {\n\t\t\tconst { params } = event;\n\t\t\tconst { eventId, name } = params.event;\n\n\t\t\tif (params.resendLimit-- > 0) {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`resending event ${eventId} : ${name} with ${params.resendLimit} retry attempts remaining`\n\t\t\t\t);\n\t\t\t\teligibleEvents.push({ [eventId]: event });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(\n\t\t\t\t`no retry attempts remaining for event ${eventId} : ${name}`\n\t\t\t);\n\t\t});\n\n\t\t// add the events to the front of the buffer\n\t\tthis._buffer.unshift(...eligibleEvents);\n\t}\n\n\t// convert buffer to map, i.e. { eventId1: { params, handler }, eventId2: { params, handlers } }\n\t// this allows us to easily access the handlers after receiving a batch response\n\tprivate _bufferToMap(buffer: EventBuffer) {\n\t\treturn buffer.reduce((acc, curVal) => {\n\t\t\tconst [[key, value]] = Object.entries(curVal);\n\t\t\tacc[key] = value;\n\t\t\treturn acc;\n\t\t}, {});\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}