{"ast":null,"code":"import { constructStack } from \"@aws-sdk/middleware-stack\";\nvar Client = /** @class */function () {\n  function Client(config) {\n    this.middlewareStack = constructStack();\n    this.config = config;\n  }\n  Client.prototype.send = function (command, optionsOrCb, cb) {\n    var options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n    var callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n    var handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n    if (callback) {\n      handler(command).then(function (result) {\n        return callback(null, result.output);\n      }, function (err) {\n        return callback(err);\n      }).catch(\n      // prevent any errors thrown in the callback from triggering an\n      // unhandled promise rejection\n      function () {});\n    } else {\n      return handler(command).then(function (result) {\n        return result.output;\n      });\n    }\n  };\n  Client.prototype.destroy = function () {\n    if (this.config.requestHandler.destroy) this.config.requestHandler.destroy();\n  };\n  return Client;\n}();\nexport { Client };","map":{"version":3,"mappings":"AAAA,SAASA,cAAc,QAAQ,2BAA2B;AAe1D;EAQE,gBAAYC,MAAmC;IAFxC,oBAAe,GAAGD,cAAc,EAA6B;IAGlE,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;EAcAC,qBAAI,GAAJ,UACEC,OAA+G,EAC/GC,WAAsE,EACtEC,EAA0C;IAE1C,IAAMC,OAAO,GAAG,OAAOF,WAAW,KAAK,UAAU,GAAGA,WAAW,GAAGG,SAAS;IAC3E,IAAMC,QAAQ,GAAG,OAAOJ,WAAW,KAAK,UAAU,GAAIA,WAAqD,GAAGC,EAAE;IAChH,IAAMI,OAAO,GAAGN,OAAO,CAACO,iBAAiB,CAAC,IAAI,CAACC,eAAsB,EAAE,IAAI,CAACV,MAAM,EAAEK,OAAO,CAAC;IAC5F,IAAIE,QAAQ,EAAE;MACZC,OAAO,CAACN,OAAO,CAAC,CACbS,IAAI,CACH,UAACC,MAAM;QAAK,eAAQ,CAAC,IAAI,EAAEA,MAAM,CAACC,MAAM,CAAC;MAA7B,CAA6B,EACzC,UAACC,GAAQ;QAAK,eAAQ,CAACA,GAAG,CAAC;MAAb,CAAa,CAC5B,CACAC,KAAK;MACJ;MACA;MACA,aAAO,CAAC,CACT;KACJ,MAAM;MACL,OAAOP,OAAO,CAACN,OAAO,CAAC,CAACS,IAAI,CAAC,UAACC,MAAM;QAAK,aAAM,CAACC,MAAM;MAAb,CAAa,CAAC;;EAE3D,CAAC;EAEDZ,wBAAO,GAAP;IACE,IAAI,IAAI,CAACD,MAAM,CAACgB,cAAc,CAACC,OAAO,EAAE,IAAI,CAACjB,MAAM,CAACgB,cAAc,CAACC,OAAO,EAAE;EAC9E,CAAC;EACH,aAAC;AAAD,CAAC,CAnDD","names":["constructStack","config","Client","command","optionsOrCb","cb","options","undefined","callback","handler","resolveMiddleware","middlewareStack","then","result","output","err","catch","requestHandler","destroy"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-sdk/smithy-client/src/client.ts"],"sourcesContent":["import { constructStack } from \"@aws-sdk/middleware-stack\";\nimport { Client as IClient, Command, MetadataBearer, RequestHandler } from \"@aws-sdk/types\";\n\nexport interface SmithyConfiguration<HandlerOptions> {\n  requestHandler: RequestHandler<any, any, HandlerOptions>;\n  /**\n   * The API version set internally by the SDK, and is\n   * not planned to be used by customer code.\n   * @internal\n   */\n  readonly apiVersion: string;\n}\n\nexport type SmithyResolvedConfiguration<HandlerOptions> = SmithyConfiguration<HandlerOptions>;\n\nexport class Client<\n  HandlerOptions,\n  ClientInput extends object,\n  ClientOutput extends MetadataBearer,\n  ResolvedClientConfiguration extends SmithyResolvedConfiguration<HandlerOptions>\n> implements IClient<ClientInput, ClientOutput, ResolvedClientConfiguration> {\n  public middlewareStack = constructStack<ClientInput, ClientOutput>();\n  readonly config: ResolvedClientConfiguration;\n  constructor(config: ResolvedClientConfiguration) {\n    this.config = config;\n  }\n  send<InputType extends ClientInput, OutputType extends ClientOutput>(\n    command: Command<ClientInput, InputType, ClientOutput, OutputType, SmithyResolvedConfiguration<HandlerOptions>>,\n    options?: HandlerOptions\n  ): Promise<OutputType>;\n  send<InputType extends ClientInput, OutputType extends ClientOutput>(\n    command: Command<ClientInput, InputType, ClientOutput, OutputType, SmithyResolvedConfiguration<HandlerOptions>>,\n    cb: (err: any, data?: OutputType) => void\n  ): void;\n  send<InputType extends ClientInput, OutputType extends ClientOutput>(\n    command: Command<ClientInput, InputType, ClientOutput, OutputType, SmithyResolvedConfiguration<HandlerOptions>>,\n    options: HandlerOptions,\n    cb: (err: any, data?: OutputType) => void\n  ): void;\n  send<InputType extends ClientInput, OutputType extends ClientOutput>(\n    command: Command<ClientInput, InputType, ClientOutput, OutputType, SmithyResolvedConfiguration<HandlerOptions>>,\n    optionsOrCb?: HandlerOptions | ((err: any, data?: OutputType) => void),\n    cb?: (err: any, data?: OutputType) => void\n  ): Promise<OutputType> | void {\n    const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n    const callback = typeof optionsOrCb === \"function\" ? (optionsOrCb as (err: any, data?: OutputType) => void) : cb;\n    const handler = command.resolveMiddleware(this.middlewareStack as any, this.config, options);\n    if (callback) {\n      handler(command)\n        .then(\n          (result) => callback(null, result.output),\n          (err: any) => callback(err)\n        )\n        .catch(\n          // prevent any errors thrown in the callback from triggering an\n          // unhandled promise rejection\n          () => {}\n        );\n    } else {\n      return handler(command).then((result) => result.output);\n    }\n  }\n\n  destroy() {\n    if (this.config.requestHandler.destroy) this.config.requestHandler.destroy();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}