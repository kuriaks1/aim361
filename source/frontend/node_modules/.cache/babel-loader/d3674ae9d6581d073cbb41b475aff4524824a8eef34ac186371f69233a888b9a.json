{"ast":null,"code":"import React, { useContext, useMemo, useEffect } from 'react';\nimport { useInterpret } from '@xstate/react';\nimport { createAuthenticatorMachine, listenToAuthHub } from '@aws-amplify/ui';\nimport { AuthenticatorContext } from './AuthenticatorContext.mjs';\nfunction AuthenticatorProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  /**\n   * Based on use cases, developer might already have added another Provider\n   * outside Authenticator. In that case, we sync the two providers by just\n   * passing the parent value.\n   *\n   * TODO(BREAKING): enforce only one provider in App tree\n   */\n  const parentProviderVal = useContext(AuthenticatorContext);\n  const service = useInterpret(createAuthenticatorMachine);\n  const value = useMemo(() => !parentProviderVal ? {\n    service\n  } : parentProviderVal, [parentProviderVal, service]);\n  const {\n    service: activeService\n  } = value;\n  useEffect(() => {\n    const unsubscribe = listenToAuthHub(activeService);\n    return unsubscribe;\n  }, [activeService]);\n  return React.createElement(AuthenticatorContext.Provider, {\n    value: value\n  }, children);\n}\nexport { AuthenticatorProvider as default };","map":{"version":3,"names":["React","useContext","useMemo","useEffect","useInterpret","createAuthenticatorMachine","listenToAuthHub","AuthenticatorContext","AuthenticatorProvider","_ref","children","parentProviderVal","service","value","activeService","unsubscribe","createElement","Provider","default"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/context/AuthenticatorProvider.mjs"],"sourcesContent":["import React, { useContext, useMemo, useEffect } from 'react';\nimport { useInterpret } from '@xstate/react';\nimport { createAuthenticatorMachine, listenToAuthHub } from '@aws-amplify/ui';\nimport { AuthenticatorContext } from './AuthenticatorContext.mjs';\n\nfunction AuthenticatorProvider({ children, }) {\n    /**\n     * Based on use cases, developer might already have added another Provider\n     * outside Authenticator. In that case, we sync the two providers by just\n     * passing the parent value.\n     *\n     * TODO(BREAKING): enforce only one provider in App tree\n     */\n    const parentProviderVal = useContext(AuthenticatorContext);\n    const service = useInterpret(createAuthenticatorMachine);\n    const value = useMemo(() => (!parentProviderVal ? { service } : parentProviderVal), [parentProviderVal, service]);\n    const { service: activeService } = value;\n    useEffect(() => {\n        const unsubscribe = listenToAuthHub(activeService);\n        return unsubscribe;\n    }, [activeService]);\n    return (React.createElement(AuthenticatorContext.Provider, { value: value }, children));\n}\n\nexport { AuthenticatorProvider as default };\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,OAAO,EAAEC,SAAS,QAAQ,OAAO;AAC7D,SAASC,YAAY,QAAQ,eAAe;AAC5C,SAASC,0BAA0B,EAAEC,eAAe,QAAQ,iBAAiB;AAC7E,SAASC,oBAAoB,QAAQ,4BAA4B;AAEjE,SAASC,qBAAqBA,CAAAC,IAAA,EAAgB;EAAA,IAAf;IAAEC;EAAU,CAAC,GAAAD,IAAA;EACxC;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAME,iBAAiB,GAAGV,UAAU,CAACM,oBAAoB,CAAC;EAC1D,MAAMK,OAAO,GAAGR,YAAY,CAACC,0BAA0B,CAAC;EACxD,MAAMQ,KAAK,GAAGX,OAAO,CAAC,MAAO,CAACS,iBAAiB,GAAG;IAAEC;EAAQ,CAAC,GAAGD,iBAAkB,EAAE,CAACA,iBAAiB,EAAEC,OAAO,CAAC,CAAC;EACjH,MAAM;IAAEA,OAAO,EAAEE;EAAc,CAAC,GAAGD,KAAK;EACxCV,SAAS,CAAC,MAAM;IACZ,MAAMY,WAAW,GAAGT,eAAe,CAACQ,aAAa,CAAC;IAClD,OAAOC,WAAW;EACtB,CAAC,EAAE,CAACD,aAAa,CAAC,CAAC;EACnB,OAAQd,KAAK,CAACgB,aAAa,CAACT,oBAAoB,CAACU,QAAQ,EAAE;IAAEJ,KAAK,EAAEA;EAAM,CAAC,EAAEH,QAAQ,CAAC;AAC1F;AAEA,SAASF,qBAAqB,IAAIU,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}