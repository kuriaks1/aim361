{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetTextDetectionRequest, GetTextDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetTextDetectionCommand, serializeAws_json1_1GetTextDetectionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the text detection results of a Amazon Rekognition Video analysis started by <a>StartTextDetection</a>.</p>\n *          <p>Text detection with Amazon Rekognition Video is an asynchronous operation. You start text detection by\n *      calling <a>StartTextDetection</a> which returns a job identifier (<code>JobId</code>)\n *      When the text detection operation finishes, Amazon Rekognition publishes a completion status to the Amazon Simple Notification Service\n *      topic registered in the initial call to <code>StartTextDetection</code>. To get the results\n *      of the text detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *      if so, call <code>GetTextDetection</code> and pass the job identifier (<code>JobId</code>) from the initial call\n *      of <code>StartLabelDetection</code>.</p>\n *          <p>\n *             <code>GetTextDetection</code> returns an array of detected text (<code>TextDetections</code>) sorted by\n *        the time the text was detected, up to 50 words per frame of video.</p>\n *          <p>Each element of the array includes the detected text, the precentage confidence in the acuracy\n *        of the detected text, the time the text was detected, bounding box information for where the text\n *        was located, and unique identifiers for words and their lines.</p>\n *          <p>Use MaxResults parameter to limit the number of text detections returned. If there are more results than\n *      specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains\n *      a pagination token for getting the next set of results. To get the next page of results, call <code>GetTextDetection</code>\n *      and populate the <code>NextToken</code> request parameter with the token value returned from the previous\n *      call to <code>GetTextDetection</code>.</p>\n */\nvar GetTextDetectionCommand = /** @class */function (_super) {\n  __extends(GetTextDetectionCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function GetTextDetectionCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  GetTextDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"GetTextDetectionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetTextDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetTextDetectionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  GetTextDetectionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetTextDetectionCommand(input, context);\n  };\n  GetTextDetectionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetTextDetectionCommand(output, context);\n  };\n  return GetTextDetectionCommand;\n}($Command);\nexport { GetTextDetectionCommand };","map":{"version":3,"mappings":";AACA,SAASA,uBAAuB,EAAEC,wBAAwB,QAAQ,oBAAoB;AACtF,SACEC,6CAA6C,EAC7CC,2CAA2C,QACtC,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;AAqBA;EAA6CC;EAK3C;EACA;EAEA,iCAAqBC,KAAmC;IAAxD;IACE;IACAC,iBAAO;IAFYC,WAAK,GAALF,KAAK;;IAGxB;EACF;EAEA;;;EAGAG,mDAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA8C,EAC9CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACZ,cAAc,CAACS,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,UAAM,GAAKF,aAAa,OAAlB;IACd,IAAMQ,UAAU,GAAG,mBAAmB;IACtC,IAAMC,WAAW,GAAG,yBAAyB;IAC7C,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM;MACNH,UAAU;MACVC,WAAW;MACXG,uBAAuB,EAAEzB,uBAAuB,CAAC0B,kBAAkB;MACnEC,wBAAwB,EAAE1B,wBAAwB,CAACyB;KACpD;IACO,kBAAc,GAAKb,aAAa,eAAlB;IACtB,OAAOM,KAAK,CAACS,OAAO,CAClB,UAACC,OAAsC;MACrC,qBAAc,CAACC,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEf,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxES,uBAAuB,CACxB;EACH,CAAC;EAEOZ,2CAAS,GAAjB,UAAkBH,KAAmC,EAAEuB,OAAuB;IAC5E,OAAO5B,2CAA2C,CAACK,KAAK,EAAEuB,OAAO,CAAC;EACpE,CAAC;EAEOpB,6CAAW,GAAnB,UAAoBqB,MAAsB,EAAED,OAAuB;IACjE,OAAO7B,6CAA6C,CAAC8B,MAAM,EAAED,OAAO,CAAC;EACvE,CAAC;EAIH,8BAAC;AAAD,CAAC,CAtD4CzB,QAAQ","names":["GetTextDetectionRequest","GetTextDetectionResponse","deserializeAws_json1_1GetTextDetectionCommand","serializeAws_json1_1GetTextDetectionCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","GetTextDetectionCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["/Workshop/product-metadata/guidance-for-generating-product-descriptions-with-bedrock/source/frontend/node_modules/@aws-sdk/client-rekognition/commands/GetTextDetectionCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { GetTextDetectionRequest, GetTextDetectionResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1GetTextDetectionCommand,\n  serializeAws_json1_1GetTextDetectionCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type GetTextDetectionCommandInput = GetTextDetectionRequest;\nexport type GetTextDetectionCommandOutput = GetTextDetectionResponse & __MetadataBearer;\n\n/**\n * <p>Gets the text detection results of a Amazon Rekognition Video analysis started by <a>StartTextDetection</a>.</p>\n *          <p>Text detection with Amazon Rekognition Video is an asynchronous operation. You start text detection by\n *      calling <a>StartTextDetection</a> which returns a job identifier (<code>JobId</code>)\n *      When the text detection operation finishes, Amazon Rekognition publishes a completion status to the Amazon Simple Notification Service\n *      topic registered in the initial call to <code>StartTextDetection</code>. To get the results\n *      of the text detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *      if so, call <code>GetTextDetection</code> and pass the job identifier (<code>JobId</code>) from the initial call\n *      of <code>StartLabelDetection</code>.</p>\n *          <p>\n *             <code>GetTextDetection</code> returns an array of detected text (<code>TextDetections</code>) sorted by\n *        the time the text was detected, up to 50 words per frame of video.</p>\n *          <p>Each element of the array includes the detected text, the precentage confidence in the acuracy\n *        of the detected text, the time the text was detected, bounding box information for where the text\n *        was located, and unique identifiers for words and their lines.</p>\n *          <p>Use MaxResults parameter to limit the number of text detections returned. If there are more results than\n *      specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains\n *      a pagination token for getting the next set of results. To get the next page of results, call <code>GetTextDetection</code>\n *      and populate the <code>NextToken</code> request parameter with the token value returned from the previous\n *      call to <code>GetTextDetection</code>.</p>\n */\nexport class GetTextDetectionCommand extends $Command<\n  GetTextDetectionCommandInput,\n  GetTextDetectionCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: GetTextDetectionCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<GetTextDetectionCommandInput, GetTextDetectionCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"GetTextDetectionCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: GetTextDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetTextDetectionResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: GetTextDetectionCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1GetTextDetectionCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<GetTextDetectionCommandOutput> {\n    return deserializeAws_json1_1GetTextDetectionCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}